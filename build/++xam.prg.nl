REALFAC = $BBA2
MEMARG = $BA8C
MEMMUL = $BA28
MEMSUB = $B850
FACMEM = $BBD7
PRINTSTRS = $AB25
VALS = $B7B5
CMPFAC = $BC5B
FACADD = $B867
SGNFAC = $BC2B
ARGADD = $B86A
ARGAND = $AFE9
ARGDIV = $BB14
FACMUL = $BA30
FACLOG = $B9EA
FACSQR = $BF71
FACEXPCALL = $BFED
FACABS = $BC58
FACSIN = $E26B
FACCOS = $E264
FACTAN = $E2B4
FACATN = $E30E
FACSIG = $BC39
FACNOT = $AED4
FACRND = $E097
XFACWORD = $B7F7
FACDIV = $BB0F
BASINT = $BCCC
FACPOW = $BF7B
FACSUB = $B853
FACOR = $AFE6
ARGFAC = $BBFC
FACARG = $BC0C
FACSTR = $BDDF
FACINT = $B1AA
RNDFAC = $BC1B
INTFAC = $B391
WRITETIS = $A9E7
GETTI = $BE68
GETTIME = $AF7E
COPYTIME = $AF87
TI2FAC = $AF84
BYTEFAC = $B3A2
CRSRRIGHT = $AB3B
ERRALL = $A437
ERRIQ = $B248
ERREI = $ACF4
ERRSYN = $AF08
INPUT = $A560
CRSRPOS = $FFF0
CHROUT = $FFD2
GETIN = $FFE4
OPENCH = $FFC0
CLOSECH = $FFC3
CHKIN = $FFC6
CHKOUT = $FFC9
CLRCH = $FFCC
LOADXX = $FFD5
SAVEXX = $FFD8
TWAIT = $FFE1
ERRFNF = $F12F
ARGSGN=$6E
ARGLO=$6D
ARGMO=$6C
ARGMOH=$6B
ARGHO=$6A
ARGEXP=$69
FACSGN=$66
FACLO=$65
FACMO=$64
FACMOH=$63
FACHO=$62
FACEXP=$61
FACOV=$70
OLDOV=$56
ARISGN=$6F
FAC=$61
RESLO=$29
RESMO=$28
RESMOH=$27
RESHO=$26
RESOV=$2A
RESHOP=$6F
FACHOP=$56
ITERCNT=$67
IOCHANNEL=$13
BASICSTART=$2B
BASICEND=$37
STATUS=$90
VERCHK=$93
SECADDR=$B9
DEVICENUM=$BA
FILELEN=$B7
LOGICADDR=$B8
FILEADDR=$BB
LOADEND=$C3
KEYNDX=$C6
INDEX1=$22
VALTYPE=$0D
LOWDS=$5D
TIMEADDR=$A0
BASICPOINTER=$7A
LOADOK_STATUS=64
LOFBUF=$FF
LOFBUFH=$100
INPUTBUF=$200
BASICBUFFER=820
TMP_ZP = 105
TMP2_ZP = 107
TMP3_ZP = 34
JUMP_TARGET = 69
TMP_REG=71
G_REG=73
X_REG=61
*=2072
TSX
STX SP_SAVE
PROGRAMSTART:
JSR START
LINE_0:
LINE_10:
LDY 186
LDA #0
STY VAR_DN%
STA VAR_DN%+1
JSR GOSUB
JSR LINE_63300
JSR GOSUB
JSR LINE_60000
JSR GOSUB
JSR LINE_61200
JSR GOSUB
JSR LINE_48000
JSR GOSUB
JSR LINE_61500
LINE_20:
LDA #<CONST_0
LDY #>CONST_0
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_RN$
LDY #>VAR_RN$
JSR COPYSTRING
JSR GOSUB
JSR LINE_63300
LINE_30:
JSR GOSUB
JSR LINE_40100
LINE_40:
JSR GOSUB
JSR LINE_50000
JSR GOSUB
JSR LINE_40000
LINE_50:
JSR GOSUB
JSR LINE_52000
JSR GOSUB
JSR LINE_40000
LINE_60:
JMP LINE_40
LINE_40000:
LINE_40010:
LDA VAR_ER
BEQ EQ_SKIP0
EQ_EQ0:
JMP LINE_SKIP222
EQ_SKIP0:
COMP_SKP0:
LINE_NSKIP222:
JMP RETURN
LINE_SKIP222:
LINE_40020:
JSR ONETOFAC
LDA #<VAR_ER
LDY #>VAR_ER
JSR CMPFAC
EQ_EQ1:
EQ_SKIP1:
COMP_SKP1:
BNE LINE_SKIP223
LINE_NSKIP223:
LDA #<CONST_3
LDY #>CONST_3
JSR STROUTBRKWL
LINE_SKIP223:
LINE_40030:
LDX #4
dceloop3227_1:
LDA CONST_4R,X
CMP VAR_ER,X
BNE LINE_SKIP224
DEX
BPL dceloop3227_1
LINE_NSKIP224:
LDA #<CONST_5
LDY #>CONST_5
JSR STROUTBRKWL
LINE_SKIP224:
LINE_40040:
LDX #4
dcneloop3228_1:
LDA CONST_6R,X
CMP VAR_ER,X
BNE LINE_NSKIP225
DEX
BPL dcneloop3228_1
JMP LINE_SKIP225
LINE_NSKIP225:
LDA #0
STA VAR_ER
STA VAR_ER+1
STA VAR_ER+2
STA VAR_ER+3
STA VAR_ER+4
JMP RETURN
LINE_SKIP225:
LINE_40050:
JSR COMPACT1
LINE_40060:
JSR COMPACT147
TYA
JSR COMPACT193
JSR CMPFAC
NEQ_NEQ4:
NEQ_SKIP4:
COMP_SKP4:
BEQ LINE_SKIP226
LINE_NSKIP226:
LDA #<CONST_8
LDY #>CONST_8
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP226:
LINE_40070:
LDA #39
JSR SINGLECHROUTMAX
LDA #<VAR_CP$[]
LDY #>VAR_CP$[]
JSR COMPACT4
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_10
LDY #>CONST_10
JSR STROUTBRKWL
JMP RETURN
LINE_40100:
LINE_40110:
JSR GOSUB
JSR LINE_62000
LINE_40120:
JSR GOSUB
JSR LINE_48200
JSR GOSUB
JSR LINE_59500
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_XREG
JSR CLOSE
JMP RETURN
LINE_40500:
LINE_40510:
LDA #<VAR_ID%[]
LDY #>VAR_ID%[]
JSR COMPACT195
JSR ARRAYACCESS_INTEGER_INT
LDA #<VAR_BA
LDY #>VAR_BA
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_AD
LDY #>VAR_AD
JSR FACMEM
JSR COMPACT196
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
LINE_40520:
LDX #4
dcloop199_1:
LDA CONST_2R,X
STA VAR_PP,X
DEX
BPL dcloop199_1
LDA #<VAR_AD
LDY #>VAR_AD
JSR REALFAC
JSR FACWORD
STY MOVBSELF2+1
STA MOVBSELF2+2
MOVBSELF2:
LDY $FFFF
LDA #0
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT61
LDA #<FORLOOP0
STA JUMP_TARGET
LDA #>FORLOOP0
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP0:
JSR COMPACTMAX
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF3+1
STA MOVBSELF3+2
MOVBSELF3:
LDY $FFFF
LDA #0
TYA
TAX
JSR CHRINTB
JSR COMPACT197
JSR CONCAT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_0
JMP (JUMP_TARGET)
RBEQ_0:
LINE_40530:
JSR GOSUB
JSR LINE_59100
JMP RETURN
LINE_40600:
LINE_40605:
JSR COMPACT1
LDA #$0f
LDY #$00
JSR COMPACT198
JSR ICMP
EQ_EQ5:
EQ_SKIP5:
COMP_SKP6:
BNE LINE_SKIP227
LINE_NSKIP227:
LDA #<CONST_13
LDY #>CONST_13
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP227:
LINE_40610:
LDA #<CONST_14
LDY #>CONST_14
JSR STROUTWL
LDA #<VAR_CV$[]
LDY #>VAR_CV$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #33
JSR SINGLECHROUTBRKMAX
LINE_40620:
JMP RETURN
LINE_40650:
LINE_40660:
JSR LINEBREAK
JSR GOSUB
JSR LINE_62600
JMP RETURN
LINE_40700:
LINE_40710:
LDY #10
STY 646
JSR LINEBREAK
LDA #<CONST_17
LDY #>CONST_17
JSR STROUTBRKWL
LINE_40715:
JSR COMPACT199
LDY VAR_IC%
LDA VAR_IC%+1
JSR ICMP
EQ_EQ6:
EQ_SKIP6:
COMP_SKP7:
BNE LINE_SKIP228
LINE_NSKIP228:
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_YREG
JSR TAB
LDA #<CONST_18
LDY #>CONST_18
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP228:
LINE_40720:
JSR COMPACT200
JSR COMPACT201
JSR COMPACT203
LDA #<FORLOOP1
STA JUMP_TARGET
LDA #>FORLOOP1
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP1:
LINE_40730:
JSR COMPACT171
JSR ARRAYACCESS_INTEGER_S
LDA X_REG
BEQ EQ_EQ7
LDA #0
JMP EQ_SKIP7
EQ_EQ7:
LDA #$1
EQ_SKIP7:
COMP_SKP8:
BNE LINE_NSKIP229
JMP LINE_SKIP229
LINE_NSKIP229:
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_YREG
JSR TAB
JSR COMPACT205
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT206
JSR ARRAYACCESS_STRING
JSR STROUTBRK
LINE_SKIP229:
LINE_40740:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_1
JMP (JUMP_TARGET)
RBEQ_1:
JMP RETURN
LINE_40800:
LINE_40805:
JSR COMPACT21
LDY VAR_TC%
LDA VAR_TC%+1
JSR ICMP
EQ_EQ8:
EQ_SKIP8:
COMP_SKP10:
BNE LINE_SKIP230
LINE_NSKIP230:
LDA #<CONST_19
LDY #>CONST_19
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP230:
LINE_40810:
LDY #0
TYA
STY VAR_RR%
STA VAR_RR%+1
JSR COMPACT23
LDY VAR_TC%
LDA VAR_TC%+1
JSR COMPACT28
LDA #<FORLOOP2
STA JUMP_TARGET
LDA #>FORLOOP2
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP2:
JSR COMPACT207
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
JSR GOSUB
JSR LINE_40900
LINE_40820:
JSR COMPACT208
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
EQ_EQ9:
EQ_SKIP9:
COMP_SKP11:
BNE LINE_SKIP231
LINE_NSKIP231:
LDY #1
LDA #0
STY VAR_RR%
STA VAR_RR%+1
JSR COMPACT209
LINE_SKIP231:
LINE_40830:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_2
JMP (JUMP_TARGET)
RBEQ_2:
LINE_40840:
JSR COMPACT40
LDY VAR_RR%
LDA VAR_RR%+1
JSR ICMP
EQ_EQ10:
EQ_SKIP10:
COMP_SKP13:
BNE LINE_SKIP232
LINE_NSKIP232:
JSR GOSUB
JSR LINE_40650
LINE_SKIP232:
LINE_40850:
JMP RETURN
LINE_40900:
LINE_40910:
JSR COMPACT43
LDA #<VAR_MV%[]
LDY #>VAR_MV%[]
JSR COMPACT195
JSR ARRAYACCESS_INTEGER_INT
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
EQ_EQ11:
EQ_SKIP11:
COMP_SKP14:
BNE LINE_SKIP233
LINE_NSKIP233:
JMP LINE_40930
LINE_SKIP233:
LINE_40920:
LDA #<CONST_20
LDY #>CONST_20
JSR STROUTWL
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_21
LDY #>CONST_21
JSR STROUTBRKWL
LDY #2
LDA #0
STY VAR_RT%
STA VAR_RT%+1
JMP RETURN
LINE_40930:
LDY VAR_IC%
LDA VAR_IC%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
LDY VAR_T%
LDA VAR_T%+1
STY AS_TMP
STA AS_TMP+1
JSR COMPACT93
JSR ARRAYSTORE_INT_INTEGER
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_22
LDY #>CONST_22
JSR STROUTBRKWL
LDY VAR_IC%
LDA VAR_IC%+1
JSR SUPERFIINX
STY VAR_IC%
STA VAR_IC%+1
LDY VAR_T%
LDA VAR_T%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
JSR COMPACT178
JSR COMPACT210
JSR ARRAYSTORE_INT_INTEGER
LINE_40940:
LDA #0
STA VAR_PP
STA VAR_PP+1
STA VAR_PP+2
STA VAR_PP+3
STA VAR_PP+4
LDA #<CONST_23R
LDY #>CONST_23R
JSR REALFACPUSH
JSR COMPACT16
LDA #<FORLOOP3
STA JUMP_TARGET
LDA #>FORLOOP3
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP3:
LDA #<VAR_PP
LDY #>VAR_PP
JSR COMPACT211
JSR PUSHREAL
LDY VAR_RD%
LDA VAR_RD%+1
JSR COMPACT212
JSR FASTFADDARG
JSR FACXREG
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
JSR ARRAYACCESS_INTEGER_SNX
LDY VAR_T%
LDA VAR_T%+1
STY TMP_ZP
STA TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
JSR ICMP
BEQ EQ_EQ12
LDA #0
JMP EQ_SKIP12
EQ_EQ12:
LDA #$1
EQ_SKIP12:
COMP_SKP15:
BNE LINE_NSKIP234
JMP LINE_SKIP234
LINE_NSKIP234:
LDA #<VAR_PP
LDY #>VAR_PP
JSR COMPACT211
JSR PUSHREAL
LDY VAR_RD%
LDA VAR_RD%+1
JSR COMPACT212
JSR FASTFADDARG
JSR FACXREG
JSR COMPACT174
LINE_SKIP234:
LINE_40950:
LDA #<VAR_PP
LDY #>VAR_PP
STA A_REG
STY A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_3
JMP (JUMP_TARGET)
RBEQ_3:
LDY #1
LDA #0
STY VAR_RT%
STA VAR_RT%+1
JMP RETURN
LINE_41000:
LINE_41005:
JSR COMPACT213
JSR LEN
JSR COMPACT159
LDY TMP2_ZP
LDA #0
JSR ICMP
BEQ LT_LT_EQ13
ROL
BCC LT_LT13
LT_LT_EQ13:
LDA #0
JMP LT_SKIP13
LT_LT13:
LDA #$1
LT_SKIP13:
COMP_SKP17:
BEQ LINE_SKIP235
LINE_NSKIP235:
JMP RETURN
LINE_SKIP235:
LINE_41010:
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT64
JSR COMPACT67
JSR COMPACT63
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LINE_41020:
LDA VAR_A$
LDY VAR_A$+1
JSR COMPACT152
JSR COMPACT66
BEQ LT_LT_EQ14
ROL
BCC LT_LT14
LT_LT_EQ14:
LDA #0
JMP LT_SKIP14
LT_LT14:
LDA #$1
LT_SKIP14:
COMP_SKP18:
BEQ LINE_SKIP236
LINE_NSKIP236:
JMP LINE_41100
LINE_SKIP236:
LINE_41025:
JSR COMPACTMAX
LDA #<CONST_4R
LDY #>CONST_4R
JSR COPY2_XYA_CREG
JSR COMPACT68
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LINE_41030:
JSR GOSUB
JSR LINE_41200
LDA #<CONST_25
LDY #>CONST_25
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
LDA #<CONST_26
LDY #>CONST_26
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
JSR COMPACT214
COMP_SKP19:
BEQ LINE_SKIP237
LINE_NSKIP237:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP237:
LINE_41040:
LDA #<CONST_28
LDY #>CONST_28
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_29
LDY #>CONST_29
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT72
COMP_SKP20:
BEQ LINE_SKIP238
LINE_NSKIP238:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP238:
LINE_41060:
LDA #<CONST_30
LDY #>CONST_30
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_31
LDY #>CONST_31
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT72
COMP_SKP21:
BEQ LINE_SKIP239
LINE_NSKIP239:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP239:
LINE_41070:
LDA #<CONST_32
LDY #>CONST_32
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_33
LDY #>CONST_33
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT72
COMP_SKP22:
BEQ LINE_SKIP240
LINE_NSKIP240:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP240:
LINE_41090:
JMP RETURN
LINE_41100:
LDA #<CONST_34
LDY #>CONST_34
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_35
LDY #>CONST_35
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_36
LDY #>CONST_36
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT75
JSR COMPACT76
JSR COMPACT17
JSR COMPACT71
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
JSR COMPACT73
COMP_SKP23:
BEQ LINE_SKIP241
LINE_NSKIP241:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP241:
LINE_41110:
LDA #<CONST_38
LDY #>CONST_38
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_39
LDY #>CONST_39
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT75
LDA #<CONST_40
LDY #>CONST_40
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT75
LDA #<CONST_41
LDY #>CONST_41
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT71
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
JSR COMPACT73
COMP_SKP24:
BEQ LINE_SKIP242
LINE_NSKIP242:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP242:
LINE_41120:
LDA #<CONST_42
LDY #>CONST_42
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
JSR COMPACT77
JSR COMPACT17
JSR COMPACT75
LDA #<CONST_44
LDY #>CONST_44
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT75
LDA #<CONST_45
LDY #>CONST_45
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT71
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
JSR COMPACT73
COMP_SKP25:
BEQ LINE_SKIP243
LINE_NSKIP243:
JSR COMPACTMAX
JSR COMPACT63
LDA #<CONST_27
LDY #>CONST_27
JSR COMPACT19
JSR COMPACT74
JMP RETURN
LINE_SKIP243:
LINE_41130:
JMP RETURN
LINE_41200:
LINE_41210:
LDA #<CONST_46
LDY #>CONST_46
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP26:
BEQ LINE_SKIP244
LINE_NSKIP244:
LDA #<CONST_47
LDY #>CONST_47
JSR COMPACT13
LINE_SKIP244:
LINE_41220:
LDA #<CONST_48
LDY #>CONST_48
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_49
LDY #>CONST_49
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT72
COMP_SKP27:
BEQ LINE_SKIP245
LINE_NSKIP245:
LDA #<CONST_50
LDY #>CONST_50
JSR COMPACT13
LINE_SKIP245:
LINE_41230:
JMP RETURN
LINE_41300:
LINE_41310:
JSR COMPACT23
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT30
LDA #<FORLOOP4
STA JUMP_TARGET
LDA #>FORLOOP4
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP4:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT59
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_P%
STA VAR_P%+1
LDY #0
TYA
STY VAR_FF%
STA VAR_FF%+1
LINE_41320:
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P%
LDA VAR_P%+1
JSR ICMP
EQ_EQ15:
EQ_SKIP15:
COMP_SKP28:
BNE LINE_SKIP246
LINE_NSKIP246:
JMP LINE_41360
LINE_SKIP246:
LINE_41325:
JSR COMPACT22
EQ_EQ16:
EQ_SKIP16:
COMP_SKP29:
BNE LINE_SKIP247
LINE_NSKIP247:
JMP LINE_41350
LINE_SKIP247:
LINE_41330:
LDA #0
STA VAR_II
STA VAR_II+1
STA VAR_II+2
STA VAR_II+3
STA VAR_II+4
JSR COMPACT24
LDA #<VAR_II
LDY #>VAR_II
STA A_REG
STY A_REG+1
LDA #<FORLOOP5
STA JUMP_TARGET
LDA #>FORLOOP5
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP5:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT35
LDY VAR_P%
LDA VAR_P%+1
JSR COMPACT57
EQ_EQ17:
EQ_SKIP17:
COMP_SKP30:
BNE LINE_SKIP248
LINE_NSKIP248:
JSR COMPACT215
LDY VAR_IC%
LDA VAR_IC%+1
JSR COMPACT185
LINE_SKIP248:
LINE_41340:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_4
JMP (JUMP_TARGET)
RBEQ_4:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ18:
EQ_SKIP18:
COMP_SKP32:
BNE LINE_SKIP249
LINE_NSKIP249:
JMP LINE_41360
LINE_SKIP249:
LINE_41350:
LDY VAR_TC%
LDA VAR_TC%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
LDY VAR_P%
LDA VAR_P%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INT_INTEGER
LDY VAR_TC%
LDA VAR_TC%+1
JSR SUPERFIINX
STY VAR_TC%
STA VAR_TC%+1
LINE_41360:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_5
JMP (JUMP_TARGET)
RBEQ_5:
JMP RETURN
LINE_41400:
LINE_41410:
JSR COMPACT43
LDY #0
TYA
STY VAR_C%
STA VAR_C%+1
JSR COMPACT216
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT26
LDA #<VAR_P
LDY #>VAR_P
STA A_REG
STY A_REG+1
LDA #<FORLOOP6
STA JUMP_TARGET
LDA #>FORLOOP6
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP6:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT55
JSR COMPACT6
EQ_EQ19:
EQ_SKIP19:
COMP_SKP34:
BNE LINE_SKIP250
LINE_NSKIP250:
LDY VAR_C%
LDA VAR_C%+1
JSR SUPERFIINX
STY VAR_C%
STA VAR_C%+1
LINE_SKIP250:
LINE_41415:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_6
JMP (JUMP_TARGET)
RBEQ_6:
LINE_41420:
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
BEQ LT_LT_EQ20
ROL
BCC LT_LT20
LT_LT_EQ20:
LDA #0
JMP LT_SKIP20
LT_LT20:
LDA #$1
LT_SKIP20:
COMP_SKP36:
BEQ LINE_SKIP251
LINE_NSKIP251:
LDA #<CONST_51
LDY #>CONST_51
JSR STROUTBRKWL
LDY #2
LDA #0
STY VAR_RT%
STA VAR_RT%+1
JMP RETURN
LINE_SKIP251:
LINE_41430:
JSR COMPACT84
JSR COMPACT26
JSR COMPACT85
LDA #<FORLOOP7
STA JUMP_TARGET
LDA #>FORLOOP7
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP7:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT55
JSR COMPACT6
BEQ EQ_EQ21
LDA #0
JMP EQ_SKIP21
EQ_EQ21:
LDA #$1
EQ_SKIP21:
COMP_SKP37:
BNE LINE_NSKIP252
JMP LINE_SKIP252
LINE_NSKIP252:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT52
JSR COMPACT45
JSR COMPACT60
JSR ARRAYSTORE_INT_INTEGER
LDX #4
dcloop457_1:
LDA CONST_52R,X
STA VAR_P,X
DEX
BPL dcloop457_1
LINE_SKIP252:
LINE_41440:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_7
JMP (JUMP_TARGET)
RBEQ_7:
JSR COMPACT83
JSR COMPACT24
JSR COMPACT85
LDA #<FORLOOP8
STA JUMP_TARGET
LDA #>FORLOOP8
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP8:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_C%
STA VAR_C%+1
LINE_41450:
JSR COMPACT56
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ22:
NEQ_SKIP22:
COMP_SKP39:
BEQ LINE_SKIP253
LINE_NSKIP253:
JMP LINE_41500
LINE_SKIP253:
LINE_41460:
LDY VAR_IC%
LDA VAR_IC%+1
JSR FIDEX
JSR COPY_XREG2YREG
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT217
JSR CMPFAC
EQ_EQ23:
EQ_SKIP23:
COMP_SKP40:
BNE LINE_SKIP254
LINE_NSKIP254:
LDY VAR_IC%
LDA VAR_IC%+1
JSR SUPERFIDEX
STY VAR_IC%
STA VAR_IC%+1
LDX #4
dcloop586_1:
LDA CONST_53R,X
STA VAR_P,X
DEX
BPL dcloop586_1
JMP LINE_41500
LINE_SKIP254:
LINE_41470:
LDX #4
dcloop586_2:
LDA VAR_P,X
STA VAR_PP,X
DEX
BPL dcloop586_2
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_YREG
LDY VAR_IC%
LDA VAR_IC%+1
JSR COMPACT218
JSR FASTFSUBMEM
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT61
LDA #<FORLOOP9
STA JUMP_TARGET
LDA #>FORLOOP9
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP9:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFACPUSH
JSR ONETOFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR FACXREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFACPUSH
JSR ONETOFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR FACXREG
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LINE_41480:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_8
JMP (JUMP_TARGET)
RBEQ_8:
LDY VAR_IC%
LDA VAR_IC%+1
JSR SUPERFIDEX
STY VAR_IC%
STA VAR_IC%+1
LDX #4
dcloop586_3:
LDA CONST_53R,X
STA VAR_PP,X
DEX
BPL dcloop586_3
LINE_41500:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_9
JMP (JUMP_TARGET)
RBEQ_9:
LINE_41510:
LDY VAR_T%
LDA VAR_T%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
LDY #1
LDA #0
JSR COMPACT47
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_54
LDY #>CONST_54
JSR STROUTBRKWL
JSR COMPACT62
JMP RETURN
LINE_42000:
LINE_42005:
LDY VAR_XO%
LDA VAR_XO%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_OC%
LDA VAR_OC%+1
JSR ICMP
ROL
BCS GT_GT24
LDA #0
JMP GT_SKIP24
GT_GT24:
LDA #$1
GT_SKIP24:
COMP_SKP43:
BEQ LINE_SKIP255
LINE_NSKIP255:
JMP LINE_42420
LINE_SKIP255:
LINE_42010:
JSR COMPACT23
LDA #<CONST_16R
LDY #>CONST_16R
JSR COMPACT30
LDA #<FORLOOP10
STA JUMP_TARGET
LDA #>FORLOOP10
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP10:
LINE_42015:
JSR GOSUB
JSR LINE_45200
LINE_42020:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT106
JSR COMPACT53
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
JSR COMPACT68
JSR VAL
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
JSR GOSUB
JSR LINE_61700
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_10
JMP (JUMP_TARGET)
RBEQ_10:
LINE_42040:
JSR COMPACT23
LDY VAR_OX%
LDA VAR_OX%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP11
STA JUMP_TARGET
LDA #>FORLOOP11
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP11:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT106
JSR COMPACT50
JSR COMPACT99
JSR NEXT
LDA A_REG
BNE RBEQ_11
JMP (JUMP_TARGET)
RBEQ_11:
JSR COMPACT80
LINE_42050:
JSR COMPACT134
JSR GOSUB
JSR LINE_61000
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT219
JSR PUSHREAL
LDY VAR_OC%
LDA VAR_OC%+1
JSR COMPACT50
JSR PUSHREAL
JSR COMPACT135
JSR POPREALXREG
JSR COMPACT108
JSR ARRAYSTORE_STRING
JSR GOSUB
JSR LINE_61700
JSR ONETOFAC
LDA #<VAR_II
LDY #>VAR_II
JSR FASTFADDMEM
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LINE_42055:
LDY VAR_OX%
LDA VAR_OX%+1
JSR FIINX
JSR COPY_XREG2YREG
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT90
ROL
BCS GT_GT25
LDA #0
JMP GT_SKIP25
GT_GT25:
LDA #$1
GT_SKIP25:
COMP_SKP46:
BEQ LINE_SKIP256
LINE_NSKIP256:
JMP LINE_42420
LINE_SKIP256:
LINE_42060:
LDA #<CONST_55
LDY #>CONST_55
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP47:
BEQ LINE_SKIP257
LINE_NSKIP257:
LDY VAR_OC%
LDA VAR_OC%+1
JSR SUPERFIINX
STY VAR_OC%
STA VAR_OC%+1
JMP RETURN
LINE_SKIP257:
LINE_42070:
JMP LINE_42050
LINE_42200:
LINE_42210:
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT184
LDA #<CONST_56R
LDY #>CONST_56R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT180
JSR GOSUB
JSR LINE_42900
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
EQ_EQ26:
EQ_SKIP26:
COMP_SKP48:
BNE LINE_SKIP258
LINE_NSKIP258:
JMP RETURN
LINE_SKIP258:
LINE_42220:
LDA #<CONST_57R
LDY #>CONST_57R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_UQ%
STA VAR_UQ%+1
JSR COMPACT40
LDY VAR_UQ%
LDA VAR_UQ%+1
JSR ICMP
NEQ_NEQ27:
NEQ_SKIP27:
COMP_SKP49:
BEQ LINE_SKIP259
LINE_NSKIP259:
JMP LINE_42270
LINE_SKIP259:
LINE_42230:
JSR GOSUB
JSR LINE_43000
JSR COMPACT41
EQ_EQ28:
EQ_SKIP28:
COMP_SKP50:
BNE LINE_SKIP260
LINE_NSKIP260:
JMP RETURN
LINE_SKIP260:
LINE_42270:
JSR COMPACT23
LDY VAR_OX%
LDA VAR_OX%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP12
STA JUMP_TARGET
LDA #>FORLOOP12
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP12:
JSR COMPACT96
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OP$[]
LDY #>VAR_OP$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JSR COMPACT69
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ29:
EQ_SKIP29:
COMP_SKP51:
BNE LINE_SKIP261
LINE_NSKIP261:
LDY VAR_OX%
LDA VAR_OX%+1
JSR INTFAC
LDX #<VAR_I
LDY #>VAR_I
JSR FACMEM
JMP LINE_42290
LINE_SKIP261:
LINE_42280:
JSR GOSUB
JSR LINE_59100
LINE_42290:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_12
JMP (JUMP_TARGET)
RBEQ_12:
JSR COMPACT23
LDA #<CONST_16R
LDY #>CONST_16R
JSR COMPACT30
LDA #<FORLOOP13
STA JUMP_TARGET
LDA #>FORLOOP13
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP13:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR COMPACT96
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_AC%[]
LDY #>VAR_AC%[]
JSR COMPACT133
JSR NEXT
LDA A_REG
BNE RBEQ_13
JMP (JUMP_TARGET)
RBEQ_13:
LINE_42300:
JSR GOSUB
JSR LINE_43400
LINE_42330:
JMP RETURN
LINE_42400:
LINE_42410:
LDA #<CONST_58R
LDY #>CONST_58R
JSR REALFAC
LDA #<VAR_I
LDY #>VAR_I
JSR CMPFAC
BEQ GTEQ_GTEQ30
BCS GTEQ_GTEQ30
LDA #0
JMP GTEQ_SKIP30
GTEQ_GTEQ30:
LDA #$1
GTEQ_SKIP30:
COMP_SKP54:
BEQ LINE_SKIP262
LINE_NSKIP262:
JMP RETURN
LINE_SKIP262:
LINE_42420:
LDA #<CONST_59
LDY #>CONST_59
JSR STROUTBRKWL
JMP LINE_49100
LINE_42500:
LINE_42510:
JSR COMPACT23
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT30
LDA #<FORLOOP14
STA JUMP_TARGET
LDA #>FORLOOP14
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP14:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT55
JSR COMPACT6
BEQ EQ_EQ31
LDA #0
JMP EQ_SKIP31
EQ_EQ31:
LDA #$1
EQ_SKIP31:
COMP_SKP55:
BNE LINE_NSKIP263
JMP LINE_SKIP263
LINE_NSKIP263:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT52
JSR COMPACT112
JSR COMPACT60
JSR ARRAYSTORE_INT_INTEGER
LDX #4
dcloop715_1:
LDA CONST_53R,X
STA VAR_I,X
DEX
BPL dcloop715_1
LINE_SKIP263:
LINE_42520:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_14
JMP (JUMP_TARGET)
RBEQ_14:
JSR GOSUB
JSR LINE_42400
LINE_42530:
JSR GOSUB
JSR LINE_62600
JSR COMPACT62
JMP RETURN
LINE_42600:
LINE_42605:
LDY #10
STY 646
JSR COMPACT36
LDY VAR_C%
LDA VAR_C%+1
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_60
LDY #>CONST_60
JSR STROUTBRKWL
LINE_42610:
JSR GOSUB
JSR LINE_42650
LINE_42615:
JSR COMPACT111
LDY #5
LDA #0
JSR COMPACT5
NEQ_NEQ32:
NEQ_SKIP32:
COMP_SKP57:
BEQ LINE_SKIP264
LINE_NSKIP264:
JSR COMPACT62
JMP RETURN
LINE_SKIP264:
LINE_42620:
JSR GOSUB
JSR LINE_62600
JSR COMPACT62
JMP RETURN
LINE_42650:
LINE_42660:
LDY VAR_IC%
LDA VAR_IC%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT46
LDY VAR_IC%
LDA VAR_IC%+1
JSR SUPERFIINX
STY VAR_IC%
STA VAR_IC%+1
LDY VAR_C%
LDA VAR_C%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
JSR COMPACT178
JSR COMPACT210
JSR ARRAYSTORE_INT_INTEGER
JMP RETURN
LINE_42700:
LINE_42710:
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT184
LDA #<CONST_63R
LDY #>CONST_63R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT180
JSR GOSUB
JSR LINE_42900
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
EQ_EQ33:
EQ_SKIP33:
COMP_SKP58:
BNE LINE_SKIP265
LINE_NSKIP265:
JMP RETURN
LINE_SKIP265:
LINE_42730:
JSR COMPACT43
LDA #<CONST_64R
LDY #>CONST_64R
JSR REALFACPUSH
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_UQ%
STA VAR_UQ%+1
JSR COMPACT40
LDY VAR_UQ%
LDA VAR_UQ%+1
JSR ICMP
NEQ_NEQ34:
NEQ_SKIP34:
COMP_SKP59:
BEQ LINE_SKIP266
LINE_NSKIP266:
JMP LINE_42780
LINE_SKIP266:
LINE_42740:
JSR GOSUB
JSR LINE_43000
JSR COMPACT41
EQ_EQ35:
EQ_SKIP35:
COMP_SKP60:
BNE LINE_SKIP267
LINE_NSKIP267:
JMP RETURN
LINE_SKIP267:
LINE_42780:
JSR COMPACT23
LDA #<CONST_61R
LDY #>CONST_61R
JSR COMPACT30
LDA #<FORLOOP15
STA JUMP_TARGET
LDA #>FORLOOP15
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP15:
JSR COMPACT95
LDA #<CONST_62R
LDY #>CONST_62R
JSR COMPACT49
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OG$[]
LDY #>VAR_OG$[]
JSR COMPACT109
JSR COMPACT13
JSR COMPACT69
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ36:
EQ_SKIP36:
COMP_SKP61:
BNE LINE_SKIP268
LINE_NSKIP268:
LDX #4
dcloop844_1:
LDA CONST_61R,X
STA VAR_I,X
DEX
BPL dcloop844_1
JMP LINE_42800
LINE_SKIP268:
LINE_42790:
JSR GOSUB
JSR LINE_59100
LINE_42800:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_15
JMP (JUMP_TARGET)
RBEQ_15:
JSR COMPACT23
LDA #<CONST_16R
LDY #>CONST_16R
JSR COMPACT30
LDA #<FORLOOP16
STA JUMP_TARGET
LDA #>FORLOOP16
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP16:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR COMPACT95
LDA #<CONST_62R
LDY #>CONST_62R
JSR COMPACT49
LDY VAR_T2%
LDA VAR_T2%+1
JSR COMPACT53
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_AC%[]
LDY #>VAR_AC%[]
JSR COMPACT133
JSR NEXT
LDA A_REG
BNE RBEQ_16
JMP (JUMP_TARGET)
RBEQ_16:
LINE_42810:
JSR GOSUB
JSR LINE_43400
LINE_42830:
JMP RETURN
LINE_42900:
LINE_42910:
JSR COMPACT43
JSR COMPACT2
LDY #1
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_C%
STA VAR_C%+1
JSR COMPACT2
LDY #2
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_C2%
STA VAR_C2%+1
LINE_42920:
LDX #4
dcneloop3228_2:
LDA CONST_7,X
CMP VAR_PP,X
BNE LINE_NSKIP269
DEX
BPL dcneloop3228_2
JMP LINE_SKIP269
LINE_NSKIP269:
JMP LINE_42950
LINE_SKIP269:
LINE_42930:
LDY VAR_C%
LDA VAR_C%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT89
BEQ EQ_EQ38
LDA #0
JMP EQ_SKIP38
EQ_EQ38:
LDA #$1
EQ_SKIP38:
COMP_SKP65:
BNE LINE_NSKIP270
JMP LINE_SKIP270
LINE_NSKIP270:
JSR COMPACT79
LDY VAR_C2%
LDA VAR_C2%+1
JSR ICMP
EQ_EQ39:
EQ_SKIP39:
COMP_SKP66:
BNE LINE_SKIP271
LINE_NSKIP271:
JSR GOSUB
JSR LINE_43500
LINE_SKIP271:
LINE_SKIP270:
LINE_42940:
JMP RETURN
LINE_42950:
JSR COMPACT114
LDA #<VAR_PP
LDY #>VAR_PP
JSR COMPACT90
BEQ EQ_EQ40
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP40
EQ_EQ40:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP40:
JSR REALFACPUSH
LDY VAR_C2%
LDA VAR_C2%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT89
BEQ EQ_EQ41
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP41
EQ_EQ41:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP41:
JSR COMPACT115
JSR PUSHREAL
LDY VAR_C2%
LDA VAR_C2%+1
JSR INTFAC
JSR FACYREG
LDA #<VAR_PP
LDY #>VAR_PP
JSR COMPACT90
BEQ EQ_EQ42
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP42
EQ_EQ42:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP42:
JSR REALFACPUSH
JSR COMPACT114
JSR COMPACT89
BEQ EQ_EQ43
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP43
EQ_EQ43:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP43:
JSR REALFAC
JSR FACXREG
JSR POPREAL2X
JSR FASTAND
JSR FACXREG
JSR COMPACT73
COMP_SKP67:
BEQ LINE_SKIP272
LINE_NSKIP272:
JSR GOSUB
JSR LINE_43500
LINE_SKIP272:
LINE_42960:
JMP RETURN
LINE_43000:
LINE_43010:
JSR COMPACT43
JSR GOSUB
JSR LINE_43100
JSR COMPACT21
LDY VAR_OD%
LDA VAR_OD%+1
JSR ICMP
EQ_EQ44:
EQ_SKIP44:
COMP_SKP68:
BNE LINE_SKIP273
LINE_NSKIP273:
JMP LINE_43050
LINE_SKIP273:
LINE_43030:
JSR COMPACT23
LDY VAR_OD%
LDA VAR_OD%+1
JSR COMPACT28
LDA #<FORLOOP17
STA JUMP_TARGET
LDA #>FORLOOP17
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP17:
LDA VAR_TF$
LDY VAR_TF$+1
JSR COMPACT223
JSR COPY2_XYA_XREG
LDA #<VAR_OD$[]
LDY #>VAR_OD$[]
JSR COMPACT160
JSR SEQ
LDA X_REG
COMP_SKP69:
BEQ LINE_SKIP274
LINE_NSKIP274:
LDX #4
dcloop844_2:
LDA CONST_4R,X
STA VAR_ER,X
DEX
BPL dcloop844_2
JSR COMPACT62
JMP RETURN
LINE_SKIP274:
LINE_43040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_17
JMP (JUMP_TARGET)
RBEQ_17:
LINE_43050:
JSR GOSUB
JSR LINE_43150
JMP RETURN
LINE_43100:
LINE_43110:
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT110
LDY VAR_C2%
LDA VAR_C2%+1
JSR INTFAC
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDA #<VAR_I
LDY #>VAR_I
JSR CMPFAC
ROL
BCS GT_GT45
LDA #0
JMP GT_SKIP45
GT_GT45:
LDA #$1
GT_SKIP45:
COMP_SKP71:
BEQ LINE_SKIP275
LINE_NSKIP275:
LDX #4
dcloop973_1:
LDA VAR_I,X
STA VAR_P,X
DEX
BPL dcloop973_1
LDY VAR_C2%
LDA VAR_C2%+1
JSR COMPACT110
LINE_SKIP275:
LINE_43120:
JSR COMPACTMAX
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
JSR STR
LDA A_REG
LDY A_REG+1
JSR COMPACT116
JSR COPY2_XYA_YREG
JSR STR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_65
LDY #>CONST_65
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDY VAR_T%
LDA VAR_T%+1
JSR INTFAC
JSR FACYREG
JSR STR
JSR POPINT2B
JSR CONCAT
JSR POPINT2B
JSR CONCAT
LDA #<CONST_65
LDY #>CONST_65
STA B_REG
STY B_REG+1
JSR CONCAT
JSR POPINT2B
JSR CONCAT
JSR COMPACT120
LDA #<VAR_TF$
LDY #>VAR_TF$
JSR COPYSTRING
LINE_43125:
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR LEN
JSR COMPACT67
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR RIGHT
JSR COMPACT120
LDA #<VAR_TF$
LDY #>VAR_TF$
JSR COPYSTRING
JMP RETURN
LINE_43150:
LINE_43160:
LDY VAR_OD%
LDA VAR_OD%+1
JSR INTFAC
JSR PUSHREAL
LDA VAR_TF$
LDY VAR_TF$+1
STA A_REG
STY A_REG+1
JSR POPREALXREG
JSR COMPACT118
JSR ARRAYSTORE_STRING
LDY VAR_OD%
LDA VAR_OD%+1
JSR SUPERFIINX
STY VAR_OD%
STA VAR_OD%+1
LDY VAR_MX%
LDA VAR_MX%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_OD%
LDA VAR_OD%+1
JSR ICMP
ROL
BCS GT_GT46
LDA #0
JMP GT_SKIP46
GT_GT46:
LDA #$1
GT_SKIP46:
COMP_SKP72:
BEQ LINE_SKIP276
LINE_NSKIP276:
JMP LINE_42420
LINE_SKIP276:
LINE_43165:
LDA #<CONST_16R
LDY #>CONST_16R
JSR COPY2_XYA_YREG
LDY VAR_PO%
LDA VAR_PO%+1
JSR COMPACT91
JSR FASTFADDMEM
JSR FACINT
STY VAR_PO%
STA VAR_PO%+1
JSR GOSUB
JSR LINE_63000
LDY #3
STY 646
LINE_43170:
JMP RETURN
LINE_43200:
LINE_43210:
JSR COMPACT22
EQ_EQ47:
EQ_SKIP47:
COMP_SKP73:
BNE LINE_SKIP277
LINE_NSKIP277:
JMP RETURN
LINE_SKIP277:
LINE_43220:
JSR COMPACT80
JSR COMPACT24
JSR COMPACT81
LDA #<FORLOOP18
STA JUMP_TARGET
LDA #>FORLOOP18
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP18:
LINE_43230:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT35
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT57
BEQ EQ_EQ48
LDA #0
JMP EQ_SKIP48
EQ_EQ48:
LDA #$1
EQ_SKIP48:
COMP_SKP74:
BNE LINE_NSKIP278
JMP LINE_SKIP278
LINE_NSKIP278:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT33
BEQ EQ_EQ49
LDA #0
JMP EQ_SKIP49
EQ_EQ49:
LDA #$1
EQ_SKIP49:
COMP_SKP75:
BNE LINE_NSKIP279
JMP LINE_SKIP279
LINE_NSKIP279:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_YREG
LDA #<Y_REG
LDY #>Y_REG
STY TMP3_ZP+1
LDX #<X_REG
LDY #>X_REG
JSR COPY2_XYA
LDY #1
LDA #0
STY AS_TMP
STA AS_TMP+1
JSR COMPACT94
JSR ARRAYSTORE_INT_INTEGER
JMP RETURN
LINE_SKIP279:
LINE_SKIP278:
LINE_43240:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_18
JMP (JUMP_TARGET)
RBEQ_18:
JMP RETURN
LINE_43400:
LINE_43410:
JSR COMPACT111
LDY #9
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_RR%
STA VAR_RR%+1
JSR COMPACT21
LDY VAR_RR%
LDA VAR_RR%+1
JSR ICMP
NEQ_NEQ50:
NEQ_SKIP50:
COMP_SKP77:
BEQ LINE_SKIP280
LINE_NSKIP280:
JSR GOSUB
JSR LINE_43800
LINE_SKIP280:
LINE_43420:
LINE_43430:
JSR COMPACT111
LDY #3
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ51:
NEQ_SKIP51:
COMP_SKP78:
BEQ LINE_SKIP281
LINE_NSKIP281:
JSR GOSUB
JSR LINE_43200
LINE_SKIP281:
LINE_43435:
JSR COMPACT111
LDY #4
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ52:
NEQ_SKIP52:
COMP_SKP79:
BEQ LINE_SKIP282
LINE_NSKIP282:
JSR GOSUB
JSR LINE_43900
LINE_SKIP282:
LINE_43440:
JSR COMPACT111
LDY #5
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ53:
NEQ_SKIP53:
COMP_SKP80:
BEQ LINE_SKIP283
LINE_NSKIP283:
JSR GOSUB
JSR LINE_42500
LINE_SKIP283:
LINE_43450:
JSR COMPACT111
LDY #6
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ54:
NEQ_SKIP54:
COMP_SKP81:
BEQ LINE_SKIP284
LINE_NSKIP284:
JSR GOSUB
JSR LINE_42600
LINE_SKIP284:
LINE_43455:
JSR COMPACT111
LDY #7
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ55:
NEQ_SKIP55:
COMP_SKP82:
BEQ LINE_SKIP285
LINE_NSKIP285:
JSR GOSUB
JSR LINE_44000
LINE_SKIP285:
LINE_43460:
JSR COMPACT111
LDY #10
JSR COMPACT113
JSR COMPACT79
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
NEQ_NEQ56:
NEQ_SKIP56:
COMP_SKP83:
BEQ LINE_SKIP286
LINE_NSKIP286:
JSR GOSUB
JSR LINE_44200
LINE_SKIP286:
LINE_43490:
JSR COMPACT62
JMP RETURN
LINE_43500:
LINE_43510:
LDX #4
dceloop3227_2:
LDA CONST_7,X
CMP VAR_PP,X
BNE LINE_SKIP287
DEX
BPL dceloop3227_2
LINE_NSKIP287:
JMP LINE_43530
LINE_SKIP287:
LINE_43520:
LDY VAR_C2%
LDA VAR_C2%+1
STY VAR_RR%
STA VAR_RR%+1
JSR GOSUB
JSR LINE_43600
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
EQ_EQ58:
EQ_SKIP58:
COMP_SKP85:
BNE LINE_SKIP288
LINE_NSKIP288:
JMP RETURN
LINE_SKIP288:
LINE_43530:
LDY VAR_C%
LDA VAR_C%+1
STY VAR_RR%
STA VAR_RR%+1
JSR GOSUB
JSR LINE_43600
JMP RETURN
LINE_43600:
LINE_43610:
JSR COMPACT43
JSR COMPACT22
EQ_EQ59:
EQ_SKIP59:
COMP_SKP86:
BNE LINE_SKIP289
LINE_NSKIP289:
JMP LINE_43670
LINE_SKIP289:
LINE_43620:
JSR COMPACT27
LDA #<FORLOOP19
STA JUMP_TARGET
LDA #>FORLOOP19
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP19:
LINE_43630:
JSR COMPACT205
JSR ARRAYACCESS_INTEGER_S
LDY VAR_RR%
LDA VAR_RR%+1
JSR COMPACT57
BEQ EQ_EQ60
LDA #0
JMP EQ_SKIP60
EQ_EQ60:
LDA #$1
EQ_SKIP60:
COMP_SKP87:
BNE LINE_NSKIP290
JMP LINE_SKIP290
LINE_NSKIP290:
JSR COMPACT32
BEQ EQ_EQ61
LDA #0
JMP EQ_SKIP61
EQ_EQ61:
LDA #$1
EQ_SKIP61:
COMP_SKP88:
BEQ LINE_SKIP291
LINE_NSKIP291:
JSR COMPACT146
JSR FACINT
STY VAR_RT%
STA VAR_RT%+1
JMP RETURN
LINE_SKIP291:
LINE_SKIP290:
LINE_43640:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_19
JMP (JUMP_TARGET)
RBEQ_19:
LINE_43670:
JSR COMPACT21
LDY VAR_TC%
LDA VAR_TC%+1
JSR ICMP
EQ_EQ62:
EQ_SKIP62:
COMP_SKP90:
BNE LINE_SKIP292
LINE_NSKIP292:
JMP LINE_43710
LINE_SKIP292:
LINE_43680:
JSR COMPACT23
LDY VAR_TC%
LDA VAR_TC%+1
JSR COMPACT28
LDA #<FORLOOP20
STA JUMP_TARGET
LDA #>FORLOOP20
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP20:
LINE_43690:
JSR COMPACT39
JSR ARRAYACCESS_INTEGER_S
LDY VAR_RR%
LDA VAR_RR%+1
JSR COMPACT57
BEQ EQ_EQ63
LDA #0
JMP EQ_SKIP63
EQ_EQ63:
LDA #$1
EQ_SKIP63:
COMP_SKP91:
BNE LINE_NSKIP293
JMP LINE_SKIP293
LINE_NSKIP293:
JSR COMPACT44
LDY VAR_RR%
LDA VAR_RR%+1
JSR ARRAYACCESS_INTEGER_INT
LDA X_REG
BEQ EQ_EQ64
LDA #0
JMP EQ_SKIP64
EQ_EQ64:
LDA #$1
EQ_SKIP64:
COMP_SKP92:
BEQ LINE_SKIP294
LINE_NSKIP294:
JSR COMPACT146
JSR FACINT
STY VAR_RT%
STA VAR_RT%+1
JMP RETURN
LINE_SKIP294:
LINE_SKIP293:
LINE_43700:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_20
JMP (JUMP_TARGET)
RBEQ_20:
LINE_43710:
JSR GOSUB
JSR LINE_53450
JMP RETURN
LINE_43800:
LINE_43810:
LDY VAR_C%
LDA VAR_C%+1
STY VAR_RR%
STA VAR_RR%+1
JSR GOSUB
JSR LINE_43200
LDY VAR_C2%
LDA VAR_C2%+1
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_43200
LDY VAR_RR%
LDA VAR_RR%+1
STY VAR_C%
STA VAR_C%+1
JMP RETURN
LINE_43900:
LINE_43910:
JSR GOSUB
JSR LINE_42650
LINE_43920:
JSR GOSUB
JSR LINE_43200
LINE_43930:
JMP RETURN
LINE_44000:
LINE_44010:
JSR COMPACT23
LDA #<CONST_4R
LDY #>CONST_4R
JSR COMPACT30
LDA #<FORLOOP21
STA JUMP_TARGET
LDA #>FORLOOP21
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP21:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT52
LDA #<VAR_LX$[]
LDY #>VAR_LX$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR COMPACT224
JSR LEN
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
ROL
BCS GT_GT65
LDA #0
JMP GT_SKIP65
GT_GT65:
LDA #$1
GT_SKIP65:
COMP_SKP94:
BEQ LINE_SKIP295
LINE_NSKIP295:
JMP LINE_44040
LINE_SKIP295:
LINE_44020:
LDA #<VAR_I
LDY #>VAR_I
JSR COMPACT58
JSR PUSHREAL
LDA #<VAR_DR$[]
LDY #>VAR_DR$[]
STA G_REG
STY G_REG+1
LDY VAR_C%
LDA VAR_C%+1
JSR ARRAYACCESS_STRING_INT
JSR POPREALXREG
JSR COMPACT121
JSR ARRAYSTORE_STRING
LINE_44030:
JSR GOSUB
JSR LINE_62500
LDX #4
dcloop1102_1:
LDA CONST_53R,X
STA VAR_I,X
DEX
BPL dcloop1102_1
LINE_44040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_21
JMP (JUMP_TARGET)
RBEQ_21:
JSR GOSUB
JSR LINE_42400
LINE_44060:
JMP RETURN
LINE_44200:
LINE_44210:
JSR COMPACTMAX
JSR COMPACT114
JSR STR
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT69
JSR COMPACT67
JSR COMPACT68
JSR RIGHT
JSR COMPACT122
LDA #<CONST_69
LDY #>CONST_69
STA A_REG
STY A_REG+1
JSR CONCAT
LDA #<CONST_70
LDY #>CONST_70
STA B_REG
STY B_REG+1
JSR CONCAT
LDA A_REG
LDY A_REG+1
JSR COMPACT0
LINE_44220:
JSR LINEBREAK
JSR GOSUB
JSR LINE_40100
JMP RETURN
LINE_45000:
LINE_45010:
LDY #10
STY 646
LDA #<CONST_71
LDY #>CONST_71
JSR STROUTBRKWL
JSR LINEBREAK
LINE_45020:
JSR COMPACT23
LDY VAR_TB%
LDA VAR_TB%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP22
STA JUMP_TARGET
LDA #>FORLOOP22
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP22:
JSR COMPACT12
JSR COMPACT80
LDA #<CONST_66R
LDY #>CONST_66R
JSR COMPACT26
JSR COMPACT81
LDA #<FORLOOP23
STA JUMP_TARGET
LDA #>FORLOOP23
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP23:
JSR COMPACT105
LDY #4
STY A_REG
JSR COMPACT97
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT54
LDA #<VAR_CM$[]
LDY #>VAR_CM$[]
JSR COMPACT109
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_B$
LDY #>VAR_B$
JSR COPYSTRING
LINE_45030:
JSR COMPACT225
JSR LEN
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ66:
EQ_SKIP66:
COMP_SKP96:
BNE LINE_SKIP296
LINE_NSKIP296:
LDX #4
dcloop1231_1:
LDA CONST_61R,X
STA VAR_II,X
DEX
BPL dcloop1231_1
JMP LINE_45060
LINE_SKIP296:
LINE_45040:
JSR COMPACT123
LDA #<VAR_II
LDY #>VAR_II
JSR CMPFAC
ROL
BCS GT_GT67
LDA #0
JMP GT_SKIP67
GT_GT67:
LDA #$1
GT_SKIP67:
COMP_SKP97:
BEQ LINE_SKIP297
LINE_NSKIP297:
JSR COMPACTMAX
JSR COMPACT127
JSR COMPACT18
JSR COMPACT13
LINE_SKIP297:
LINE_45050:
JSR COMPACTMAX
JSR COMPACT125
JSR COMPACT18
JSR COMPACT13
LINE_45060:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_22
JMP (JUMP_TARGET)
RBEQ_22:
JSR GOSUB
JSR LINE_59100
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_23
JMP (JUMP_TARGET)
RBEQ_23:
JMP RETURN
LINE_45100:
LINE_45110:
LDA #<CONST_6R
LDY #>CONST_6R
JSR COMPACT164
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT158
STY G_REG
STA G_REG+1
JSR COMPACT226
JSR COMPACT227
JSR OPEN
JMP RETURN
LINE_45200:
LINE_45210:
LDA #<CONST_73
LDY #>CONST_73
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP100:
BEQ LINE_SKIP298
LINE_NSKIP298:
LDA #<CONST_74
LDY #>CONST_74
JSR COMPACT13
LINE_SKIP298:
LINE_45220:
JMP RETURN
LINE_48000:
LINE_48010:
LDA #<CONST_75
LDY #>CONST_75
JSR STROUTWL
LINE_48015:
LDA #<CONST_76
LDY #>CONST_76
JSR COMPACT228
JSR COPYSTRING
JSR GOSUB
JSR LINE_45100
LDY #0
TYA
STY VAR_GC%
STA VAR_GC%+1
LINE_48020:
JSR COMPACT23
LDA #<CONST_16R
LDY #>CONST_16R
JSR COMPACT30
LDA #<FORLOOP24
STA JUMP_TARGET
LDA #>FORLOOP24
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP24:
LINE_48030:
JSR GOSUB
JSR LINE_61700
JSR GOSUB
JSR LINE_45200
LINE_48040:
JSR COMPACT95
LDA #<CONST_62R
LDY #>CONST_62R
JSR COMPACT49
LDY VAR_GC%
LDA VAR_GC%+1
JSR COMPACT53
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
JSR COMPACT68
JSR VAL
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_24
JMP (JUMP_TARGET)
RBEQ_24:
LINE_48050:
JSR COMPACT23
LDA #<CONST_61R
LDY #>CONST_61R
JSR COMPACT30
LDA #<FORLOOP25
STA JUMP_TARGET
LDA #>FORLOOP25
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP25:
JSR COMPACT95
LDA #<CONST_62R
LDY #>CONST_62R
JSR COMPACT49
LDY VAR_GC%
LDA VAR_GC%+1
JSR COMPACT50
JSR PUSHREAL
JSR COMPACT220
JSR POPREALXREG
LDA #<VAR_OG$[]
LDY #>VAR_OG$[]
JSR COMPACT100
JSR NEXT
LDA A_REG
BNE RBEQ_25
JMP (JUMP_TARGET)
RBEQ_25:
JSR COMPACT80
LINE_48060:
JSR GOSUB
JSR LINE_61700
JSR COMPACT222
LDA #<VAR_TX$
LDY #>VAR_TX$
JSR COPYSTRING
LDA #46
JSR SINGLECHROUTMAX
LINE_48070:
JSR COMPACT107
LDA VAR_TX$
LDY VAR_TX$+1
STA A_REG
STY A_REG+1
JSR SEQ
LDA X_REG
COMP_SKP103:
BEQ LINE_SKIP299
LINE_NSKIP299:
JMP LINE_48090
LINE_SKIP299:
LINE_48080:
JSR GOSUB
JSR LINE_61000
LDA #<VAR_II
LDY #>VAR_II
JSR REALFAC
JSR BASINT
JSR FACXREG
LDA #<CONST_62R
LDY #>CONST_62R
JSR COMPACT49
LDY VAR_GC%
LDA VAR_GC%+1
JSR COMPACT50
JSR PUSHREAL
JSR COMPACT135
JSR POPREALXREG
LDA #<VAR_OG$[]
LDY #>VAR_OG$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
JSR ONETOFAC
LDA #<VAR_II
LDY #>VAR_II
JSR FASTFADDMEM
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
JMP LINE_48060
LINE_48090:
LDY VAR_GC%
LDA VAR_GC%+1
JSR SUPERFIINX
STY VAR_GC%
STA VAR_GC%+1
LDA #<CONST_78R
LDY #>CONST_78R
JSR COPY2_XYA_YREG
JSR COMPACT172
JSR COMPACT90
NEQ_NEQ68:
NEQ_SKIP68:
COMP_SKP104:
BEQ LINE_SKIP300
LINE_NSKIP300:
JMP LINE_48020
LINE_SKIP300:
LINE_48100:
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTBRKWL
LINE_48105:
LDY VAR_MO%
LDA VAR_MO%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_GC%
LDA VAR_GC%+1
JSR ICMP
ROL
BCS GT_GT69
LDA #0
JMP GT_SKIP69
GT_GT69:
LDA #$1
GT_SKIP69:
COMP_SKP105:
BEQ LINE_SKIP301
LINE_NSKIP301:
JMP LINE_42420
LINE_SKIP301:
LINE_48110:
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_XREG
JSR CLOSE
JMP RETURN
LINE_48200:
LINE_48210:
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT26
LDA #<CONST_80
LDY #>CONST_80
JSR COMPACT130
JMP RETURN
LINE_49000:
LINE_49005:
JSR GETADOLLAR
LDA #<CONST_81
LDY #>CONST_81
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_82
LDY #>CONST_82
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT72
COMP_SKP106:
BEQ LINE_SKIP302
LINE_NSKIP302:
JMP LINE_49100
LINE_SKIP302:
LINE_49010:
JMP LINE_49000
LINE_49100:
LINE_49110:
JSR END
RTS
LINE_50000:
LINE_50002:
LDY VAR_LR%
LDA VAR_LR%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_RD%
LDA VAR_RD%+1
JSR ICMP
EQ_EQ70:
EQ_SKIP70:
COMP_SKP107:
BNE LINE_SKIP303
LINE_NSKIP303:
JMP LINE_49000
LINE_SKIP303:
LINE_50005:
JSR COMPACT23
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT30
LDA #<FORLOOP26
STA JUMP_TARGET
LDA #>FORLOOP26
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP26:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<CONST_7
LDY #>CONST_7
JSR COPY2_XYA_YREG
JSR COMPACT2
JSR ARRAYSTORE_INTEGER
JSR COMPACT98
JSR COMPACT140
JSR COMPACT100
JSR NEXT
LDA A_REG
BNE RBEQ_26
JMP (JUMP_TARGET)
RBEQ_26:
LDY #0
TYA
STY VAR_SF%
STA VAR_SF%+1
LINE_50010:
LDY #5
STY 646
LDA VAR_CB$
LDY VAR_CB$+1
JSR STROUTWL
JSR COMPACT11
LDA #<VAR_CC$
LDY #>VAR_CC$
JSR COPYSTRING
LDY #1
STY 646
LINE_50012:
LDA VAR_LC$
LDY VAR_LC$+1
STA B_REG
STY B_REG+1
JSR LEN
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
ROL
BCS GT_GT71
LDA #0
JMP GT_SKIP71
GT_GT71:
LDA #$1
GT_SKIP71:
COMP_SKP109:
BEQ LINE_SKIP304
LINE_NSKIP304:
LDA VAR_LC$
LDY VAR_LC$+1
JSR COMPACT74
LDA VAR_LC$
LDY VAR_LC$+1
JSR STROUTBRKWL
JMP LINE_50020
LINE_SKIP304:
LINE_50015:
JSR GOSUB
JSR LINE_63000
LDY #1
STY 19
INPUT1:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_11
LDY #>CONST_11
JSR STROUTWL
JSR QMARKOUT1
JSR INPUTSTR
LDA A_REG
LDY A_REG+1
JSR COMPACT74
JSR QUEUESIZE
LDA X_REG
COMP_SKP110:
BEQ INPUTCHECK1
JSR EXTRAIGNORED
INPUTCHECK1:
LDY #0
STY 19
JSR LINEBREAK
LINE_50020:
LDY #3
STY 646
JSR COMPACT11
LDA #<VAR_CT$
LDY #>VAR_CT$
JSR COPYSTRING
JSR COMPACT11
LDA #<VAR_LC$
LDY #>VAR_LC$
JSR COPYSTRING
JSR COMPACT64
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ72:
EQ_SKIP72:
COMP_SKP111:
BNE LINE_SKIP305
LINE_NSKIP305:
LDA #<CONST_83
LDY #>CONST_83
JSR COMPACT74
LINE_SKIP305:
LINE_50030:
JSR COMPACT1
LDA VAR_CC$
LDY VAR_CC$+1
JSR COMPACT103
JSR LINE_63100
JSR COMPACTMAX
LDA #<CONST_84
LDY #>CONST_84
STA B_REG
STY B_REG+1
LDA VAR_TX$
LDY VAR_TX$+1
JSR COMPACT19
JSR COMPACT74
LINE_50035:
JSR GOSUB
JSR LINE_41000
LINE_50040:
LDY #0
TYA
STY VAR_CC%
STA VAR_CC%+1
LDX #4
dcloop1360_1:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop1360_1
JSR COMPACT64
LDY #>X_REG
LDA #<X_REG
JSR COMPACT30
LDA #<FORLOOP27
STA JUMP_TARGET
LDA #>FORLOOP27
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP27:
JSR COMPACTMAX
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_CREG
JSR COMPACT63
LDY #1
JSR MIDCONST
JSR COMPACT120
LDA #<VAR_C$
LDY #>VAR_C$
JSR COPYSTRING
LDA VAR_C$
LDY VAR_C$+1
STA B_REG
STY B_REG+1
JSR ASC
JSR COMPACT186
LINE_50045:
LDA #$80
JSR COMPACT87
EQ_EQ73:
EQ_SKIP73:
COMP_SKP112:
BNE LINE_SKIP306
LINE_NSKIP306:
LDY #32
LDA #0
STY VAR_C%
STA VAR_C%+1
LINE_SKIP306:
LINE_50050:
LDA #$39
JSR COMPACT87
ROL
BCS GT_GT74
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP74
GT_GT74:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP74:
JSR REALFACPUSH
LDA #$30
JSR COMPACT87
BEQ LT_LT_EQ75
ROL
BCC LT_LT75
LT_LT_EQ75:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP75
LT_LT75:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP75:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP113:
BNE LINE_NSKIP307
JMP LINE_SKIP307
LINE_NSKIP307:
LDA #$5a
JSR COMPACT87
ROL
BCS GT_GT76
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP76
GT_GT76:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP76:
JSR REALFACPUSH
LDA #$41
JSR COMPACT87
BEQ LT_LT_EQ77
ROL
BCC LT_LT77
LT_LT_EQ77:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP77
LT_LT77:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP77:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP114:
BNE LINE_NSKIP308
JMP LINE_SKIP308
LINE_NSKIP308:
LDA #<CONST_86R
LDY #>CONST_86R
JSR COPY2_XYA_YREG
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT91
JSR CMPFAC
NEQ_NEQ78:
NEQ_SKIP78:
COMP_SKP115:
BEQ LINE_SKIP309
LINE_NSKIP309:
JMP LINE_50100
LINE_SKIP309:
LINE_SKIP308:
LINE_SKIP307:
LINE_50060:
LDA #$20
JSR COMPACT87
NEQ_NEQ79:
NEQ_SKIP79:
COMP_SKP116:
BEQ LINE_SKIP310
LINE_NSKIP310:
JSR COMPACTMAX
LDA VAR_C$
LDY VAR_C$+1
STA B_REG
STY B_REG+1
LDA VAR_CT$
LDY VAR_CT$+1
JSR COMPACT19
JSR COMPACT142
JMP LINE_50080
LINE_SKIP310:
LINE_50070:
JSR COMPACT153
JSR LEN
JSR COMPACT21
JSR COMPACT141
BCS GT_GT80
LDA #0
JMP GT_SKIP80
GT_GT80:
LDA #$1
GT_SKIP80:
COMP_SKP117:
BEQ LINE_SKIP311
LINE_NSKIP311:
JSR GOSUB
JSR LINE_50500
LINE_SKIP311:
LINE_50080:
LDA #$09
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ81:
EQ_SKIP81:
COMP_SKP118:
BNE LINE_SKIP312
LINE_NSKIP312:
LDX #4
dcloop1360_2:
LDA CONST_53R,X
STA VAR_I,X
DEX
BPL dcloop1360_2
LINE_SKIP312:
LINE_50100:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_27
JMP (JUMP_TARGET)
RBEQ_27:
LINE_50110:
LDY VAR_CC%
LDA VAR_CC%+1
STY VAR_PP%
STA VAR_PP%+1
LDY VAR_CC%
LDA VAR_CC%+1
STY VAR_CO%
STA VAR_CO%+1
LDY #0
TYA
STY VAR_CC%
STA VAR_CC%+1
JSR COMPACT23
LDY VAR_PP%
LDA VAR_PP%+1
JSR COMPACT28
LDA #<FORLOOP28
STA JUMP_TARGET
LDA #>FORLOOP28
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP28:
LINE_50120:
JSR COMPACT140
JSR COMPACT109
JSR COMPACT13
LDA #<CONST_7
LDY #>CONST_7
JSR COMPACT229
LDA VAR_A$
LDY VAR_A$+1
JSR COMPACT152
JSR COMPACT66
BEQ LT_LT_EQ82
ROL
BCC LT_LT82
LT_LT_EQ82:
LDA #0
JMP LT_SKIP82
LT_LT82:
LDA #$1
LT_SKIP82:
COMP_SKP120:
BEQ LINE_SKIP313
LINE_NSKIP313:
JMP LINE_50155
LINE_SKIP313:
LINE_50130:
JSR COMPACT83
LDY VAR_TB%
LDA VAR_TB%+1
JSR COMPACT14
JSR COMPACT85
LDA #<FORLOOP29
STA JUMP_TARGET
LDA #>FORLOOP29
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP29:
JSR COMPACT80
LDY VAR_MS%
LDA VAR_MS%+1
JSR COMPACT14
JSR COMPACT81
LDA #<FORLOOP30
STA JUMP_TARGET
LDA #>FORLOOP30
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP30:
JSR COMPACT105
LDY #4
STY A_REG
JSR COMPACT97
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
JSR COMPACT54
LDA #<VAR_CM$[]
LDY #>VAR_CM$[]
JSR COMPACT109
JSR COMPACT124
LINE_50135:
JSR COMPACT126
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ83:
EQ_SKIP83:
COMP_SKP121:
BNE LINE_SKIP314
LINE_NSKIP314:
LDX #4
dcloop1489_1:
LDA CONST_53R,X
STA VAR_II,X
DEX
BPL dcloop1489_1
JMP LINE_50150
LINE_SKIP314:
LINE_50140:
JSR COMPACTMAX
JSR COMPACT69
LDA #<X_REG
LDY #>X_REG
STY TMP3_ZP+1
LDX #<C_REG
LDY #>C_REG
JSR COPY2_XYA
JSR COMPACT125
JSR LEFT
JSR COMPACT122
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP122:
BNE LINE_NSKIP315
JMP LINE_SKIP315
LINE_NSKIP315:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT144
LDX #4
dcloop1489_2:
LDA CONST_53R,X
STA VAR_II,X
LDA CONST_53R,X
STA VAR_P,X
DEX
BPL dcloop1489_2
LINE_SKIP315:
LINE_50150:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_28
JMP (JUMP_TARGET)
RBEQ_28:
JSR COMPACT85
JSR NEXT
LDA A_REG
BNE RBEQ_29
JMP (JUMP_TARGET)
RBEQ_29:
LINE_50155:
LDA #$ff
LDY #$ff
JSR COMPACT20
BNE NEQ_NEQ84
LDA #0
JMP NEQ_SKIP84
NEQ_NEQ84:
LDA #$1
NEQ_SKIP84:
COMP_SKP125:
BNE LINE_NSKIP316
JMP LINE_SKIP316
LINE_NSKIP316:
JSR COMPACT147
TYA
JSR COMPACT193
JSR CMPFAC
NEQ_NEQ85:
NEQ_SKIP85:
COMP_SKP126:
BEQ LINE_SKIP317
LINE_NSKIP317:
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_YREG
JSR YREGFAC
LDX #<VAR_ER
LDY #>VAR_ER
JSR FACMEM
JMP RETURN
LINE_SKIP317:
LINE_SKIP316:
LINE_50160:
LDA #$ff
LDY #$ff
JSR COMPACT20
BNE NEQ_NEQ86
LDA #0
JMP NEQ_SKIP86
NEQ_NEQ86:
LDA #$1
NEQ_SKIP86:
COMP_SKP127:
BNE LINE_NSKIP318
JMP LINE_SKIP318
LINE_NSKIP318:
JSR COMPACT45
JSR COMPACT192
LDY #0
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT143
JMP LINE_50230
LINE_SKIP318:
LINE_50170:
JSR GOSUB
JSR LINE_50400
LINE_50185:
LDA #$ff
LDY #$ff
JSR COMPACT20
EQ_EQ87:
EQ_SKIP87:
COMP_SKP128:
BNE LINE_SKIP319
LINE_NSKIP319:
JSR GOSUB
JSR LINE_50300
JSR GOSUB
JSR LINE_50400
LINE_SKIP319:
LINE_50190:
LDA #$ff
LDY #$ff
JSR COMPACT20
EQ_EQ88:
EQ_SKIP88:
COMP_SKP129:
BNE LINE_SKIP320
LINE_NSKIP320:
JMP LINE_50230
LINE_SKIP320:
LINE_50200:
JSR COMPACT2
LDY #1
LDA #0
JSR COMPACT5
BEQ EQ_EQ89
LDA #0
JMP EQ_SKIP89
EQ_EQ89:
LDA #$1
EQ_SKIP89:
COMP_SKP130:
BNE LINE_NSKIP321
JMP LINE_SKIP321
LINE_NSKIP321:
JSR COMPACT45
JSR COMPACT2
LDY #1
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT143
LINE_SKIP321:
LINE_50210:
JSR COMPACT2
LDY #2
LDA #0
JSR COMPACT5
BEQ EQ_EQ90
LDA #0
JMP EQ_SKIP90
EQ_EQ90:
LDA #$1
EQ_SKIP90:
COMP_SKP131:
BNE LINE_NSKIP322
JMP LINE_SKIP322
LINE_NSKIP322:
JSR COMPACT45
JSR COMPACT2
LDY #2
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT143
LINE_SKIP322:
LINE_50220:
LDA #$ff
LDY #$ff
JSR COMPACT20
NEQ_NEQ91:
NEQ_SKIP91:
COMP_SKP132:
BEQ LINE_SKIP323
LINE_NSKIP323:
LDX #4
dcloop1489_4:
LDA CONST_2R,X
STA VAR_ER,X
DEX
BPL dcloop1489_4
JMP RETURN
LINE_SKIP323:
LINE_50230:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_30
JMP (JUMP_TARGET)
RBEQ_30:
LINE_50240:
JSR COMPACT23
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT30
LDA #<FORLOOP31
STA JUMP_TARGET
LDA #>FORLOOP31
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP31:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT6
NEQ_NEQ92:
NEQ_SKIP92:
COMP_SKP134:
BEQ LINE_SKIP324
LINE_NSKIP324:
LDY VAR_CC%
LDA VAR_CC%+1
JSR SUPERFIINX
STY VAR_CC%
STA VAR_CC%+1
JMP LINE_50260
LINE_SKIP324:
LINE_50250:
JSR COMPACT21
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ93:
EQ_SKIP93:
COMP_SKP135:
BNE LINE_SKIP325
LINE_NSKIP325:
LDX #4
dcloop1489_5:
LDA CONST_6R,X
STA VAR_ER,X
DEX
BPL dcloop1489_5
JMP RETURN
LINE_SKIP325:
LINE_50260:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_31
JMP (JUMP_TARGET)
RBEQ_31:
LINE_50270:
JSR COMPACT11
LDA #<VAR_LO$
LDY #>VAR_LO$
JSR COPYSTRING
JSR COMPACT2
LDY #1
LDA #0
JSR ARRAYACCESS_INTEGER_INT
JSR XREGFAC
LDX #<VAR_I
LDY #>VAR_I
JSR FACMEM
LDA #<CONST_7
LDY #>CONST_7
JSR REALFAC
LDA #<VAR_I
LDY #>VAR_I
JSR CMPFAC
BNE NEQ_NEQ94
LDA #0
JMP NEQ_SKIP94
NEQ_NEQ94:
LDA #$1
NEQ_SKIP94:
COMP_SKP137:
BNE LINE_NSKIP326
JMP LINE_SKIP326
LINE_NSKIP326:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
JSR COMPACT37
LDA A_REG
LDY A_REG+1
JSR COMPACT103
JSR LINE_63100
LDA VAR_TX$
LDY VAR_TX$+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_LO$
LDY #>VAR_LO$
JSR COPYSTRING
LINE_SKIP326:
LINE_50280:
JMP RETURN
LINE_50300:
LINE_50310:
JSR COMPACTMAX
LDA #<CONST_37
LDY #>CONST_37
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_CREG
JSR COMPACT68
JSR RIGHT
JSR POPINT2B
JSR SNEQ
LDA X_REG
COMP_SKP138:
BEQ LINE_SKIP327
LINE_NSKIP327:
JMP RETURN
LINE_SKIP327:
LINE_50320:
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT69
JSR COMPACT67
JSR COMPACT68
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JMP RETURN
LINE_50400:
LINE_50410:
JSR COMPACT83
LDY VAR_TI%
LDA VAR_TI%+1
JSR COMPACT14
JSR COMPACT85
LDA #<FORLOOP32
STA JUMP_TARGET
LDA #>FORLOOP32
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP32:
JSR COMPACT101
JSR PUSHINT
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDA #<VAR_IL$[]
LDY #>VAR_IL$[]
JSR COMPACT160
JSR SEQ
LDA X_REG
COMP_SKP139:
BEQ LINE_SKIP328
LINE_NSKIP328:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT144
LDX #4
dcloop1618_1:
LDA CONST_53R,X
STA VAR_P,X
DEX
BPL dcloop1618_1
LINE_SKIP328:
LINE_50420:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_32
JMP (JUMP_TARGET)
RBEQ_32:
JMP RETURN
LINE_50500:
LINE_50505:
JSR GOSUB
JSR LINE_50600
LINE_50510:
JSR COMPACT21
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ EQ_EQ95
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP95
EQ_EQ95:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP95:
JSR REALFAC
JSR FACXREG
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_91
LDY #>CONST_91
STA B_REG
STY B_REG+1
LDA VAR_CT$
LDY VAR_CT$+1
STA A_REG
STY A_REG+1
JSR SNEQ
JSR COMPACT73
COMP_SKP141:
BNE LINE_NSKIP329
JMP LINE_SKIP329
LINE_NSKIP329:
LDY VAR_CC%
LDA VAR_CC%+1
JSR INTFAC
JSR PUSHREAL
LDA VAR_CT$
LDY VAR_CT$+1
STA A_REG
STY A_REG+1
JSR POPREALXREG
LDA #<VAR_CP$[]
LDY #>VAR_CP$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
JSR COMPACT11
LDA #<VAR_CT$
LDY #>VAR_CT$
JSR COPYSTRING
LDY VAR_CC%
LDA VAR_CC%+1
JSR SUPERFIINX
STY VAR_CC%
STA VAR_CC%+1
JMP RETURN
LINE_SKIP329:
LINE_50520:
JSR COMPACTMAX
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR COMPACT64
JSR COMPACT67
JSR COMPACT63
JSR RIGHT
JSR COMPACT120
LDA #<VAR_LC$
LDY #>VAR_LC$
JSR COPYSTRING
LDX #4
dcloop1618_2:
LDA CONST_53R,X
STA VAR_I,X
DEX
BPL dcloop1618_2
JMP RETURN
LINE_50600:
LINE_50610:
JSR COMPACT153
JSR LEN
LDA #$03
JSR COMPACT66
ROL
BCS GT_GT96
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP96
GT_GT96:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP96:
JSR REALFACPUSH
LDA VAR_LO$
LDY VAR_LO$+1
STA B_REG
STY B_REG+1
JSR LEN
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
BEQ EQ_EQ97
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP97
EQ_EQ97:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP97:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP142:
BEQ LINE_SKIP330
LINE_NSKIP330:
JMP RETURN
LINE_SKIP330:
LINE_50620:
JSR COMPACTMAX
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_CREG
LDA VAR_CT$
LDY VAR_CT$+1
STA B_REG
STY B_REG+1
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LDA #<CONST_92
LDY #>CONST_92
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT70
LDA #<CONST_93
LDY #>CONST_93
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT75
LDA #<CONST_94
LDY #>CONST_94
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR COMPACT71
JSR COMPACT73
COMP_SKP143:
BEQ LINE_SKIP331
LINE_NSKIP331:
LDA VAR_LO$
LDY VAR_LO$+1
JSR COMPACT142
LINE_SKIP331:
LINE_50630:
JMP RETURN
LINE_52000:
LINE_52005:
JSR COMPACT38
JSR COMPACT43
JSR COMPACT78
LDY #0
TYA
STY VAR_SK%
STA VAR_SK%+1
LINE_52010:
JSR COMPACT21
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ EQ_EQ98
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP98
EQ_EQ98:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP98:
JSR REALFACPUSH
JSR COMPACT123
LDA #<VAR_ER
LDY #>VAR_ER
JSR CMPFAC
BNE NEQ_NEQ99
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP99
NEQ_NEQ99:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP99:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP144:
BEQ LINE_SKIP332
LINE_NSKIP332:
JMP RETURN
LINE_SKIP332:
LINE_52012:
JSR COMPACT3
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_T%
STA VAR_T%+1
JSR FIINX
JSR XREGFAC
JSR FACWORD
STY TMP_ZP
ON3SUB0:
LDA #1
CMP TMP_ZP
COMP_SKP145:
BNE AFTER3SUB0
JMP LINE_52700
AFTER3SUB0:
ON3SUB1:
LDA #2
CMP TMP_ZP
COMP_SKP146:
BNE AFTER3SUB1
JMP LINE_52030
AFTER3SUB1:
ON3SUB2:
LDA #3
CMP TMP_ZP
COMP_SKP147:
BNE AFTER3SUB2
JMP LINE_52500
AFTER3SUB2:
ON3SUB3:
LDA #4
CMP TMP_ZP
COMP_SKP148:
BNE AFTER3SUB3
JMP LINE_52300
AFTER3SUB3:
ON3SUB4:
LDA #5
CMP TMP_ZP
COMP_SKP149:
BNE AFTER3SUB4
JMP LINE_52200
AFTER3SUB4:
ON3SUB5:
LDA #6
CMP TMP_ZP
COMP_SKP150:
BNE AFTER3SUB5
JMP LINE_52900
AFTER3SUB5:
ON3SUB6:
LDA #7
CMP TMP_ZP
COMP_SKP151:
BNE AFTER3SUB6
JMP LINE_53200
AFTER3SUB6:
GSKIPON3:
LINE_52013:
LDA #<CONST_67R
LDY #>CONST_67R
JSR COPY2_XYA_YREG
LDY VAR_T%
LDA VAR_T%+1
JSR COMPACT92
JSR FACWORD
STY TMP_ZP
ON4SUB0:
LDA #1
CMP TMP_ZP
COMP_SKP152:
BNE AFTER4SUB0
JMP LINE_53500
AFTER4SUB0:
ON4SUB1:
LDA #2
CMP TMP_ZP
COMP_SKP153:
BNE AFTER4SUB1
JMP LINE_53600
AFTER4SUB1:
ON4SUB2:
LDA #3
CMP TMP_ZP
COMP_SKP154:
BNE AFTER4SUB2
JMP LINE_53700
AFTER4SUB2:
ON4SUB3:
LDA #4
CMP TMP_ZP
COMP_SKP155:
BNE AFTER4SUB3
JMP LINE_53800
AFTER4SUB3:
ON4SUB4:
LDA #5
CMP TMP_ZP
COMP_SKP156:
BNE AFTER4SUB4
JMP LINE_53850
AFTER4SUB4:
ON4SUB5:
LDA #6
CMP TMP_ZP
COMP_SKP157:
BNE AFTER4SUB5
JMP LINE_53900
AFTER4SUB5:
ON4SUB6:
LDA #7
CMP TMP_ZP
COMP_SKP158:
BNE AFTER4SUB6
JMP LINE_54000
AFTER4SUB6:
ON4SUB7:
LDA #8
CMP TMP_ZP
COMP_SKP159:
BNE AFTER4SUB7
JMP LINE_53500
AFTER4SUB7:
ON4SUB8:
LDA #9
CMP TMP_ZP
COMP_SKP160:
BNE AFTER4SUB8
JMP LINE_53500
AFTER4SUB8:
ON4SUB9:
LDA #10
CMP TMP_ZP
COMP_SKP161:
BNE AFTER4SUB9
JMP LINE_45000
AFTER4SUB9:
GSKIPON4:
LINE_52014:
LDX #4
dcloop1618_3:
LDA CONST_6R,X
STA VAR_ER,X
DEX
BPL dcloop1618_3
JMP RETURN
LINE_52022:
LINE_52025:
LINE_52030:
LINE_52040:
JSR COMPACT40
LDY VAR_CO%
LDA VAR_CO%+1
JSR ICMP
EQ_EQ100:
EQ_SKIP100:
COMP_SKP162:
BNE LINE_SKIP333
LINE_NSKIP333:
JSR GOSUB
JSR LINE_59000
JMP RETURN
LINE_SKIP333:
LINE_52050:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ101:
EQ_SKIP101:
COMP_SKP163:
BNE LINE_SKIP334
LINE_NSKIP334:
JMP LINE_52065
LINE_SKIP334:
LINE_52060:
JMP LINE_59150
LINE_52065:
JSR COMPACT21
LDY VAR_TC%
LDA VAR_TC%+1
JSR ICMP
EQ_EQ102:
EQ_SKIP102:
COMP_SKP164:
BNE LINE_SKIP335
LINE_NSKIP335:
JMP LINE_52085
LINE_SKIP335:
LINE_52066:
JSR GOSUB
JSR LINE_52150
JSR COMPACT41
EQ_EQ103:
EQ_SKIP103:
COMP_SKP165:
BNE LINE_SKIP336
LINE_NSKIP336:
JMP RETURN
LINE_SKIP336:
LINE_52070:
JSR COMPACT2
JSR COMPACT154
JSR COMPACT23
LDY VAR_TC%
LDA VAR_TC%+1
JSR COMPACT28
LDA #<FORLOOP33
STA JUMP_TARGET
LDA #>FORLOOP33
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP33:
JSR COMPACT207
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PP%
STA VAR_PP%+1
JSR COMPACT56
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
EQ_EQ104:
EQ_SKIP104:
COMP_SKP166:
BNE LINE_SKIP337
LINE_NSKIP337:
JSR GOSUB
JSR LINE_40500
JMP RETURN
LINE_SKIP337:
LINE_52080:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_33
JMP (JUMP_TARGET)
RBEQ_33:
LINE_52085:
JSR COMPACT22
EQ_EQ105:
EQ_SKIP105:
COMP_SKP168:
BNE LINE_SKIP338
LINE_NSKIP338:
JMP LINE_52110
LINE_SKIP338:
LINE_52090:
JSR COMPACT2
JSR COMPACT154
JSR COMPACT27
LDA #<FORLOOP34
STA JUMP_TARGET
LDA #>FORLOOP34
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP34:
LINE_52095:
JSR COMPACT34
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PP%
STA VAR_PP%+1
JSR COMPACT56
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
BEQ EQ_EQ106
LDA #0
JMP EQ_SKIP106
EQ_EQ106:
LDA #$1
EQ_SKIP106:
COMP_SKP169:
BNE LINE_NSKIP339
JMP LINE_SKIP339
LINE_NSKIP339:
JSR COMPACT32
BEQ EQ_EQ107
LDA #0
JMP EQ_SKIP107
EQ_EQ107:
LDA #$1
EQ_SKIP107:
COMP_SKP170:
BEQ LINE_SKIP340
LINE_NSKIP340:
JSR GOSUB
JSR LINE_40500
JMP RETURN
LINE_SKIP340:
LINE_SKIP339:
LINE_52100:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_34
JMP (JUMP_TARGET)
RBEQ_34:
LINE_52110:
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_95
LDY #>CONST_95
JSR STROUTBRKWL
JSR COMPACT230
JMP RETURN
LINE_52150:
LINE_52155:
JSR COMPACT43
JSR COMPACT21
LDY VAR_OC%
LDA VAR_OC%+1
JSR ICMP
EQ_EQ108:
EQ_SKIP108:
COMP_SKP172:
BNE LINE_SKIP341
LINE_NSKIP341:
JMP RETURN
LINE_SKIP341:
LINE_52160:
JSR COMPACT3
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CO%
STA VAR_CO%+1
JSR COMPACT165
JSR COMPACT25
LDA #<VAR_J
LDY #>VAR_J
STA A_REG
STY A_REG+1
LDA #<FORLOOP35
STA JUMP_TARGET
LDA #>FORLOOP35
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP35:
JSR COMPACT166
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
LINE_52165:
LDY VAR_CO%
LDA VAR_CO%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_T%
LDA VAR_T%+1
JSR ICMP
EQ_EQ109:
EQ_SKIP109:
COMP_SKP173:
BNE LINE_SKIP342
LINE_NSKIP342:
JSR COMPACT167
JSR LINE_42200
LINE_SKIP342:
LINE_52170:
JSR COMPACT41
EQ_EQ110:
EQ_SKIP110:
COMP_SKP174:
BNE LINE_SKIP343
LINE_NSKIP343:
JMP RETURN
LINE_SKIP343:
LINE_52175:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_35
JMP (JUMP_TARGET)
RBEQ_35:
JMP RETURN
LINE_52200:
LINE_52202:
LINE_52204:
LINE_52220:
JSR COMPACT40
LDY VAR_CO%
LDA VAR_CO%+1
JSR ICMP
NEQ_NEQ111:
NEQ_SKIP111:
COMP_SKP176:
BEQ LINE_SKIP344
LINE_NSKIP344:
JMP LINE_52280
LINE_SKIP344:
LINE_52230:
JSR LINEBREAK
LDA #<CONST_96
LDY #>CONST_96
JSR STROUTWL
LINE_52240:
JSR GETADOLLAR
LDA #<CONST_11
LDY #>CONST_11
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP177:
BEQ LINE_SKIP345
LINE_NSKIP345:
JMP LINE_52240
LINE_SKIP345:
LINE_52250:
LDA #<CONST_97
LDY #>CONST_97
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP178:
BEQ LINE_SKIP346
LINE_NSKIP346:
JSR LINEBREAK
LDA #<CONST_98
LDY #>CONST_98
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
STY A_REG
STA A_REG+1
JSR STROUTBRK
JMP LINE_49100
LINE_SKIP346:
LINE_52260:
JSR COMPACT76
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP179:
BEQ LINE_SKIP347
LINE_NSKIP347:
JMP RETURN
LINE_SKIP347:
LINE_52270:
JMP LINE_52230
LINE_52280:
JMP LINE_59150
LINE_52300:
LINE_52302:
LINE_52304:
LINE_52320:
JSR COMPACT40
LDY VAR_CO%
LDA VAR_CO%+1
JSR ICMP
NEQ_NEQ112:
NEQ_SKIP112:
COMP_SKP180:
BEQ LINE_SKIP348
LINE_NSKIP348:
JMP LINE_59150
LINE_SKIP348:
LINE_52330:
JSR GOSUB
JSR LINE_40700
JMP RETURN
LINE_52500:
LINE_52502:
LINE_52504:
LINE_52510:
JSR COMPACT78
LINE_52520:
JSR COMPACT40
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ EQ_EQ113
LDA #0
JMP EQ_SKIP113
EQ_EQ113:
LDA #$1
EQ_SKIP113:
COMP_SKP181:
BNE LINE_NSKIP349
JMP LINE_SKIP349
LINE_NSKIP349:
JSR COMPACT65
LDY VAR_CO%
LDA VAR_CO%+1
JSR ICMP
BEQ EQ_EQ114
LDA #0
JMP EQ_SKIP114
EQ_EQ114:
LDA #$1
EQ_SKIP114:
COMP_SKP182:
BNE LINE_NSKIP350
JMP LINE_SKIP350
LINE_NSKIP350:
LDA VAR_AL$
LDY VAR_AL$+1
STA B_REG
STY B_REG+1
LDA B_REG
LDY B_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
JSR COMPACT151
LDY #1
LDA #0
JSR ARRAYACCESS_STRING_INT
JSR POPINT2B
JSR COMPACT75
LDA VAR_AL$
LDY VAR_AL$+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<VAR_CP$[]
LDY #>VAR_CP$[]
JSR COMPACT4
JSR ARRAYACCESS_STRING_INT
JSR POPINT2B
JSR COMPACT72
COMP_SKP183:
BEQ LINE_SKIP351
LINE_NSKIP351:
JSR GOSUB
JSR LINE_40800
JMP RETURN
LINE_SKIP351:
LINE_SKIP350:
LINE_SKIP349:
LINE_52525:
JSR COMPACT40
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ115:
EQ_SKIP115:
COMP_SKP184:
BNE LINE_SKIP352
LINE_NSKIP352:
JMP LINE_59150
LINE_SKIP352:
LINE_52530:
LDX #4
dcloop1747_1:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop1747_1
LDY VAR_CC%
LDA VAR_CC%+1
JSR COMPACT28
LDA #<FORLOOP36
STA JUMP_TARGET
LDA #>FORLOOP36
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP36:
JSR COMPACT148
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
JSR COMPACT43
LINE_52540:
JSR COMPACT38
JSR COMPACT21
LDY VAR_TC%
LDA VAR_TC%+1
JSR ICMP
EQ_EQ116:
EQ_SKIP116:
COMP_SKP185:
BNE LINE_SKIP353
LINE_NSKIP353:
JMP LINE_52580
LINE_SKIP353:
LINE_52545:
JSR COMPACT80
LDY VAR_TC%
LDA VAR_TC%+1
JSR COMPACT25
JSR COMPACT81
LDA #<FORLOOP37
STA JUMP_TARGET
LDA #>FORLOOP37
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP37:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PP%
STA VAR_PP%+1
JSR COMPACT56
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
EQ_EQ117:
EQ_SKIP117:
COMP_SKP186:
BNE LINE_SKIP354
LINE_NSKIP354:
JSR GOSUB
JSR LINE_40900
LINE_SKIP354:
LINE_52550:
JSR COMPACT41
EQ_EQ118:
EQ_SKIP118:
COMP_SKP187:
BNE LINE_SKIP355
LINE_NSKIP355:
JSR COMPACT82
LINE_SKIP355:
LINE_52560:
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
ROL
BCS GT_GT119
LDA #0
JMP GT_SKIP119
GT_GT119:
LDA #$1
GT_SKIP119:
COMP_SKP188:
BNE LINE_NSKIP356
JMP LINE_SKIP356
LINE_NSKIP356:
LDY VAR_RT%
LDA VAR_RT%+1
JSR COMPACT42
LDX #4
dcloop1876_1:
LDA CONST_53R,X
STA VAR_II,X
DEX
BPL dcloop1876_1
LINE_SKIP356:
LINE_52570:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_36
JMP (JUMP_TARGET)
RBEQ_36:
LINE_52580:
JSR COMPACT21
LDY VAR_RR%
LDA VAR_RR%+1
JSR ICMP
EQ_EQ120:
EQ_SKIP120:
COMP_SKP190:
BNE LINE_SKIP357
LINE_NSKIP357:
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT8
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_95
LDY #>CONST_95
JSR STROUTBRKWL
LINE_SKIP357:
LINE_52590:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_37
JMP (JUMP_TARGET)
RBEQ_37:
LINE_52600:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ121:
EQ_SKIP121:
COMP_SKP192:
BNE LINE_SKIP358
LINE_NSKIP358:
JSR GOSUB
JSR LINE_40650
LINE_SKIP358:
LINE_52610:
JMP RETURN
LINE_52700:
LINE_52702:
LINE_52704:
LINE_52720:
JSR COMPACT65
LDY VAR_CO%
LDA VAR_CO%+1
JSR ICMP
NEQ_NEQ122:
NEQ_SKIP122:
COMP_SKP193:
BEQ LINE_SKIP359
LINE_NSKIP359:
JMP LINE_59150
LINE_SKIP359:
LINE_52740:
JSR COMPACT151
LDY #1
LDA #0
JSR ARRAYACCESS_STRING_INT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JSR GOSUB
JSR LINE_41200
LINE_52745:
JSR COMPACT69
JSR COMPACT159
JSR COMPACT141
BCS GT_GT123
LDA #0
JMP GT_SKIP123
GT_GT123:
LDA #$1
GT_SKIP123:
COMP_SKP194:
BNE LINE_NSKIP360
JMP LINE_SKIP360
LINE_NSKIP360:
JSR COMPACT69
LDA #$07
JSR COMPACT66
BEQ LT_LT_EQ124
ROL
BCC LT_LT124
LT_LT_EQ124:
LDA #0
JMP LT_SKIP124
LT_LT124:
LDA #$1
LT_SKIP124:
COMP_SKP195:
BNE LINE_NSKIP361
JMP LINE_SKIP361
LINE_NSKIP361:
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_CREG
JSR COMPACT68
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JMP LINE_52800
LINE_SKIP361:
LINE_SKIP360:
LINE_52750:
JSR COMPACT69
LDA #$06
JSR COMPACT66
ROL
BCS GT_GT125
LDA #0
JMP GT_SKIP125
GT_GT125:
LDA #$1
GT_SKIP125:
COMP_SKP196:
BNE LINE_NSKIP362
JMP LINE_SKIP362
LINE_NSKIP362:
JSR COMPACTMAX
LDA #<CONST_61R
LDY #>CONST_61R
JSR COPY2_XYA_CREG
JSR COMPACT68
JSR LEFT
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LINE_SKIP362:
LINE_52760:
LDA #<CONST_99
LDY #>CONST_99
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP197:
BEQ LINE_SKIP363
LINE_NSKIP363:
LDA #<CONST_41
LDY #>CONST_41
JSR COMPACT13
JMP LINE_52800
LINE_SKIP363:
LINE_52770:
LDA #<CONST_100
LDY #>CONST_100
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP198:
BEQ LINE_SKIP364
LINE_NSKIP364:
LDA #<CONST_39
LDY #>CONST_39
JSR COMPACT13
JMP LINE_52800
LINE_SKIP364:
LINE_52780:
LDA #<CONST_101
LDY #>CONST_101
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP199:
BEQ LINE_SKIP365
LINE_NSKIP365:
LDA #<CONST_40
LDY #>CONST_40
JSR COMPACT13
JMP LINE_52800
LINE_SKIP365:
LINE_52790:
LDA #<CONST_102
LDY #>CONST_102
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP200:
BEQ LINE_SKIP366
LINE_NSKIP366:
LDA #<CONST_38
LDY #>CONST_38
JSR COMPACT13
LINE_SKIP366:
LINE_52800:
LDA #<CONST_42
LDY #>CONST_42
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP201:
BEQ LINE_SKIP367
LINE_NSKIP367:
LDA #<CONST_45
LDY #>CONST_45
JSR COMPACT13
LINE_SKIP367:
LINE_52810:
JSR COMPACT77
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP202:
BEQ LINE_SKIP368
LINE_NSKIP368:
LDA #<CONST_44
LDY #>CONST_44
JSR COMPACT13
LINE_SKIP368:
LINE_52815:
JSR COMPACT21
LDY VAR_XC%
LDA VAR_XC%+1
JSR ICMP
EQ_EQ126:
EQ_SKIP126:
COMP_SKP203:
BNE LINE_SKIP369
LINE_NSKIP369:
JMP LINE_52850
LINE_SKIP369:
LINE_52820:
JSR COMPACT23
LDY VAR_XC%
LDA VAR_XC%+1
JSR COMPACT28
LDA #<FORLOOP38
STA JUMP_TARGET
LDA #>FORLOOP38
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP38:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_XP$[]
LDY #>VAR_XP$[]
JSR COMPACT109
JSR COMPACT103
JSR LINE_63100
LDA VAR_TX$
LDY VAR_TX$+1
JSR COMPACT124
LINE_52830:
JSR COMPACT125
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP204:
BNE LINE_NSKIP370
JMP LINE_SKIP370
LINE_NSKIP370:
JSR COMPACTMAX
LDA #<CONST_70
LDY #>CONST_70
JSR COMPACT223
JSR COPY2_XYA_XREG
LDA #<VAR_XX$[]
LDY #>VAR_XX$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR POPINT2B
JSR CONCAT
LDA A_REG
LDY A_REG+1
JSR COMPACT0
JSR LINEBREAK
JSR GOSUB
JSR LINE_40100
JMP RETURN
LINE_SKIP370:
LINE_52840:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_38
JMP (JUMP_TARGET)
RBEQ_38:
LINE_52850:
LDA #<CONST_103
LDY #>CONST_103
JSR STROUTBRKWL
JMP RETURN
LINE_52900:
LINE_52902:
LINE_52904:
LINE_53100:
JSR LINEBREAK
LDA #<CONST_104
LDY #>CONST_104
JSR STROUTBRKWL
LINE_53120:
JSR FRE
JSR INTOUT
JSR CRSRRIGHT
LDA #<CONST_105
LDY #>CONST_105
JSR STROUTBRKWL
LINE_53140:
JMP RETURN
LINE_53200:
LINE_53202:
LINE_53204:
LINE_53210:
JSR COMPACT78
JSR COMPACT22
EQ_EQ127:
EQ_SKIP127:
COMP_SKP206:
BNE LINE_SKIP371
LINE_NSKIP371:
LDA #<CONST_106
LDY #>CONST_106
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP371:
LINE_53220:
JSR COMPACT40
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ128:
EQ_SKIP128:
COMP_SKP207:
BNE LINE_SKIP372
LINE_NSKIP372:
JMP LINE_59150
LINE_SKIP372:
LINE_53230:
LDX #4
dcloop2005_1:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop2005_1
LDY VAR_CC%
LDA VAR_CC%+1
JSR COMPACT28
LDA #<FORLOOP39
STA JUMP_TARGET
LDA #>FORLOOP39
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP39:
JSR COMPACT148
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
LINE_53240:
JSR COMPACT38
JSR COMPACT80
JSR COMPACT24
JSR COMPACT81
LDA #<FORLOOP40
STA JUMP_TARGET
LDA #>FORLOOP40
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP40:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PP%
STA VAR_PP%+1
JSR COMPACT43
LINE_53245:
JSR COMPACT56
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
BEQ EQ_EQ129
LDA #0
JMP EQ_SKIP129
EQ_EQ129:
LDA #$1
EQ_SKIP129:
COMP_SKP208:
BNE LINE_NSKIP373
JMP LINE_SKIP373
LINE_NSKIP373:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT33
BEQ EQ_EQ130
LDA #0
JMP EQ_SKIP130
EQ_EQ130:
LDA #$1
EQ_SKIP130:
COMP_SKP209:
BEQ LINE_SKIP374
LINE_NSKIP374:
JSR GOSUB
JSR LINE_41400
LINE_SKIP374:
LINE_SKIP373:
LINE_53250:
JSR COMPACT41
EQ_EQ131:
EQ_SKIP131:
COMP_SKP210:
BNE LINE_SKIP375
LINE_NSKIP375:
JSR COMPACT82
LINE_SKIP375:
LINE_53260:
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
ROL
BCS GT_GT132
LDA #0
JMP GT_SKIP132
GT_GT132:
LDA #$1
GT_SKIP132:
COMP_SKP211:
BNE LINE_NSKIP376
JMP LINE_SKIP376
LINE_NSKIP376:
LDY VAR_RT%
LDA VAR_RT%+1
JSR COMPACT42
LDX #4
dcloop2005_2:
LDA CONST_53R,X
STA VAR_II,X
DEX
BPL dcloop2005_2
LINE_SKIP376:
LINE_53270:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_39
JMP (JUMP_TARGET)
RBEQ_39:
LINE_53280:
JSR COMPACT21
LDY VAR_RR%
LDA VAR_RR%+1
JSR ICMP
EQ_EQ133:
EQ_SKIP133:
COMP_SKP213:
BNE LINE_SKIP377
LINE_NSKIP377:
LDY VAR_T%
LDA VAR_T%+1
STY VAR_RR%
STA VAR_RR%+1
JSR GOSUB
JSR LINE_53450
LINE_SKIP377:
LINE_53290:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_40
JMP (JUMP_TARGET)
RBEQ_40:
LINE_53300:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ134:
EQ_SKIP134:
COMP_SKP215:
BNE LINE_SKIP378
LINE_NSKIP378:
JSR GOSUB
JSR LINE_40650
LINE_SKIP378:
LINE_53310:
JMP RETURN
LINE_53450:
LINE_53455:
JSR COMPACT40
LDY VAR_SF%
LDA VAR_SF%+1
JSR ICMP
EQ_EQ135:
EQ_SKIP135:
COMP_SKP216:
BNE LINE_SKIP379
LINE_NSKIP379:
JSR COMPACT155
JMP RETURN
LINE_SKIP379:
LINE_53460:
JSR COMPACT36
LDY VAR_RR%
LDA VAR_RR%+1
JSR ARRAYACCESS_STRING_INT
JSR STROUT
LDA #<CONST_107
LDY #>CONST_107
JSR STROUTBRKWL
JSR COMPACT230
LDY #1
LDA #0
STY VAR_SF%
STA VAR_SF%+1
JMP RETURN
LINE_53500:
LINE_53502:
LINE_53504:
LINE_53510:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BNE NEQ_NEQ136
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP136
NEQ_NEQ136:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP136:
JSR REALFACPUSH
LDA #$0f
LDY #$00
JSR COMPACT198
JSR ICMP
BNE NEQ_NEQ137
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP137
NEQ_NEQ137:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP137:
JSR COMPACT115
JSR PUSHREAL
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ LT_LT_EQ138
ROL
BCC LT_LT138
LT_LT_EQ138:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP138
LT_LT138:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP138:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP217:
BEQ LINE_SKIP380
LINE_NSKIP380:
JMP LINE_59150
LINE_SKIP380:
LINE_53520:
LDY VAR_T%
LDA VAR_T%+1
STY VAR_CO%
STA VAR_CO%+1
JSR GOSUB
JSR LINE_58500
JMP RETURN
LINE_53600:
LINE_53602:
LINE_53604:
LINE_53610:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ LT_LT_EQ139
ROL
BCC LT_LT139
LT_LT_EQ139:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP139
LT_LT139:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP139:
JSR REALFACPUSH
JSR COMPACT86
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
ROL
BCS GT_GT140
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP140
GT_GT140:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP140:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP218:
BEQ LINE_SKIP381
LINE_NSKIP381:
JMP LINE_59150
LINE_SKIP381:
LINE_53620:
LDY #8
LDA #0
JSR COMPACT161
JMP RETURN
LINE_53700:
LINE_53702:
LINE_53704:
LINE_53710:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ LT_LT_EQ141
ROL
BCC LT_LT141
LT_LT_EQ141:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP141
LT_LT141:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP141:
JSR REALFACPUSH
JSR COMPACT86
JSR COMPACT162
BCS GT_GT142
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP142
GT_GT142:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP142:
JSR REALFAC
JSR FACXREG
JSR COMPACT73
COMP_SKP219:
BEQ LINE_SKIP382
LINE_NSKIP382:
JMP LINE_59150
LINE_SKIP382:
LINE_53720:
LDY #9
LDA #0
JSR COMPACT161
JMP RETURN
LINE_53800:
LINE_53802:
LINE_53804:
LINE_53810:
JSR COMPACT40
JSR COMPACT162
BCS GT_GT143
LDA #0
JMP GT_SKIP143
GT_GT143:
LDA #$1
GT_SKIP143:
COMP_SKP220:
BEQ LINE_SKIP383
LINE_NSKIP383:
JMP LINE_59150
LINE_SKIP383:
LINE_53820:
JSR COMPACT78
JSR GOSUB
JSR LINE_59200
JMP RETURN
LINE_53850:
LINE_53852:
LINE_53854:
LINE_53860:
JSR COMPACT40
JSR COMPACT162
BCS GT_GT144
LDA #0
JMP GT_SKIP144
GT_GT144:
LDA #$1
GT_SKIP144:
COMP_SKP221:
BEQ LINE_SKIP384
LINE_NSKIP384:
JMP LINE_59150
LINE_SKIP384:
LINE_53862:
JSR COMPACTMAX
LDA #<CONST_108
LDY #>CONST_108
STA B_REG
STY B_REG+1
LDA VAR_FI$
LDY VAR_FI$+1
JSR COMPACT19
JSR COMPACT13
JSR COMPACTMAX
JSR COMPACT68
LDA #<CONST_109
LDY #>CONST_109
JSR COMPACT19
JSR COMPACT124
JSR GOSUB
JSR LINE_53880
LINE_53865:
JSR COMPACTMAX
JSR COMPACT68
LDA #<CONST_110
LDY #>CONST_110
STA A_REG
STY A_REG+1
JSR CONCAT
LDA #<CONST_111
LDY #>CONST_111
STA B_REG
STY B_REG+1
JSR CONCAT
LDA VAR_FI$
LDY VAR_FI$+1
STA B_REG
STY B_REG+1
JSR CONCAT
JSR COMPACT120
LDA #<VAR_B$
LDY #>VAR_B$
JSR COPYSTRING
JSR GOSUB
JSR LINE_53880
LINE_53870:
JSR COMPACT82
JSR GOSUB
JSR LINE_59200
JMP RETURN
LINE_53880:
LINE_53882:
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDY VAR_DN%
LDA VAR_DN%+1
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_12R
LDY #>CONST_12R
JSR REALFACPUSH
JSR COMPACT125
LDY B_REG
LDA B_REG+1
STY G_REG
STA G_REG+1
JSR COMPACT226
JSR COMPACT227
JSR OPEN
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_XREG
JSR CLOSE
JMP RETURN
LINE_53900:
LINE_53902:
LINE_53904:
LINE_53910:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
NEQ_NEQ145:
NEQ_SKIP145:
COMP_SKP222:
BEQ LINE_SKIP385
LINE_NSKIP385:
JMP LINE_59150
LINE_SKIP385:
LINE_53920:
JSR COMPACT155
LDY #12
LDA #0
JSR COMPACT161
LINE_53930:
JSR COMPACT41
EQ_EQ146:
EQ_SKIP146:
COMP_SKP223:
BNE LINE_SKIP386
LINE_NSKIP386:
JMP RETURN
LINE_SKIP386:
LINE_53940:
LDY #0
TYA
STY VAR_SK%
STA VAR_SK%+1
JSR COMPACT2
LDY #1
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
JSR COMPACT42
JSR GOSUB
JSR LINE_43600
JSR COMPACT40
LDY VAR_SK%
LDA VAR_SK%+1
JSR ICMP
EQ_EQ147:
EQ_SKIP147:
COMP_SKP224:
BNE LINE_SKIP387
LINE_NSKIP387:
JMP RETURN
LINE_SKIP387:
LINE_53950:
JSR COMPACT21
LDY VAR_RT%
LDA VAR_RT%+1
JSR ICMP
EQ_EQ148:
EQ_SKIP148:
COMP_SKP225:
BNE LINE_SKIP388
LINE_NSKIP388:
JSR COMPACT3
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_T%
STA VAR_T%+1
JMP LINE_59150
LINE_SKIP388:
LINE_53960:
LDA #<CONST_113
LDY #>CONST_113
JSR STROUTBRKWL
LINE_53970:
JMP RETURN
LINE_54000:
LINE_54002:
LINE_54004:
LINE_54010:
JSR COMPACT40
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
EQ_EQ149:
EQ_SKIP149:
COMP_SKP226:
BNE LINE_SKIP389
LINE_NSKIP389:
LDA #<CONST_114
LDY #>CONST_114
JSR STROUTBRKWL
JMP RETURN
LINE_SKIP389:
LINE_54020:
JSR COMPACT65
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
NEQ_NEQ150:
NEQ_SKIP150:
COMP_SKP227:
BEQ LINE_SKIP390
LINE_NSKIP390:
JMP LINE_59150
LINE_SKIP390:
LINE_54030:
LDY #13
LDA #0
JSR COMPACT161
JMP RETURN
LINE_58500:
LINE_58510:
JSR COMPACT21
LDY VAR_OC%
LDA VAR_OC%+1
JSR ICMP
EQ_EQ151:
EQ_SKIP151:
COMP_SKP228:
BNE LINE_SKIP391
LINE_NSKIP391:
JMP LINE_58700
LINE_SKIP391:
LINE_58520:
JSR COMPACT43
JSR COMPACT165
JSR COMPACT25
JSR COMPACT156
LDA #<FORLOOP41
STA JUMP_TARGET
LDA #>FORLOOP41
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP41:
JSR COMPACT166
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
LINE_58530:
JSR COMPACT157
EQ_EQ152:
EQ_SKIP152:
COMP_SKP229:
BNE LINE_SKIP392
LINE_NSKIP392:
JSR COMPACT167
JSR LINE_42200
LINE_SKIP392:
LINE_58540:
JSR COMPACT41
EQ_EQ153:
EQ_SKIP153:
COMP_SKP230:
BNE LINE_SKIP393
LINE_NSKIP393:
JMP RETURN
LINE_SKIP393:
LINE_58550:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_41
JMP (JUMP_TARGET)
RBEQ_41:
LINE_58700:
LINE_58710:
JSR COMPACT43
LDA #0
STA VAR_J
STA VAR_J+1
STA VAR_J+2
STA VAR_J+3
STA VAR_J+4
LDY VAR_GC%
LDA VAR_GC%+1
JSR COMPACT25
JSR COMPACT156
LDA #<FORLOOP42
STA JUMP_TARGET
LDA #>FORLOOP42
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP42:
LDA #<VAR_J
LDY #>VAR_J
JSR REALFAC
JSR BASINT
JSR FACXREG
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_T%
STA VAR_T%+1
LINE_58720:
JSR COMPACT157
EQ_EQ154:
EQ_SKIP154:
COMP_SKP232:
BNE LINE_SKIP394
LINE_NSKIP394:
LDA #<VAR_J
LDY #>VAR_J
JSR REALFAC
JSR FACINT
STY VAR_T2%
STA VAR_T2%+1
JSR GOSUB
JSR LINE_42700
LINE_SKIP394:
LINE_58730:
JSR COMPACT41
EQ_EQ155:
EQ_SKIP155:
COMP_SKP233:
BNE LINE_SKIP395
LINE_NSKIP395:
JMP RETURN
LINE_SKIP395:
LINE_58740:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_42
JMP (JUMP_TARGET)
RBEQ_42:
LINE_58750:
JSR COMPACT21
LDY VAR_SK%
LDA VAR_SK%+1
JSR ICMP
EQ_EQ156:
EQ_SKIP156:
COMP_SKP235:
BNE LINE_SKIP396
LINE_NSKIP396:
JSR COMPACT3
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_T%
STA VAR_T%+1
JSR GOSUB
JSR LINE_40600
LINE_SKIP396:
LINE_58760:
JMP RETURN
LINE_59000:
LINE_59010:
LDY #15
STY 646
JSR LINEBREAK
JSR COMPACT23
LDY VAR_PL%
LDA VAR_PL%+1
JSR COMPACT28
LDA #<FORLOOP43
STA JUMP_TARGET
LDA #>FORLOOP43
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP43:
JSR COMPACT182
JSR COMPACT109
JSR COMPACT13
LINE_59020:
JSR GOSUB
JSR LINE_59100
LINE_59040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_43
JMP (JUMP_TARGET)
RBEQ_43:
JSR GOSUB
JSR LINE_59500
JMP RETURN
LINE_59100:
LINE_59110:
JSR COMPACT69
LDA #$28
JSR COMPACT66
EQ_EQ157:
EQ_SKIP157:
COMP_SKP237:
BNE LINE_SKIP397
LINE_NSKIP397:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTWL
JMP RETURN
LINE_SKIP397:
LINE_59120:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
JMP RETURN
LINE_59150:
LINE_59160:
JSR GOSUB
JSR LINE_40600
JMP RETURN
LINE_59200:
LINE_59210:
JSR LINEBREAK
JSR COMPACT83
JSR COMPACT21
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
BEQ EQ_EQ158
LDA #0
JMP EQ_SKIP158
EQ_EQ158:
LDA #$1
EQ_SKIP158:
COMP_SKP238:
BNE LINE_NSKIP398
JMP LINE_SKIP398
LINE_NSKIP398:
JSR COMPACTMAX
LDA #<CONST_117
LDY #>CONST_117
JSR COMPACT163
JSR COMPACT19
JSR COMPACT132
LDA #<CONST_118
LDY #>CONST_118
JSR STROUTWL
LINE_SKIP398:
LINE_59220:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
BEQ EQ_EQ159
LDA #0
JMP EQ_SKIP159
EQ_EQ159:
LDA #$1
EQ_SKIP159:
COMP_SKP239:
BNE LINE_NSKIP399
JMP LINE_SKIP399
LINE_NSKIP399:
JSR COMPACTMAX
LDA #<CONST_119
LDY #>CONST_119
JSR COMPACT163
JSR COMPACT19
JSR COMPACT132
LDA #<CONST_120
LDY #>CONST_120
JSR STROUTWL
LINE_SKIP399:
LINE_59225:
LDY VAR_PO%
LDA VAR_PO%+1
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_59900
LDY VAR_C%
LDA VAR_C%+1
STY VAR_PO%
STA VAR_PO%+1
LINE_59230:
LDY VAR_IC%
LDA VAR_IC%+1
JSR COMPACT169
STY VAR_IC%
STA VAR_IC%+1
LINE_59240:
LDY VAR_OD%
LDA VAR_OD%+1
JSR COMPACT169
STY VAR_OD%
STA VAR_OD%+1
LINE_59250:
JSR COMPACT23
LDY VAR_MI%
LDA VAR_MI%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP44
STA JUMP_TARGET
LDA #>FORLOOP44
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP44:
LINE_59260:
JSR COMPACT34
JSR ARRAYACCESS_INTEGER_SI
JSR COMPACT168
JSR COMPACT170
JSR COMPACT46
LINE_59270:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
JSR ARRAYACCESS_INTEGER_SI
JSR COMPACT168
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
JSR COMPACT112
JSR COMPACT94
JSR ARRAYSTORE_INT_INTEGER
LINE_59280:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RS%[]
LDY #>VAR_RS%[]
JSR ARRAYACCESS_INTEGER_SI
JSR COMPACT168
JSR COMPACT170
JSR COMPACT47
LINE_59290:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_44
JMP (JUMP_TARGET)
RBEQ_44:
LINE_59300:
JSR COMPACT23
LDY VAR_MR%
LDA VAR_MR%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP45
STA JUMP_TARGET
LDA #>FORLOOP45
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP45:
JSR COMPACT80
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT26
JSR COMPACT81
LDA #<FORLOOP46
STA JUMP_TARGET
LDA #>FORLOOP46
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP46:
LINE_59310:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT48
JSR COMPACT95
JSR POPREAL2X
JSR FASTFADDARG
JSR FACXREG
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
JSR ARRAYACCESS_INTEGER_SI
JSR COMPACT168
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT48
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT54
JSR COMPACT112
JSR COMPACT60
JSR ARRAYSTORE_INT_INTEGER
LINE_59315:
LDA #<CONST_66R
LDY #>CONST_66R
JSR REALFAC
LDA #<VAR_II
LDY #>VAR_II
JSR CMPFAC
BEQ LT_LT_EQ160
ROL
BCC LT_LT160
LT_LT_EQ160:
LDA #0
JMP LT_SKIP160
LT_LT160:
LDA #$1
LT_SKIP160:
COMP_SKP241:
BNE LINE_NSKIP400
JMP LINE_SKIP400
LINE_NSKIP400:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT48
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT54
LDA #<VAR_LX$[]
LDY #>VAR_LX$[]
JSR COMPACT109
JSR COMPACT13
JSR GOSUB
JSR LINE_59950
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT48
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT51
JSR PUSHREAL
JSR COMPACT17
JSR POPREALXREG
JSR COMPACT121
JSR ARRAYSTORE_STRING
LINE_SKIP400:
LINE_59320:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_45
JMP (JUMP_TARGET)
RBEQ_45:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_46
JMP (JUMP_TARGET)
RBEQ_46:
LINE_59330:
LDA VAR_RN$
LDY VAR_RN$+1
JSR COMPACT13
JSR GOSUB
JSR LINE_59950
LDA VAR_A$
LDY VAR_A$+1
JSR COMPACT0
LINE_59335:
LDY VAR_OD%
LDA VAR_OD%+1
JSR COMPACT110
LDY VAR_MX%
LDA VAR_MX%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP47
STA JUMP_TARGET
LDA #>FORLOOP47
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP47:
JSR COMPACT98
JSR COMPACT117
JSR COMPACT100
JSR NEXT
LDA A_REG
BNE RBEQ_47
JMP (JUMP_TARGET)
RBEQ_47:
JSR COMPACT21
LDY VAR_OD%
LDA VAR_OD%+1
JSR ICMP
EQ_EQ161:
EQ_SKIP161:
COMP_SKP245:
BNE LINE_SKIP401
LINE_NSKIP401:
JMP LINE_59370
LINE_SKIP401:
LINE_59340:
JSR COMPACT23
LDY VAR_OD%
LDA VAR_OD%+1
JSR COMPACT28
LDA #<FORLOOP48
STA JUMP_TARGET
LDA #>FORLOOP48
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP48:
LINE_59350:
JSR COMPACT117
JSR COMPACT109
JSR COMPACT13
JSR GOSUB
JSR LINE_59950
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR COMPACT17
JSR POPREALXREG
JSR COMPACT118
JSR ARRAYSTORE_STRING
LINE_59360:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_48
JMP (JUMP_TARGET)
RBEQ_48:
LINE_59370:
JSR COMPACT139
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTBRKWL
LINE_59380:
JSR COMPACT21
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ162:
EQ_SKIP162:
COMP_SKP247:
BNE LINE_SKIP402
LINE_NSKIP402:
JSR GOSUB
JSR LINE_63300
JSR GOSUB
JSR LINE_40100
LINE_SKIP402:
LINE_59390:
JSR COMPACT11
LDA #<VAR_LC$
LDY #>VAR_LC$
JSR COPYSTRING
JMP RETURN
LINE_59500:
LINE_59510:
JSR LINEBREAK
JSR GOSUB
JSR LINE_62600
JSR GOSUB
JSR LINE_62500
JMP RETURN
LINE_59800:
LINE_59810:
JSR LINEBREAK
LDA #<CONST_121
LDY #>CONST_121
JSR STROUTWL
JSR COMPACT231
JSR COPY2_XYA_XREG
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
JMP LINE_49100
LINE_59850:
LINE_59855:
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDA #<CONST_116R
LDY #>CONST_116R
JSR REALFAC
LDA #<VAR_P
LDY #>VAR_P
JSR CMPFAC
ROL
BCS GT_GT163
LDA #0
JMP GT_SKIP163
GT_GT163:
LDA #$1
GT_SKIP163:
COMP_SKP248:
BEQ LINE_SKIP403
LINE_NSKIP403:
LDA #46
JSR SINGLECHROUTMAX
JSR COMPACT83
LINE_SKIP403:
LINE_59860:
LDA #<CONST_122R
LDY #>CONST_122R
JSR COPY2_XYA_YREG
JSR COMPACT231
JSR COPY2_XYA_XREG
JSR YREGFAC
JSR XREGARG
JSR FASTAND
JSR FACXREG
LDA X_REG
BNE NEQ_NEQ164
LDA #0
JMP NEQ_SKIP164
NEQ_NEQ164:
LDA #$1
NEQ_SKIP164:
COMP_SKP249:
BEQ LINE_SKIP404
LINE_NSKIP404:
JMP LINE_59800
LINE_SKIP404:
LINE_59870:
JMP RETURN
LINE_59900:
LINE_59910:
JSR COMPACT21
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
BEQ EQ_EQ165
LDA #0
JMP EQ_SKIP165
EQ_EQ165:
LDA #$1
EQ_SKIP165:
COMP_SKP250:
BNE LINE_NSKIP405
JMP LINE_SKIP405
LINE_NSKIP405:
JSR COMPACT181
JSR COMPACTMAX
JSR COMPACT129
JSR INPUTNUMBERCHANNEL
JSR YREGFAC
JSR FACINT
STY VAR_C%
STA VAR_C%+1
JMP LINE_59925
LINE_SKIP405:
LINE_59920:
JSR LOCKCHANNEL
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
LDY VAR_C%
LDA VAR_C%+1
JSR INTFAC
JSR FACXREG
JSR COMPACT129
JSR INTOUTCHANNEL
LDA #<CONST_84
LDY #>CONST_84
STA A_REG
STY A_REG+1
JSR STROUTCHANNEL
JSR LINEBREAKCHANNEL
JSR UNLOCKCHANNEL
LINE_59925:
JSR GOSUB
JSR LINE_59850
LINE_59930:
JMP RETURN
LINE_59950:
LINE_59960:
JSR COMPACT21
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ166:
EQ_SKIP166:
COMP_SKP251:
BNE LINE_SKIP406
LINE_NSKIP406:
JSR GOSUB
JSR LINE_61700
JMP LINE_59980
LINE_SKIP406:
LINE_59965:
LDA #<CONST_11
LDY #>CONST_11
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP252:
BEQ LINE_SKIP407
LINE_NSKIP407:
LDA #<CONST_73
LDY #>CONST_73
JSR COMPACT13
LINE_SKIP407:
LINE_59970:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ167:
EQ_SKIP167:
COMP_SKP253:
BNE LINE_SKIP408
LINE_NSKIP408:
JSR LOCKCHANNEL
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
JSR COMPACT17
JSR COMPACT129
JSR STROUTCHANNEL
JSR LINEBREAKCHANNEL
JSR UNLOCKCHANNEL
LINE_SKIP408:
LINE_59980:
JSR GOSUB
JSR LINE_59850
LDA #<CONST_73
LDY #>CONST_73
STA B_REG
STY B_REG+1
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP254:
BEQ LINE_SKIP409
LINE_NSKIP409:
JSR COMPACT12
LINE_SKIP409:
LINE_59990:
JMP RETURN
LINE_60000:
LINE_60002:
LDA #<CONST_123
LDY #>CONST_123
JSR STROUTBRKWL
LINE_60005:
LDY #30
LDA #0
STY VAR_MX%
STA VAR_MX%+1
LDY #35
LDA #0
STY VAR_MR%
STA VAR_MR%+1
LDY #51
LDA #0
STY VAR_MI%
STA VAR_MI%+1
LDY #9
LDA #0
STY VAR_XO%
STA VAR_XO%+1
JSR COMPACTMAX
LDA #<CONST_127
LDY #>CONST_127
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #13
JSR CHRINT
JSR POPINT2B
JSR CONCAT
JSR COMPACT120
LDA #<VAR_CB$
LDY #>VAR_CB$
JSR COPYSTRING
LDY #0
TYA
STY VAR_LR%
STA VAR_LR%+1
LDY #21
LDA #0
STY VAR_MO%
STA VAR_MO%+1
LDY #6
LDA #0
STY VAR_OX%
STA VAR_OX%+1
LINE_60006:
LDA #<CONST_129
LDY #>CONST_129
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_AL$
LDY #>VAR_AL$
JSR COPYSTRING
LDY #5
LDA #0
STY VAR_MS%
STA VAR_MS%+1
LDA #<CONST_130
LDY #>CONST_130
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_FI$
LDY #>VAR_FI$
JSR COPYSTRING
LDX #4
dcloop2392_1:
LDA CONST_131,X
STA VAR_BA,X
LDA VAR_BA,X
STA VAR_AD,X
DEX
BPL dcloop2392_1
LINE_60010:
LINE_60020:
LINE_60030:
LINE_60035:
LINE_60040:
LINE_60050:
LINE_60055:
LINE_60060:
LINE_60070:
LINE_60080:
LINE_60090:
LINE_60100:
LINE_60110:
LINE_60120:
LINE_60130:
JSR COMPACT23
LDY VAR_MR%
LDA VAR_MR%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP49
STA JUMP_TARGET
LDA #>FORLOOP49
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP49:
JSR COMPACT84
JSR COMPACT26
JSR COMPACT85
LDA #<FORLOOP50
STA JUMP_TARGET
LDA #>FORLOOP50
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP50:
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT48
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT54
JSR COMPACT174
JSR COMPACT85
JSR NEXT
LDA A_REG
BNE RBEQ_49
JMP (JUMP_TARGET)
RBEQ_49:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_50
JMP (JUMP_TARGET)
RBEQ_50:
LINE_60140:
JSR COMPACT23
LDA #<CONST_52R
LDY #>CONST_52R
JSR COMPACT30
LDA #<FORLOOP51
STA JUMP_TARGET
LDA #>FORLOOP51
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP51:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR READSTR
JSR POPREALXREG
LDA #<VAR_DR$[]
LDY #>VAR_DR$[]
JSR COMPACT100
JSR NEXT
LDA A_REG
BNE RBEQ_51
JMP (JUMP_TARGET)
RBEQ_51:
LINE_60150:
LINE_60160:
LINE_60170:
LINE_60180:
LINE_60190:
JSR COMPACT11
LDA #<VAR_RL$
LDY #>VAR_RL$
JSR COPYSTRING
LINE_60200:
LDY #0
TYA
STY VAR_PO%
STA VAR_PO%+1
LINE_60900:
JMP RETURN
LINE_61000:
LINE_61010:
JSR COMPACT11
LDA #<VAR_SX$
LDY #>VAR_SX$
JSR COPYSTRING
LDX #4
dcloop2521_1:
LDA CONST_2R,X
STA VAR_LI,X
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop2521_1
JSR COMPACT232
JSR LEN
JSR COMPACT29
LDA #<FORLOOP52
STA JUMP_TARGET
LDA #>FORLOOP52
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP52:
LINE_61020:
JSR COMPACTMAX
LDA #<CONST_132
LDY #>CONST_132
JSR COMPACT116
JSR COPY2_XYA_CREG
JSR COMPACT175
LDY #1
JSR MIDCONST
JSR POPINT2B
JSR SNEQ
LDA X_REG
COMP_SKP258:
BEQ LINE_SKIP410
LINE_NSKIP410:
JMP LINE_61040
LINE_SKIP410:
LINE_61030:
JSR GOSUB
JSR LINE_61100
JSR COMPACTMAX
LDA #<CONST_133
LDY #>CONST_133
STA B_REG
STY B_REG+1
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT19
JSR COMPACT131
JSR COMPACT177
LDX #<VAR_LI
LDY #>VAR_LI
JSR FACMEM
LINE_61040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_52
JMP (JUMP_TARGET)
RBEQ_52:
JSR ONETOFAC
LDA #<VAR_LI
LDY #>VAR_LI
JSR CMPFAC
EQ_EQ168:
EQ_SKIP168:
COMP_SKP260:
BNE LINE_SKIP411
LINE_NSKIP411:
JMP RETURN
LINE_SKIP411:
LINE_61050:
JSR GOSUB
JSR LINE_61100
LINE_61060:
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT102
JMP RETURN
LINE_61100:
LINE_61110:
JSR COMPACTMAX
LDA #<VAR_LI
LDY #>VAR_LI
JSR COPY2_XYA_CREG
TXA
LDY #>C_REG
JSR REALFACPUSH
LDA #<VAR_LI
LDY #>VAR_LI
JSR REALFAC
LDA #<VAR_I
LDY #>VAR_I
JSR FASTFSUBMEM
JSR PUSHREAL
JSR COMPACT175
JSR COMPACT128
JSR MID
JSR COMPACT122
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT19
JSR COMPACT131
JMP RETURN
LINE_61200:
LINE_61205:
LDA #<CONST_134
LDY #>CONST_134
JSR STROUTWL
LINE_61206:
JSR COMPACT80
LDY #0
TYA
STY VAR_J%
STA VAR_J%+1
LINE_61220:
LDA #<CONST_135
LDY #>CONST_135
JSR COMPACT132
LINE_61230:
JSR GOSUB
JSR LINE_61700
JSR COMPACT137
JSR FACXREG
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LINE_61250:
JSR COMPACT11
LDA #<VAR_ID$
LDY #>VAR_ID$
JSR COPYSTRING
LDX #4
dcloop2521_3:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop2521_3
JSR COMPACT69
JSR COMPACT29
LDA #<FORLOOP53
STA JUMP_TARGET
LDA #>FORLOOP53
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP53:
LINE_61260:
JSR COMPACTMAX
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_CREG
JSR COMPACT68
LDY #1
JSR MIDCONST
JSR COMPACT120
LDA #<VAR_SX$
LDY #>VAR_SX$
JSR COPYSTRING
LDA #<CONST_132
LDY #>CONST_132
STA B_REG
STY B_REG+1
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT136
COMP_SKP261:
BEQ LINE_SKIP412
LINE_NSKIP412:
JMP LINE_61280
LINE_SKIP412:
LINE_61270:
JSR COMPACTMAX
LDA VAR_SX$
LDY VAR_SX$+1
STA B_REG
STY B_REG+1
LDA VAR_ID$
LDY VAR_ID$+1
JSR COMPACT19
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_ID$
LDY #>VAR_ID$
JSR COPYSTRING
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_53
JMP (JUMP_TARGET)
RBEQ_53:
LINE_61280:
LDA VAR_ID$
LDY VAR_ID$+1
STA B_REG
STY B_REG+1
JSR VAL
JSR XREGFAC
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
JSR COMPACTMAX
JSR COMPACT177
JSR COMPACT15
JSR COMPACT68
JSR COMPACT128
JSR MID
JSR COMPACT120
LDA #<VAR_TF$
LDY #>VAR_TF$
JSR COPYSTRING
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDY #1
LDA #0
STY AS_TMP
STA AS_TMP+1
JSR COMPACT44
JSR ARRAYSTORE_INT_INTEGER
LINE_61290:
LDA #<CONST_136
LDY #>CONST_136
STA B_REG
STY B_REG+1
LDA VAR_TF$
LDY VAR_TF$+1
JSR COMPACT136
COMP_SKP263:
BEQ LINE_SKIP413
LINE_NSKIP413:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
JSR COMPACT44
JSR ARRAYSTORE_INT_INTEGER
LINE_SKIP413:
LINE_61300:
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
JSR COMPACTMAX
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
JSR COMPACT69
JSR COMPACT179
JSR COMPACT68
JSR RIGHT
JSR POPREALXREG
JSR COMPACT36
JSR ARRAYSTORE_STRING
LINE_61302:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
JSR COMPACT37
LDA A_REG
LDY A_REG+1
JSR COMPACT103
JSR LINE_63100
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
JSR COMPACT135
JSR POPREALXREG
LDA #<VAR_IL$[]
LDY #>VAR_IL$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDA #46
JSR SINGLECHROUTMAX
LINE_61305:
JSR GOSUB
JSR LINE_61400
LINE_61310:
JSR COMPACT138
JSR COMPACT90
EQ_EQ169:
EQ_SKIP169:
COMP_SKP264:
BNE LINE_SKIP414
LINE_NSKIP414:
JMP LINE_61330
LINE_SKIP414:
LINE_61320:
LDY VAR_J%
LDA VAR_J%+1
JSR SUPERFIINX
STY VAR_J%
STA VAR_J%+1
JMP LINE_61230
LINE_61330:
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTBRKWL
LINE_61340:
LDY VAR_J%
LDA VAR_J%+1
STY VAR_TI%
STA VAR_TI%+1
JSR COMPACT139
JMP RETURN
LINE_61400:
LINE_61405:
LDY #0
TYA
STY VAR_T%
STA VAR_T%+1
LDX #4
dcloop2521_4:
LDA VAR_AD,X
STA VAR_SD,X
DEX
BPL dcloop2521_4
JSR ONETOFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR COMPACT10
LINE_61410:
JSR GOSUB
JSR LINE_61700
JSR COMPACT107
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP265:
BEQ LINE_SKIP415
LINE_NSKIP415:
JMP LINE_61460
LINE_SKIP415:
LINE_61415:
JSR COMPACT69
LDA #0
LDY TMP2_ZP
STY VAR_PP%
STA VAR_PP%+1
JSR INTFAC
JSR FACYREG
LDY VAR_T%
LDA VAR_T%+1
JSR COMPACT91
JSR FASTFADDMEM
JSR FACINT
STY VAR_T%
STA VAR_T%+1
LDA #$28
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
BEQ LT_LT_EQ170
ROL
BCC LT_LT170
LT_LT_EQ170:
LDA #0
JMP LT_SKIP170
LT_LT170:
LDA #$1
LT_SKIP170:
COMP_SKP266:
BEQ LINE_SKIP416
LINE_NSKIP416:
LDY VAR_T%
LDA VAR_T%+1
JSR SUPERFIINX
STY VAR_T%
STA VAR_T%+1
LINE_SKIP416:
LINE_61420:
JSR COMPACT104
LINE_61430:
LDX #4
dcloop2650_1:
LDA CONST_2R,X
STA VAR_P,X
DEX
BPL dcloop2650_1
LDY VAR_PP%
LDA VAR_PP%+1
JSR COMPACT14
JSR COMPACT85
LDA #<FORLOOP54
STA JUMP_TARGET
LDA #>FORLOOP54
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP54:
JSR COMPACTMAX
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_CREG
JSR COMPACT175
LDY #1
JSR MIDCONST
LDA A_REG
LDY A_REG+1
JSR COMPACT13
LINE_61440:
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR FASTFADDMEM
JSR FACXREG
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR COMPACT150
JSR COMPACT68
JSR ASC
JSR POPREAL
JSR FACWORD
STY MOVBSELF14+1
STA MOVBSELF14+2
JSR XREGFAC
JSR FACWORD
MOVBSELF14:
STY $FFFF
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_54
JMP (JUMP_TARGET)
RBEQ_54:
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFSUBMEM
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDA #$28
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PP%
LDA VAR_PP%+1
JSR ICMP
BEQ LT_LT_EQ171
ROL
BCC LT_LT171
LT_LT_EQ171:
LDA #0
JMP LT_SKIP171
LT_LT171:
LDA #$1
LT_SKIP171:
COMP_SKP268:
BNE LINE_NSKIP417
JMP LINE_SKIP417
LINE_NSKIP417:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
LDA #<VAR_AD
LDY #>VAR_AD
JSR COMPACT88
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF15+1
STA MOVBSELF15+2
LDA #$D
MOVBSELF15:
STA $FFFF
JSR COMPACT173
LINE_SKIP417:
LINE_61450:
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR COMPACT10
LDA #<CONST_137
LDY #>CONST_137
JSR REALFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR CMPFAC
ROL
BCS GT_GT172
LDA #0
JMP GT_SKIP172
GT_GT172:
LDA #$1
GT_SKIP172:
COMP_SKP269:
BEQ LINE_SKIP418
LINE_NSKIP418:
JMP LINE_42420
LINE_SKIP418:
LINE_61455:
JMP LINE_61410
LINE_61460:
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
LDA #<VAR_BA
LDY #>VAR_BA
JSR REALFAC
LDA #<VAR_SD
LDY #>VAR_SD
JSR FASTFSUBMEM
JSR FACYREG
JSR POPREALXREG
LDA #<VAR_ID%[]
LDY #>VAR_ID%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
JSR ONETOFAC
LDA #<VAR_AD
LDY #>VAR_AD
JSR FASTFSUBMEM
LDX #<VAR_AD
LDY #>VAR_AD
JSR FACMEM
LDA #<VAR_SD
LDY #>VAR_SD
JSR REALFACPUSH
LDY VAR_T%
LDA VAR_T%+1
JSR FIDEX
JSR POPREAL
JSR FACWORD
STY MOVBSELF16+1
STA MOVBSELF16+2
JSR XREGFAC
JSR FACWORD
MOVBSELF16:
STY $FFFF
JMP RETURN
LINE_61500:
LINE_61510:
LDA #<CONST_138
LDY #>CONST_138
JSR STROUTWL
LINE_61520:
JSR COMPACT83
LDA #<CONST_139
LDY #>CONST_139
JSR COMPACT132
LINE_61530:
JSR GOSUB
JSR LINE_61700
JSR COMPACT68
JSR VAL
LDY #>X_REG
LDA #<X_REG
JSR REALFAC
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LINE_61540:
JSR GOSUB
JSR LINE_61700
JSR COMPACT68
JSR VAL
JSR XREGFAC
LDX #<VAR_PP
LDY #>VAR_PP
JSR FACMEM
LINE_61545:
JSR GOSUB
JSR LINE_61700
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
JSR COMPACT17
JSR POPREALXREG
LDA #<VAR_CV$[]
LDY #>VAR_CV$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LINE_61550:
JSR COMPACT23
JSR ONETOFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFSUBMEM
JSR COMPACT15
JSR COMPACT31
LDA #<FORLOOP55
STA JUMP_TARGET
LDA #>FORLOOP55
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP55:
JSR GOSUB
JSR LINE_61700
LINE_61560:
JSR COMPACT95
LDY #4
STY A_REG
JSR COMPACT97
LDA #<VAR_II
LDY #>VAR_II
JSR REALFAC
JSR COMPACT51
JSR PUSHREAL
JSR COMPACT17
JSR POPREALXREG
LDA #<VAR_CM$[]
LDY #>VAR_CM$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDA #46
JSR SINGLECHROUTMAX
LINE_61570:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_55
JMP (JUMP_TARGET)
RBEQ_55:
JSR COMPACT138
JSR COMPACT90
NEQ_NEQ173:
NEQ_SKIP173:
COMP_SKP271:
BEQ LINE_SKIP419
LINE_NSKIP419:
JSR COMPACT173
JMP LINE_61530
LINE_SKIP419:
LINE_61580:
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTBRKWL
LINE_61590:
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
JSR FACINT
STY VAR_TB%
STA VAR_TB%+1
JSR COMPACT139
LINE_61600:
LDA #<CONST_140
LDY #>CONST_140
JSR COMPACT132
JSR COMPACT181
JSR COMPACTMAX
JSR COMPACT129
JSR INPUTNUMBERCHANNEL
JSR YREGFAC
JSR FACINT
STY VAR_LR%
STA VAR_LR%+1
JSR COMPACT139
JMP RETURN
LINE_61700:
LINE_61710:
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
JSR CLEARQUEUE
JSR COMPACTMAX
JSR COMPACT129
JSR INPUTSTRCHANNEL
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JMP RETURN
LINE_62000:
LINE_62005:
JSR GOSUB
JSR LINE_62100
LDA #<CONST_6R
LDY #>CONST_6R
JSR COMPACT164
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
LDA VAR_RN$
LDY VAR_RN$+1
JSR COMPACT130
JSR GOSUB
JSR LINE_61700
JSR COMPACT68
JSR VAL
JSR XREGFAC
JSR FACINT
STY VAR_RD%
STA VAR_RD%+1
LDY #15
STY 646
LINE_62008:
JSR GOSUB
JSR LINE_61700
JSR COMPACT101
LDA #<VAR_RL$
LDY #>VAR_RL$
JSR COPYSTRING
LINE_62010:
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFACPUSH
JSR CLEARQUEUE
JSR COMPACTMAX
JSR COMPACT129
JSR INPUTSTRCHANNEL
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JSR GOSUB
JSR LINE_59860
LINE_62020:
JSR COMPACT107
JSR COMPACT17
JSR SEQ
LDA X_REG
COMP_SKP272:
BEQ LINE_SKIP420
LINE_NSKIP420:
LDY VAR_MD%
LDA VAR_MD%+1
JSR SUPERFIINX
STY VAR_MD%
STA VAR_MD%+1
JMP LINE_62050
LINE_SKIP420:
LINE_62030:
JSR COMPACT104
LDA VAR_TX$
LDY VAR_TX$+1
JSR COMPACT13
LINE_62040:
LDY VAR_MD%
LDA VAR_MD%+1
JSR INTFAC
JSR FACWORD
STY TMP_ZP
ON5SUB0:
LDA #1
CMP TMP_ZP
COMP_SKP273:
BNE ON5SUB1
JSR GOSUB
JSR LINE_62200
JMP GSKIPON5
ON5SUB1:
LDA #2
CMP TMP_ZP
COMP_SKP274:
BNE ON5SUB2
JSR GOSUB
JSR LINE_62300
JMP GSKIPON5
ON5SUB2:
LDA #3
CMP TMP_ZP
COMP_SKP275:
BNE ON5SUB3
JSR GOSUB
JSR LINE_62400
JMP GSKIPON5
ON5SUB3:
LDA #4
CMP TMP_ZP
COMP_SKP276:
BNE GSKIPON5
JSR GOSUB
JSR LINE_42000
JMP GSKIPON5
GSKIPON5:
LINE_62050:
JSR COMPACT138
JSR COMPACT90
EQ_EQ174:
EQ_SKIP174:
COMP_SKP277:
BNE LINE_SKIP421
LINE_NSKIP421:
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_YREG
LDA #<Y_REG
LDY #>Y_REG
STY TMP3_ZP+1
LDX #<X_REG
LDY #>X_REG
JSR COPY2_XYA
JSR CLOSE
JMP RETURN
LINE_SKIP421:
LINE_62060:
JMP LINE_62010
LINE_62100:
LINE_62110:
LDY #1
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LDY #0
TYA
STY VAR_PL%
STA VAR_PL%+1
LDY #0
TYA
STY VAR_EL%
STA VAR_EL%+1
LDY #0
TYA
STY VAR_IL%
STA VAR_IL%+1
LDY #0
TYA
STY VAR_OC%
STA VAR_OC%+1
LDY #0
TYA
STY VAR_XC%
STA VAR_XC%+1
LDY #0
TYA
STY VAR_TC%
STA VAR_TC%+1
LINE_62120:
JSR COMPACT23
LDY VAR_PL%
LDA VAR_PL%+1
JSR COMPACT28
LDA #<FORLOOP56
STA JUMP_TARGET
LDA #>FORLOOP56
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP56:
JSR COMPACT98
JSR COMPACT182
JSR COMPACT100
JSR NEXT
LDA A_REG
BNE RBEQ_56
JMP (JUMP_TARGET)
RBEQ_56:
LINE_62130:
JSR COMPACT23
LDY VAR_XO%
LDA VAR_XO%+1
JSR COMPACT14
JSR COMPACT31
LDA #<FORLOOP57
STA JUMP_TARGET
LDA #>FORLOOP57
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP57:
JSR COMPACT80
LDY VAR_OX%
LDA VAR_OX%+1
JSR COMPACT14
JSR COMPACT81
LDA #<FORLOOP58
STA JUMP_TARGET
LDA #>FORLOOP58
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP58:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT219
JSR PUSHREAL
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT51
JSR COMPACT99
JSR NEXT
LDA A_REG
BNE RBEQ_57
JMP (JUMP_TARGET)
RBEQ_57:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_58
JMP (JUMP_TARGET)
RBEQ_58:
LINE_62140:
JMP RETURN
LINE_62200:
LINE_62210:
LDY VAR_PL%
LDA VAR_PL%+1
JSR INTFAC
JSR PUSHREAL
JSR COMPACT17
JSR POPREALXREG
LDA #<VAR_RD$[]
LDY #>VAR_RD$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LINE_62220:
JSR COMPACT69
LDA #$28
JSR COMPACT66
EQ_EQ175:
EQ_SKIP175:
COMP_SKP281:
BNE LINE_SKIP422
LINE_NSKIP422:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTWL
JMP LINE_62240
LINE_SKIP422:
LINE_62230:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
LINE_62240:
LDY VAR_PL%
LDA VAR_PL%+1
JSR SUPERFIINX
STY VAR_PL%
STA VAR_PL%+1
JMP RETURN
LINE_62300:
LINE_62305:
JSR COMPACT69
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ176:
EQ_SKIP176:
COMP_SKP282:
BNE LINE_SKIP423
LINE_NSKIP423:
JMP RETURN
LINE_SKIP423:
LINE_62310:
LDX #4
dcloop2779_1:
LDA CONST_2R,X
STA VAR_II,X
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop2779_1
JSR COMPACT69
JSR COMPACT29
LDA #<FORLOOP59
STA JUMP_TARGET
LDA #>FORLOOP59
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP59:
LINE_62320:
JSR COMPACTMAX
LDA #<CONST_133
LDY #>CONST_133
JSR COMPACT116
JSR COPY2_XYA_CREG
JSR COMPACT68
LDY #1
JSR MIDCONST
JSR POPINT2B
JSR SEQ
LDA X_REG
COMP_SKP283:
BEQ LINE_SKIP424
LINE_NSKIP424:
LDX #4
dcloop2779_3:
LDA VAR_I,X
STA VAR_II,X
LDA CONST_53R,X
STA VAR_I,X
DEX
BPL dcloop2779_3
LINE_SKIP424:
LINE_62330:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_59
JMP (JUMP_TARGET)
RBEQ_59:
LINE_62340:
LDY VAR_EL%
LDA VAR_EL%+1
JSR INTFAC
JSR PUSHREAL
JSR COMPACTMAX
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
JSR COMPACT69
JSR COMPACT179
JSR COMPACT68
JSR RIGHT
JSR POPREALXREG
LDA #<VAR_EX$[]
LDY #>VAR_EX$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LINE_62350:
JSR COMPACT183
JSR COMPACTMAX
JSR ONETOFAC
LDA #<VAR_II
LDY #>VAR_II
JSR FASTFSUBMEM
LDX #<C_REG
LDY #>C_REG
JSR FACMEM
JSR COMPACT68
JSR LEFT
JSR POPREALXREG
LDA #<VAR_XN$[]
LDY #>VAR_XN$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LINE_62360:
JSR COMPACT183
JSR COMPACTMAX
JSR COMPACT137
JSR COMPACT150
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT68
JSR COMPACT128
JSR MID
JSR COMPACT122
JSR VAL
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_LK%[]
LDY #>VAR_LK%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LINE_62370:
LDY VAR_EL%
LDA VAR_EL%+1
JSR SUPERFIINX
STY VAR_EL%
STA VAR_EL%+1
JMP RETURN
LINE_62400:
LINE_62405:
JSR COMPACT69
JSR COMPACT21
LDY TMP2_ZP
LDA #0
JSR ICMP
EQ_EQ177:
EQ_SKIP177:
COMP_SKP285:
BNE LINE_SKIP425
LINE_NSKIP425:
JMP RETURN
LINE_SKIP425:
LINE_62410:
LDY VAR_IL%
LDA VAR_IL%+1
JSR INTFAC
JSR PUSHREAL
JSR COMPACT17
JSR POPREALXREG
LDA #<VAR_RI$[]
LDY #>VAR_RI$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LINE_62420:
LDY VAR_IL%
LDA VAR_IL%+1
JSR SUPERFIINX
STY VAR_IL%
STA VAR_IL%+1
JMP RETURN
LINE_62500:
LINE_62510:
JSR GOSUB
JSR LINE_62900
LINE_62520:
JSR COMPACT21
LDY VAR_XC%
LDA VAR_XC%+1
JSR ICMP
EQ_EQ178:
EQ_SKIP178:
COMP_SKP286:
BNE LINE_SKIP426
LINE_NSKIP426:
JMP RETURN
LINE_SKIP426:
LINE_62530:
LDY #7
STY 646
LDA #<CONST_141
LDY #>CONST_141
JSR STROUTWL
LINE_62540:
JSR COMPACT23
LDY VAR_XC%
LDA VAR_XC%+1
JSR COMPACT28
LDA #<FORLOOP60
STA JUMP_TARGET
LDA #>FORLOOP60
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP60:
LINE_62550:
JSR COMPACT123
JSR COMPACT119
BCS GT_GT179
LDA #0
JMP GT_SKIP179
GT_GT179:
LDA #$1
GT_SKIP179:
COMP_SKP287:
BEQ LINE_SKIP427
LINE_NSKIP427:
LDA #<CONST_72
LDY #>CONST_72
JSR STROUTWL
LINE_SKIP427:
LINE_62560:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_XP$[]
LDY #>VAR_XP$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR STROUT
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_60
JMP (JUMP_TARGET)
RBEQ_60:
JSR LINEBREAK
JMP RETURN
LINE_62600:
LINE_62610:
JSR GOSUB
JSR LINE_62750
LINE_62660:
JSR COMPACT21
LDY VAR_TC%
LDA VAR_TC%+1
JSR ICMP
EQ_EQ180:
EQ_SKIP180:
COMP_SKP289:
BNE LINE_SKIP428
LINE_NSKIP428:
JMP RETURN
LINE_SKIP428:
LINE_62670:
LDY #14
STY 646
LDA #<CONST_143
LDY #>CONST_143
JSR STROUTWL
LINE_62680:
JSR COMPACT12
LDX #4
dcloop2908_1:
LDA CONST_144R,X
STA VAR_II,X
DEX
BPL dcloop2908_1
JSR COMPACT23
LDY VAR_TC%
LDA VAR_TC%+1
JSR COMPACT28
LDA #<FORLOOP61
STA JUMP_TARGET
LDA #>FORLOOP61
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP61:
JSR COMPACT39
JSR ARRAYACCESS_INTEGER_S
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
JSR COMPACT109
JSR COMPACT124
LINE_62690:
JSR COMPACT123
JSR COMPACT119
BCS GT_GT181
LDA #0
JMP GT_SKIP181
GT_GT181:
LDA #$1
GT_SKIP181:
COMP_SKP290:
BNE LINE_NSKIP429
JMP LINE_SKIP429
LINE_NSKIP429:
JSR COMPACTMAX
JSR COMPACT127
JSR COMPACT18
JSR COMPACT13
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFAC
LDA #<VAR_II
LDY #>VAR_II
JSR FASTFADDMEM
JSR FACXREG
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LINE_SKIP429:
LINE_62700:
JSR COMPACT126
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT9
JSR FACXREG
LDA #<CONST_145R
LDY #>CONST_145R
JSR COMPACT7
ROL
BCS GT_GT182
LDA #0
JMP GT_SKIP182
GT_GT182:
LDA #$1
GT_SKIP182:
COMP_SKP291:
BNE LINE_NSKIP430
JMP LINE_SKIP430
LINE_NSKIP430:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
JSR COMPACT12
JSR COMPACT80
LINE_SKIP430:
LINE_62710:
JSR COMPACTMAX
JSR COMPACT125
JSR COMPACT18
JSR COMPACT13
JSR COMPACT126
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT9
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_61
JMP (JUMP_TARGET)
RBEQ_61:
LINE_62720:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
JMP RETURN
LINE_62750:
LINE_62752:
LDY #0
TYA
STY VAR_TC%
STA VAR_TC%+1
JSR COMPACT21
LDY VAR_IL%
LDA VAR_IL%+1
JSR ICMP
EQ_EQ183:
EQ_SKIP183:
COMP_SKP293:
BNE LINE_SKIP431
LINE_NSKIP431:
JMP LINE_62795
LINE_SKIP431:
LINE_62755:
JSR COMPACT23
LDY VAR_IL%
LDA VAR_IL%+1
JSR COMPACT28
LDA #<FORLOOP62
STA JUMP_TARGET
LDA #>FORLOOP62
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP62:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RI$[]
LDY #>VAR_RI$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR COMPACT224
JSR VAL
JSR XREGFAC
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
JSR COMPACT78
JSR COMPACT22
EQ_EQ184:
EQ_SKIP184:
COMP_SKP294:
BNE LINE_SKIP432
LINE_NSKIP432:
JMP LINE_62775
LINE_SKIP432:
LINE_62760:
JSR COMPACT80
JSR COMPACT24
JSR COMPACT81
LDA #<FORLOOP63
STA JUMP_TARGET
LDA #>FORLOOP63
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP63:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT35
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT7
EQ_EQ185:
EQ_SKIP185:
COMP_SKP295:
BNE LINE_SKIP433
LINE_NSKIP433:
JSR COMPACT215
LDY VAR_IC%
LDA VAR_IC%+1
JSR COMPACT185
LINE_SKIP433:
LINE_62770:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_62
JMP (JUMP_TARGET)
RBEQ_62:
JSR COMPACT40
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
EQ_EQ186:
EQ_SKIP186:
COMP_SKP297:
BNE LINE_SKIP434
LINE_NSKIP434:
JMP LINE_62790
LINE_SKIP434:
LINE_62775:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDA #<VAR_RS%[]
LDY #>VAR_RS%[]
JSR ARRAYACCESS_INTEGER_S
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
EQ_EQ187:
EQ_SKIP187:
COMP_SKP298:
BNE LINE_SKIP435
LINE_NSKIP435:
JMP LINE_62790
LINE_SKIP435:
LINE_62780:
LDY VAR_TC%
LDA VAR_TC%+1
JSR INTFAC
JSR PUSHREAL
JSR POPREALXREG
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDY VAR_TC%
LDA VAR_TC%+1
JSR SUPERFIINX
STY VAR_TC%
STA VAR_TC%+1
LINE_62790:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_63
JMP (JUMP_TARGET)
RBEQ_63:
LINE_62795:
JSR GOSUB
JSR LINE_41300
JMP RETURN
LINE_62900:
LINE_62905:
LDY #0
TYA
STY VAR_XC%
STA VAR_XC%+1
JSR COMPACT21
LDY VAR_EL%
LDA VAR_EL%+1
JSR ICMP
EQ_EQ188:
EQ_SKIP188:
COMP_SKP300:
BNE LINE_SKIP436
LINE_NSKIP436:
JMP RETURN
LINE_SKIP436:
LINE_62910:
JSR COMPACT23
LDY VAR_EL%
LDA VAR_EL%+1
JSR COMPACT28
LDA #<FORLOOP64
STA JUMP_TARGET
LDA #>FORLOOP64
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP64:
LDY #1
LDA #0
STY VAR_P%
STA VAR_P%+1
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_LK%[]
LDY #>VAR_LK%[]
JSR ARRAYACCESS_INTEGER_S
LDA X_REG
BEQ EQ_EQ189
LDA #0
JMP EQ_SKIP189
EQ_EQ189:
LDA #$1
EQ_SKIP189:
COMP_SKP301:
BEQ LINE_SKIP437
LINE_NSKIP437:
JMP LINE_62940
LINE_SKIP437:
LINE_62920:
LDY #0
TYA
STY VAR_P%
STA VAR_P%+1
JSR COMPACT80
LDA #<CONST_4R
LDY #>CONST_4R
JSR COMPACT26
JSR COMPACT81
LDA #<FORLOOP65
STA JUMP_TARGET
LDA #>FORLOOP65
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP65:
LDA #<VAR_II
LDY #>VAR_II
JSR COMPACT52
LDA #<VAR_LX$[]
LDY #>VAR_LX$[]
JSR COMPACT109
JSR COMPACT103
JSR COMPACT149
LDA #<VAR_A1$
LDY #>VAR_A1$
JSR COPYSTRING
LINE_62925:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_EX$[]
LDY #>VAR_EX$[]
JSR COMPACT109
JSR COMPACT103
JSR COMPACT149
LDA #<VAR_A2$
LDY #>VAR_A2$
JSR COPYSTRING
LDA VAR_A2$
LDY VAR_A2$+1
STA B_REG
STY B_REG+1
LDA VAR_A1$
LDY VAR_A1$+1
JSR COMPACT136
COMP_SKP302:
BEQ LINE_SKIP438
LINE_NSKIP438:
LDY #1
LDA #0
STY VAR_P%
STA VAR_P%+1
LDX #4
dcloop3037_1:
LDA CONST_66R,X
STA VAR_II,X
DEX
BPL dcloop3037_1
LINE_SKIP438:
LINE_62930:
JSR COMPACT81
JSR NEXT
LDA A_REG
BNE RBEQ_64
JMP (JUMP_TARGET)
RBEQ_64:
JSR COMPACT21
LDY VAR_P%
LDA VAR_P%+1
JSR ICMP
EQ_EQ190:
EQ_SKIP190:
COMP_SKP304:
BNE LINE_SKIP439
LINE_NSKIP439:
JMP LINE_62950
LINE_SKIP439:
LINE_62940:
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_EX$[]
LDY #>VAR_EX$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR POPREALXREG
LDA #<VAR_XP$[]
LDY #>VAR_XP$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_XN$[]
LDY #>VAR_XN$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JSR POPREALXREG
LDA #<VAR_XX$[]
LDY #>VAR_XX$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDY VAR_XC%
LDA VAR_XC%+1
JSR SUPERFIINX
STY VAR_XC%
STA VAR_XC%+1
LINE_62950:
JSR COMPACT31
JSR NEXT
LDA A_REG
BNE RBEQ_65
JMP (JUMP_TARGET)
RBEQ_65:
JMP RETURN
LINE_63000:
LINE_63005:
LDY 211
LDA #0
JSR COMPACT110
LDY 214
LDA #0
JSR INTFAC
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LDY #13
STY 646
LINE_63010:
LDX #4
dcloop3037_2:
LDA CONST_146,X
STA VAR_P,X
DEX
BPL dcloop3037_2
LDA #<CONST_147
LDY #>CONST_147
JSR COMPACT26
JSR COMPACT85
LDA #<CONST_115R
LDY #>CONST_115R
JSR COPY2_XYA_XREG
JSR FASTFOR
LDY #0
TYA
CPY A_REG
BNE COMP_SKP306
CMP A_REG+1
BNE COMP_SKP306
COMP_SKP306:
BNE RBEQ_66
JMP (JUMP_TARGET)
RBEQ_66:
LINE_63015:
LDX #4
dcloop3037_3:
LDA CONST_148R,X
STA VAR_P,X
DEX
BPL dcloop3037_3
LDA #<CONST_149R
LDY #>CONST_149R
JSR COMPACT26
JSR COMPACT85
LDA #<CONST_150R
LDY #>CONST_150R
JSR COPY2_XYA_XREG
JSR FASTFOR
LDY #0
TYA
CPY A_REG
BNE COMP_SKP307
CMP A_REG+1
BNE COMP_SKP307
COMP_SKP307:
BNE RBEQ_67
JMP (JUMP_TARGET)
RBEQ_67:
LINE_63030:
LDA #19
JSR SINGLECHROUTMAX
LDA #18
JSR SINGLECHROUTMAX
LDA VAR_RL$
LDY VAR_RL$+1
JSR STROUTWL
LINE_63035:
JSR COMPACTMAX
LDY VAR_PO%
LDA VAR_PO%+1
JSR INTFAC
JSR FACYREG
JSR STR
LDA A_REG
LDY A_REG+1
JSR COMPACT13
JSR COMPACT69
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
LDA VAR_RL$
LDY VAR_RL$+1
STA B_REG
STY B_REG+1
JSR LEN
JSR COPY_XREG2YREG
LDA #<CONST_9R
LDY #>CONST_9R
JSR COMPACT88
JSR FASTFSUBMEM
JSR FACXREG
JSR POPREAL2X
JSR FASTFSUBARG
JSR FACYREG
JSR SPC
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
LINE_63036:
LDA #146
JSR SINGLECHROUTBRKMAX
LDY #15
STY 646
LINE_63040:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
JSR XREGFAC
JSR FACWORD
STY 781
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
JSR XREGFAC
JSR FACWORD
STY 782
LDY #0
STY 783
LDA #<65520
STA TMP_ZP
LDA #>65520
STA TMP_ZP+1
JSR SYSTEMCALL
JMP RETURN
LINE_63100:
LINE_63105:
JSR COMPACT176
JSR COMPACT186
JSR COMPACT21
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
EQ_EQ191:
EQ_SKIP191:
COMP_SKP308:
BNE LINE_SKIP440
LINE_NSKIP440:
JMP RETURN
LINE_SKIP440:
LINE_63106:
JSR COMPACT40
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
EQ_EQ192:
EQ_SKIP192:
COMP_SKP309:
BNE LINE_SKIP441
LINE_NSKIP441:
JMP LINE_63180
LINE_SKIP441:
LINE_63110:
JSR COMPACT11
LDA #<VAR_SX$
LDY #>VAR_SX$
JSR COPYSTRING
LDX #4
dcloop3037_4:
LDA CONST_2R,X
STA VAR_PP,X
DEX
BPL dcloop3037_4
JSR COMPACT176
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
JSR COMPACT16
LDA #<FORLOOP66
STA JUMP_TARGET
LDA #>FORLOOP66
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP66:
LINE_63120:
JSR COMPACTMAX
LDA #<VAR_PP
LDY #>VAR_PP
JSR COPY2_XYA_CREG
JSR COMPACT175
LDY #1
JSR MIDCONST
JSR COMPACT122
JSR ASC
JSR COMPACT186
LINE_63130:
JSR GOSUB
JSR LINE_63250
LINE_63150:
JSR COMPACTMAX
LDA VAR_C%
JSR CHRINTB
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT19
JSR COMPACT131
LINE_63160:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_68
JMP (JUMP_TARGET)
RBEQ_68:
LDA VAR_SX$
LDY VAR_SX$+1
JSR COMPACT102
JMP RETURN
LINE_63180:
JSR COMPACT175
JSR ASC
JSR COMPACT186
LINE_63190:
JSR GOSUB
JSR LINE_63250
LINE_63210:
JSR COMPACTMAX
LDA VAR_C%
JSR CHRINT
LDA A_REG
LDY A_REG+1
JSR COMPACT102
JMP RETURN
LINE_63250:
LINE_63260:
LDA #$bf
JSR COMPACT87
ROL
BCS GT_GT193
LDA #0
JMP GT_SKIP193
GT_GT193:
LDA #$1
GT_SKIP193:
COMP_SKP311:
BNE LINE_NSKIP442
JMP LINE_SKIP442
LINE_NSKIP442:
LDA #<CONST_85R
LDY #>CONST_85R
JSR COPY2_XYA_YREG
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT92
JSR FACINT
STY VAR_C%
STA VAR_C%+1
LINE_SKIP442:
LINE_63270:
LDA #$5a
JSR COMPACT87
ROL
BCS GT_GT194
LDA #0
JMP GT_SKIP194
GT_GT194:
LDA #$1
GT_SKIP194:
COMP_SKP312:
BNE LINE_NSKIP443
JMP LINE_SKIP443
LINE_NSKIP443:
LDA #<CONST_86R
LDY #>CONST_86R
JSR COPY2_XYA_YREG
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT92
JSR FACINT
STY VAR_C%
STA VAR_C%+1
LINE_SKIP443:
LINE_63280:
JMP RETURN
LINE_63300:
LINE_63310:
LDA #14
JSR SINGLECHROUTMAX
LDA #147
JSR SINGLECHROUTBRKMAX
LDY #0
STY 53280
LDY #0
STY 53281
LDY #15
STY 646
LINE_63320:
JMP RETURN
LINE_63400:
JSR END
RTS
;###################################
END			LDX SP_SAVE
TXS
<IF BIGRAM>
JSR ENABLEROM
</IF>
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
RTS
;###################################
;###################################
SYSTEMCALL
LDA TMP_ZP
STA SCDO+1
LDA TMP_ZP+1
STA SCDO+2
LDA $030F
PHA
LDA $030C
LDX $030D
LDY $030E
PLP
<IF BIGRAM>
JSR ENABLEROM
</IF>
SCDO		JSR $FFFF
<IF BIGRAM>
JSR DISABLEROM
</IF>
PHP
STA $030C
STX $030D
STY $030E
PLA
STA $030F
RTS
;###################################
;###################################
START		LDA ENDSTRBUF+1
BNE ENDGIVEN
LDA BASICEND
STA ENDSTRBUF
LDA BASICEND+1
STA ENDSTRBUF+1
ENDGIVEN	LDA #<FPSTACK
LDY #>FPSTACK
STA FPSTACKP
STY FPSTACKP+1
LDA #<FORSTACK
LDY #>FORSTACK
STA FORSTACKP
STY FORSTACKP+1
LDA #<STRBUF
LDY #>STRBUF
STA STRBUFP
STY STRBUFP+1
STA HIGHP
STY HIGHP+1
LDA #0
STA CHLOCKFLAG
STA LASTVAR
STA LASTVAR+1
JSR INITVARS
LDA #0
STA CMD_NUM
STA CHANNEL
TAY
TAX
<IF X16>
JSR VARBANKON
</IF>
STA KEYNDX
<IF X16>
JSR VARBANKOFF
LDA #DEFAULT_BANK
STA RAMSELECT
</IF>
JSR RESTORE
CLC
<IF BOOST>
JSR BOOSTENABLE
</IF>
RTS
;###################################
;###################################
INITNARRAY
STA TMP_ZP
STY TMP_ZP+1
LDY #0
TYA
NINITLOOP	STA (TMP_ZP),Y
INC TMP_ZP
BNE NLOOPNOV
INC TMP_ZP+1
NLOOPNOV	LDX TMP2_ZP
BNE NLOOPNOV2
DEC TMP2_ZP+1
NLOOPNOV2	DEC TMP2_ZP
BNE NINITLOOP
LDX TMP2_ZP+1
BNE NINITLOOP
RTS
;###################################
;###################################
INITSTRARRAY
STA TMP_ZP
STY TMP_ZP+1
SINITLOOP	LDY #0
LDA #<EMPTYSTR
STA (TMP_ZP),Y
LDA #>EMPTYSTR
INY
STA (TMP_ZP),Y
CLC
LDA TMP_ZP
ADC #2
STA TMP_ZP
BCC SLOOPNOV1
INC TMP_ZP+1
SLOOPNOV1	SEC
LDA TMP2_ZP
SBC #2
STA TMP2_ZP
BCS SLOOPNOV2
DEC TMP2_ZP+1
SLOOPNOV2	LDA TMP2_ZP
BNE SINITLOOP
LDA TMP2_ZP+1
BNE SINITLOOP
RTS
;###################################
;###################################
INITSPARAMS	STA TMP3_ZP
STY TMP3_ZP+1
SEC
SBC #2
STA TMP_ZP
TYA
SBC #0
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1
LDA TMP3_ZP
LDY TMP3_ZP+1
RTS
;##################################
;##################################
INITSTRVARS	LDA #<STRINGVARS_START		; Reset all string variables...
LDY #>STRINGVARS_START
CMP #<STRINGVARS_END
BNE INITIT1
CPY #>STRINGVARS_END
BNE INITIT1
JMP INITSA2					; No string variables at all
INITIT1		STA TMP_ZP
STY TMP_ZP+1
LDY #0
INITSTRLOOP	LDA #<EMPTYSTR
STA (TMP_ZP),Y
INY
LDA #>EMPTYSTR
STA (TMP_ZP),Y
DEY
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
LDA TMP_ZP+1
ADC #0
STA TMP_ZP+1
CMP #>STRINGVARS_END
BNE INITSTRLOOP
LDA TMP_ZP
CMP #<STRINGVARS_END
BNE INITSTRLOOP
INITSA2		LDA #<STRINGARRAYS_START	; ...and all string arrays
LDY #>STRINGARRAYS_START
CMP #<STRINGARRAYS_END
BNE ARRAYLOOP
CPY #>STRINGARRAYS_END
BNE ARRAYLOOP
RTS							;...no string array at all
ARRAYLOOP	CLC
ADC #3
BCC ARRAYSKIP1
INY
ARRAYSKIP1	CPY #>STRINGARRAYS_END
BEQ ARRAYSC
BCC ARRAYSKIP2
JMP ARRAYQUIT
ARRAYSC		CMP #<STRINGARRAYS_END
BCS ARRAYQUIT
ARRAYSKIP2	STA TMP_REG
STY TMP_REG+1
JSR INITSPARAMS
LDA TMP_REG
LDY TMP_REG+1
JSR INITSTRARRAY
LDA TMP_ZP
LDY TMP_ZP+1
JMP ARRAYLOOP
ARRAYQUIT	RTS
;###################################
;###################################
RESTORE		LDA #<DATAS
LDY #>DATAS
STA DATASP
STY DATASP+1
RTS
;###################################
;###################################
MID			LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR SGNFAC
ROL
BCC MIDLENGTH		; an actual length was given...
MIDNEGC		JSR STRFUNCINT		; ...no, it wasn't.
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
STA TMP_REG+1
BNE MIDOK2
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK2		DEC TMP_REG+1		; BASIC starts at 1, we start at 0
LDA (TMP_ZP),Y
SEC
SBC TMP_REG+1
STA TMP_REG			; store the calculated length
BCS	MIDNOV
STY TMP_REG			; Set length to 0, if start>string length
JMP MIDNOV
MIDLENGTH	JSR FACWORD
MIDCONST	STY TMP2_REG		; save the length in TMP2_REG
JSR STRFUNCINT
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
BNE MIDOK
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK		LDX TMP2_REG
STX TMP_REG			; store the length saved above in TMP_REG
STA TMP_REG+1
DEC TMP_REG+1		; BASIC starts at 1, we start at 0
MIDNOV		LDA TMP_REG+1		; the starting position
CLC
ADC TMP_REG			; add the length
BCS MIDCLAMP
CMP (TMP_ZP),Y
BCS	MIDCLAMP
MIDCOPY		JMP STRFUNC
MIDCLAMP	LDA (TMP_ZP),Y		; Clamp to the string's length, if needed...
SEC
SBC TMP_REG+1
STA TMP_REG
BCS MIDCOPY
STY TMP_REG
JMP MIDCOPY
;###################################
;###################################
RIGHT		JSR STRFUNCINT
LDA (TMP_ZP),Y
TAX
CMP TMP_REG			; compare the source string's length with the parameter
BCS RIGHTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
RIGHTBELOW	TXA
SEC
SBC TMP_REG
BCS RIGHTNOV
LDA #0
RIGHTNOV	STA TMP_REG+1
JMP STRFUNC
;###################################
;###################################
LEFT		JSR STRFUNCINT
STY TMP_REG+1		; store the start position (always 0 for left$)
LDA (TMP_ZP),Y
CMP TMP_REG			; compare the source string's length with the parameter
BCS LEFTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
LEFTBELOW	JMP STRFUNC
;###################################
;###################################
STRFUNCINT 	LDA B_REG			;the source string
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
STY TMP_REG			; store the parameter
LDY #0
RTS
;###################################
;###################################
STRFUNC		LDA TMP_REG+1
BEQ STARTATZERO
LDA TMP_ZP
CLC
ADC TMP_REG+1
STA TMP_ZP
BCC STARTATZERO
INC TMP_ZP+1
STARTATZERO	LDY #0
LDA (TMP_ZP),Y
PHA					; save the first byte of the source string on the stack
LDA TMP_REG
BNE STRFUNCNZ
LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
JMP EXITSTRFUNC
STRFUNCNZ	STA (TMP_ZP),Y
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
LDX TMP_REG			; Put length into X for copy
JSR COPYONLY
EXITSTRFUNC	PLA
LDY #0
STA (TMP_ZP),Y		; restore the first byte of the source string on the stack
RTS
;###################################
;###################################
CONCAT		LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA STRBUFP		; adjust A_REG so that it points to the new tmp buffer
STA A_REG
STA TMP3_ZP
LDA STRBUFP+1
STA A_REG+1
STA TMP3_ZP+1
LDY #0
LDA (TMP_ZP),Y
TAX
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
TXA
CLC
ADC (TMP2_ZP),Y
BCC CCSTRFITS
JMP STRINGTOOLONG
CCSTRFITS	STA (TMP3_ZP),Y
INC TMP3_ZP
BNE CCNOOV2
INC TMP3_ZP+1
CCNOOV2		CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC CCNOCS1
INC STRBUFP+1
CCNOCS1		PLP
BCC CCSTRFITS2
INC STRBUFP+1
CCSTRFITS2	JSR COPY2CONCAT		;...copy into the buffer
LDA B_REG			;set the content to append
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
JMP COPY2CONCAT		;..and copy it
;###################################
;###################################
COPY2CONCAT	LDY #0
LDA (TMP_ZP),Y
BEQ NOC2C			; Nothing to append, skip
STA TMP2_ZP
INC TMP_ZP
BNE COPY2LOOP
INC TMP_ZP+1
COPY2LOOP	LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
CPY TMP2_ZP
BNE COPY2LOOP
TYA
CLC
ADC TMP3_ZP			; Update tmp pointer in concat memory
STA TMP3_ZP
BCC NOC2C
INC TMP3_ZP+1
NOC2C		RTS
;###################################
;###################################
FASTFOR		JSR POPREAL
JSR SGNFAC
STA TMP_REG		; store sign
BCC FFPOSSTEP
LDA #<REAL_CONST_MINUS_ONE	; negative...negate it
LDY #>REAL_CONST_MINUS_ONE
JSR MEMARG	; to ARG
JSR FACMUL	; MUL
FFPOSSTEP	JSR FACWORD	; to WORD
STY TMP2_ZP
STA TMP2_ZP+1	; step
LDA A_REG
LDY A_REG+1
JSR REALFAC
JSR FACWORD
STY TMP_ZP
STA TMP_ZP+1	; from
JSR POPREAL
JSR FACWORD
STY TMP2_ZP+2
STA TMP2_ZP+3	; end
JSR XREGFAC
JSR FACINT
STY TMP3_ZP		; value
LDA TMP2_ZP+1
BNE STEPNOTONE
LDA TMP2_ZP
CMP #$1
BNE STEPNOTONE
JMP STEPONE
STEPNOTONE	LDA TMP_REG
BEQ FFSTEPZERO
ROL
FFSTEPZERO	BCC FFSTEPPOS
FFSTEPNEG	LDY #0
LDA TMP3_ZP
TAX
FFNEGLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
SEC
SBC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
BCS	FFNEGSKIP
SBC TMP2_ZP+1
STA TMP_ZP+1
FFNEGSKIP	CMP TMP2_ZP+3
BEQ FFNEGCHECK2
BCS FFNEGLOOP
JMP FFDONE
FFNEGCHECK2	LDA TMP_ZP
CMP TMP2_ZP+2
BCS FFNEGLOOP
JMP FFDONE
FFSTEPPOS	LDY #0
LDA TMP3_ZP
TAX
FFPOSLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
BCC	FFPOSSKIP
ADC TMP2_ZP+1
STA TMP_ZP+1
FFPOSSKIP	CMP TMP2_ZP+3
BCC FFPOSLOOP
BEQ FFPOSCHECK2
JMP FFDONE
FFPOSCHECK2	LDA TMP_ZP
CMP TMP2_ZP+2
BCC FFPOSLOOP
BEQ FFPOSLOOP
FFDONE		LDY TMP_ZP
LDA TMP_ZP+1
JSR INTFAC
LDX A_REG
LDY A_REG+1
LDA #1
STA A_REG
JMP FACMEM		; Store end value in loop variable
STEPONE	LDA TMP_REG
BEQ OFFSTEPZERO
ROL
OFFSTEPZERO	BCC OFFSTEPPOS
OFFSTEPNEG	LDY #0
LDA TMP3_ZP
TAX
OFFNEGLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
BNE ONOOVERFLOW
DEC TMP_ZP+1
ONOOVERFLOW	DEC TMP_ZP
LDA TMP_ZP+1
OFFNEGSKIP	CMP TMP2_ZP+3
BEQ OFFNEGCHECK2
BCS OFFNEGLOOP
JMP FFDONE
OFFNEGCHECK2
LDA TMP_ZP
CMP TMP2_ZP+2
BCS OFFNEGLOOP
JMP FFDONE
OFFSTEPPOS	LDY #0
LDA TMP3_ZP
TAX
OFFPOSLOOP	TXA
STA (TMP_ZP),Y
INC TMP_ZP
BNE ONOOVERFLOW2
INC TMP_ZP+1
ONOOVERFLOW2
LDA TMP_ZP+1
OFFPOSSKIP	CMP TMP2_ZP+3
BCC OFFPOSLOOP
BEQ OFFPOSCHECK2
JMP FFDONE
OFFPOSCHECK2
LDA TMP_ZP
CMP TMP2_ZP+2
BCC OFFPOSLOOP
BEQ OFFPOSLOOP
JMP FFDONE
;###################################
;###################################
STR			JSR YREGFAC
STRINT		LDY #1
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOP		INY
LDA LOFBUFH,Y
BNE STRLOOP
STY LOFBUF
TYA
TAX			; Length in X
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
VAL			LDA B_REG
STA INDEX1
LDA B_REG+1
STA INDEX1+1
LDY #0
STY VALTYPE
LDA (INDEX1),Y
BNE	DOACVAL
JMP ZEROSET
DOACVAL		TAY
INC INDEX1
BNE VALSTR
INC INDEX1+1
VALSTR		JSR VALS
JMP FACXREG	;RTS is implicit
;###################################
;###################################
TAB			JSR TABSPCINIT
JSR REROUTE
LDA CMD_NUM
BEQ NORMALTAB		; No reroute? Normal TAB
CMP #3
BEQ NORMALTAB2		; To screen? Normal TAB
JMP TABCHANNEL2
NORMALTAB2	JSR CLRCHNEW
NORMALTAB	SEC
JMP TABSPC
;###################################
;###################################
SPC			JSR TABSPCINIT
JSR REROUTE
LDA CMD_NUM
BEQ NORMALSPC		; No reroute? Normal SPC
CMP #3
BEQ NORMALSPC2		; To screen? Normal SPC
JMP TABCHANNEL2
NORMALSPC2	JSR CLRCHNEW
NORMALSPC	CLC
JMP TABSPC
;###################################
;###################################
TABSPCINIT	SEC
JSR CRSRPOS
STY $09
JSR YREGFAC
JSR FACWORD
TYA
TAX
RTS
;###################################
;###################################
TABSPC	    BCC DOSPC
TXA
SBC $09
BCC TABSPCQUIT
TAX
DOSPC		INX
TABSPCLOOP  DEX
BNE TABSPCRIGHT
TABSPCQUIT	RTS
TABSPCRIGHT	JSR CRSRRIGHT
JMP TABSPCLOOP
;###################################
;###################################
LEN			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
BEQ ZEROLEN
TAY
LDA #0
JSR INTFAC
JMP FACXREG	;RTS is implicit
ZEROLEN		JMP ZEROSET
;###################################
;###################################
ASC			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
BNE DOASC
JMP ILLEGALQUANTITY
DOASC		INY
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
TAY
LDA #0
JSR INTFAC
JMP FACXREG
;###################################
;###################################
CHRINTB		JSR CHRINT
JSR COMPACT122
RTS
;###################################
;###################################
CHRINT		TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
INY
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC NOCHR2
INC STRBUFP+1
NOCHR2		RTS
;###################################
;###################################
SAVEPOINTERS
LDA TMP_ZP			; ...save the pointers
STA STORE1
LDA TMP_ZP+1
STA STORE1+1
LDA TMP2_ZP
STA STORE2
LDA TMP2_ZP+1
STA STORE2+1
LDA TMP3_ZP
STA STORE3
LDA TMP3_ZP+1
STA STORE3+1
RTS
;###################################
;###################################
RESTOREPOINTERS
LDA STORE3+1		; ...restore the pointers
STA TMP3_ZP+1
LDA STORE3
STA TMP3_ZP
LDA STORE2+1
STA TMP2_ZP+1
LDA STORE2
STA TMP2_ZP
LDA STORE1+1
STA TMP_ZP+1
LDA STORE1
STA TMP_ZP
RTS
;###################################
;###################################
COMPACTMAX
LDA #$FF
LDY #$0
JMP COMPACTF
;###################################
;###################################
COMPACT
LDY #0
GCBUFNE		LDA (TMP_ZP),Y		; Get the source's length
COMPACTF	STA TMP4_REG		; ...and store it
LDY STRBUFP+1		; First, check if the new string would fit into memory...
STY TMP4_REG+1		; For that, we have to calculate the new strbufp after adding the string
INY					; add 1 to the high byte to check, if at least 256 bytes are free (fast path)
BEQ ENDMEM			; actually, if this happens, all went wrong anyway...whatever...
CPY ENDSTRBUF+1		; check, if there are at least 256 bytes free. If there are, no detailed check is needed...
BCC RGCEXIT			; there are? We are out then.
ENDMEM		LDA STRBUFP
CLC
ADC TMP4_REG
STA TMP4_REG
BCC	RGCNOOV1
INC TMP4_REG+1
RGCNOOV1	CLC
LDA TMP4_REG
ADC #3
STA TMP4_REG
BCC	RGCNOOV2
INC TMP4_REG+1
RGCNOOV2	LDA TMP4_REG+1		; Now do the actual check
CMP ENDSTRBUF+1
BEQ RGCLOW1
BCS GCEXECOMP		; Doesn't fit, run GC!
JMP RGCEXIT
RGCLOW1		LDA TMP4_REG
CMP ENDSTRBUF
BCS	GCEXECOMP		; This also triggers if it would fit exactly...but anyway...
RGCEXIT		RTS					; It fits? Then exit without GC
;###################################
;###################################
GCEXECOMP	LDA STRBUFP
STA STORE4
LDA STRBUFP+1
STA STORE4+1
JSR GCEXE
JMP CHECKMEMORY
;###################################
;###################################
GCEXE		JSR SAVEPOINTERS
LDA #0
STA LASTVAR
STA LASTVAR+1		; reset the last variable pointer to 0
LDA #<STRBUF
STA TMP_ZP
STA GCSTART
LDA #>STRBUF
STA TMP_ZP+1		; Pointer into the string memory, initialized to point at the start...
STA GCSTART+1
GCLOOP		LDY #0
LDA TMP_ZP
STA GCWORK
LDA TMP_ZP+1
STA GCWORK+1		; store the pointer for later use...
LDA (TMP_ZP),Y
STA GCLEN			; store the length
INC TMP_ZP
BNE GCLOOPNOOV
INC TMP_ZP+1
GCLOOPNOOV	LDA TMP_ZP
CLC
ADC GCLEN
STA TMP_ZP
BCC GCLOOPNOOV2
INC TMP_ZP+1		; TMP_ZP now points to the reference to the string variable that used this chunk once
GCLOOPNOOV2 LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1		; Store the variable reference in TMP2_ZP
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
BCC GCLOOPNOOV3
INC TMP_ZP+1		; adjust the pointer to point to the next entry
GCLOOPNOOV3 LDY #0
LDA (TMP2_ZP),Y
CMP GCWORK
BNE GCKLOOP
INY
LDA (TMP2_ZP),Y
CMP GCWORK+1
BEQ MEMFREE
GCKLOOP		LDA TMP_ZP+1		; Check if we have processed all of the string memory...
CMP HIGHP+1
BEQ GCHECKLOW
BCC GCLOOP
JMP GCDONE
GCHECKLOW	LDA TMP_ZP
CMP HIGHP
BCS GCDONE
JMP GCLOOP
MEMFREE		LDA GCSTART			; found a variable that points to this chunk...
CMP GCWORK			; ...then check if the can be copied down. This is the case if GCSTART!=GCWORK
BNE COPYDOWN
LDA GCSTART+1
CMP GCWORK+1
BNE COPYDOWN
LDA TMP_ZP			; GCSTART==GCWORK...adjust GCSTART and continue
STA GCSTART
LDA TMP_ZP+1
STA GCSTART+1
JMP	GCKLOOP			; continue if needed...
COPYDOWN	LDA GCSTART			; There's a gap in memory, so copy the found variable down to GCSTART and adjust GCSTART accordingly
STA TMP_REG
LDA GCSTART+1
STA TMP_REG+1		; set the target location...
LDA GCWORK
STA TMP2_REG
LDA GCWORK+1
STA TMP2_REG+1		; set the source location...
LDA TMP_ZP
SEC
SBC GCWORK
STA TMP3_REG
LDA TMP_ZP+1
SBC GCWORK+1
STA TMP3_REG+1		; set the length
LDA GCSTART
CLC
ADC TMP3_REG
STA GCSTART
LDA GCSTART+1
ADC TMP3_REG+1
STA GCSTART+1		; update GCSTART to point to the next free chunk
JSR QUICKCOPY		; copy the chunk down to (former, now stored in TMP_REG) GCSTART
LDY #0
LDA TMP_REG
STA (TMP2_ZP),Y
INY
LDA TMP_REG+1
STA (TMP2_ZP),Y		; ...and adjust the pointer to the memory in the variable to that new location
JMP GCKLOOP
GCDONE		LDA GCSTART
STA HIGHP
STA STRBUFP
LDA GCSTART+1
STA HIGHP+1
STA STRBUFP+1		; Update the string pointers to the new, hopefully lower position
GCSKIP		JSR RESTOREPOINTERS
RTS					; Remember: GC has to adjust highp as well!
;###################################
;###################################
CHECKMEMORY
LDA STRBUFP+1		; Check if we are out of memory even after a garbage collection.
CMP STORE4+1		; This is indicated by the string pointer being still equal or higher
BCC STILLFITSCM		; than before the GC. We are not checking against the actual memory limit,
BEQ CHECKMEMLOWCM
JMP OUTOFMEMORY		; STRBUFP>last value? OOM!
CHECKMEMLOWCM
LDA STRBUFP			; High bytes are equal? Check low bytes
CMP STORE4
BCC	STILLFITSCM
JMP OUTOFMEMORY		; No? OOM
STILLFITSCM RTS
;###################################
;###################################
QUICKCOPY	LDA TMP_REG		; a self modifying copy routine
STA TMEM+1
LDA TMP_REG+1
STA TMEM+2
LDA TMP2_REG
STA SMEM+1
LDA TMP2_REG+1
STA SMEM+2
LDY #$0
LDX TMP3_REG
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT		; length is null, nothing to copy
QCLOOP
SMEM		LDA $0000,Y
TMEM		STA $0000,Y
INY
BNE YNOOV
INC TMEM+2
INC SMEM+2
YNOOV		DEX
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT
DEC TMP3_REG+1
JMP QCLOOP
QCEXIT		RTS
;###################################
;###################################
COPYSTRING	STA TMP2_ZP
STY TMP2_ZP+1
CPY TMP_ZP+1
BNE CONTCOPY
LDA TMP2_ZP
CMP TMP_ZP
BNE CONTCOPY
RTS					; A copy from a variable into the same instance is pointless an will be ignored.
CONTCOPY	JSR COMPACT			; Do a GC if needed
LDY #0
STY TMP_FLAG
LDA (TMP_ZP),Y
BNE NOTEMPTYSTR
LDA #<EMPTYSTR		; The source is empty? Then assign the empty string constant instead
STA TMP_ZP
LDA #>EMPTYSTR
STA TMP_ZP+1
JMP ISCONST
NOTEMPTYSTR	TAX					; Store the length of the source in X...this is valid until right to the end, where it's not longer used anyway
LDA (TMP2_ZP),Y
STA TMP3_ZP
INY
LDA (TMP2_ZP),Y
STA TMP3_ZP+1
DEY
LDA TMP_ZP+1		; Check if the source is a constant (upper bound). If so, don't copy it but just point to it
CMP #>CONSTANTS_END
BEQ CHECKLOW1
BCS INVAR
JMP CHECKNEXT
CHECKLOW1	LDA TMP_ZP
CMP #<CONSTANTS_END
BCS INVAR
CHECKNEXT	LDA TMP_ZP+1		; Check if the source is a constant (lower bound). If so, don't copy it but just point to it
CMP #>CONSTANTS
BEQ CHECKLOW3
BCC INVAR
JMP ISCONST
CHECKLOW3	LDA TMP_ZP
CMP #<CONSTANTS
BCC INVAR			; No, it's not a constant. It's something from lower memory...
ISCONST		JSR CHECKLASTVAR	; Reclaim formerly used memory if possible
LDA TMP_ZP
STA (TMP2_ZP),Y		; Yes, it's a constant...
INY
LDA TMP_ZP+1
STA (TMP2_ZP),Y
LDA HIGHP			; Reset the memory pointer to the last assigned one. Everything that came later has to be temp. data
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
RTS
INVAR		INY
LDA (TMP2_ZP),Y		; Check if the target is currently pointing into the constant pool. If so, don't update that memory by accident
CMP #>CONSTANTS_END
BEQ CHECKLOW2
BCS INVAR2
JMP PUPDATEPTR
CHECKLOW2	DEY
LDA (TMP2_ZP),Y
CMP #<CONSTANTS_END
BCS INVAR2
JMP PUPDATEPTR
INVAR2		LDY #0			; The target is somewhere in var memory (i.e. not in constant memory)
LDA (TMP3_ZP),Y
STA TMP_REG
TXA
CMP TMP_REG		; Compare the string-to-copy's length (in A) with the variable's current one (in TMP_REG)
BEQ UPDATEHP2	; does the new string fit into the old memory location (i.e. is it the same length)?
PUPDATEPTR	JSR CHECKLASTVAR
LDY #1			; No? Then new memory has to be used. Update the "highest memory position" in the process
STY TMP_FLAG	; to regain temp. memory used for non-assigned strings like for printing and such...
JMP UPDATEPTR	; ...we set a flag here to handle this case later
UPDATEHP2	LDA HIGHP		; Update the memory pointer to the last assigned position, reclaim some memory this way
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JMP STRFITS
COPYONLY	LDY #0
STY TMP_FLAG
JMP CHECKMEM
ALTCOPY		JMP COPYSTRING2
UPDATEPTR	LDA TMP_ZP+1	; Check if the new string comes after or equals highp, which indicates that it can be
CMP HIGHP+1		; "copied down". This is another routine, because of...reasons...
BEQ CHECKXT1
BCS ALTCOPY
JMP CHECKMEM
CHECKXT1	LDA TMP_ZP
CMP HIGHP
BCS ALTCOPY
CHECKMEM
MEMOK		LDY #0
LDA STRBUFP		; no, then copy it into string memory later...
STA (TMP2_ZP),Y	; ...but update the string memory pointer now
STA TMP3_ZP
LDA STRBUFP+1
INY
STA (TMP2_ZP),Y
STA TMP3_ZP+1
TXA
CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC NOCS1
INC STRBUFP+1
NOCS1		PLP
BCC STRFITS
INC STRBUFP+1
STRFITS		LDY TMP_FLAG	; Check if the pointer to the highest mem addr is used by an actual string
BEQ NOHPUPDATE	; has to be updated and do that...
LDA HIGHP+1
CMP STRBUFP+1
BCC UPDATEHIGHP
BEQ CHECKNEXTHP
JMP NOHPUPDATE
CHECKNEXTHP	LDA HIGHP
CMP	STRBUFP
BCC UPDATEHIGHP
JMP NOHPUPDATE
UPDATEHIGHP	LDA STRBUFP
STA HIGHP
LDA STRBUFP+1
STA HIGHP+1		; set new pointer
JSR REMEMBERLASTVAR
JSR STOREVARREF
NOHPUPDATE	LDY #0
LDA (TMP_ZP),Y	; Set the new length...
STA (TMP3_ZP),Y
TAY				; Copy length to Y
BEQ	EXITCOPY	; Length 0? nothing to copy then...
LOOP		LDA (TMP_ZP),Y	; Copy the actual string
STA (TMP3_ZP),Y
DEY
BNE LOOP
EXITCOPY	RTS
;###################################
;###################################
COPYSTRING2	LDY #0
LDA (TMP_ZP),Y
STA TMP_REG
TAX
LDA HIGHP
STA TMP3_ZP
STA (TMP2_ZP),Y
LDA HIGHP+1
STA TMP3_ZP+1
INY
STA (TMP2_ZP),Y
JSR REMEMBERLASTVAR
LDA TMP_ZP
CMP TMP3_ZP
BNE DOLOOP
LDA TMP_ZP+1
CMP TMP3_ZP+1
BEQ SKIPCP2
DOLOOP		DEY
TXA
STA (TMP3_ZP),Y
INY
ASLOOP		LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
DEX
BNE	ASLOOP
SKIPCP2		LDA HIGHP
CLC
ADC TMP_REG
PHP
CLC
ADC #3
STA HIGHP
STA STRBUFP
BCC SKIPLOWAS1
INC HIGHP+1
SKIPLOWAS1	PLP
BCC SKIPLOWAS2
INC HIGHP+1
SKIPLOWAS2	LDA HIGHP+1
STA STRBUFP+1
JSR STOREVARREF
RTS
;###################################
;###################################
CHECKLASTVAR
LDA TMP2_ZP
CMP LASTVAR
BNE NOTSAMEVAR
LDA TMP2_ZP+1
CMP LASTVAR+1
BNE NOTSAMEVAR
LDA LASTVARP			; The target is the last string that has been added. We can free it's currently used memory then.
STA HIGHP
STA STRBUFP
LDA LASTVARP+1
STA HIGHP+1
STA STRBUFP+1
NOTSAMEVAR	RTS
;###################################
;###################################
REMEMBERLASTVAR
LDA TMP2_ZP
STA LASTVAR
LDA TMP2_ZP+1
STA LASTVAR+1
LDA TMP3_ZP
STA LASTVARP
LDA TMP3_ZP+1
STA LASTVARP+1	; Remember this variable as the last written one
RTS
;###################################
;###################################
STOREVARREF
TYA
PHA				; Save Y reg
LDA TMP_ZP
PHA
LDA TMP_ZP+1
PHA
LDA HIGHP+1
STA TMP_ZP+1
LDA HIGHP
SEC
SBC #2
STA TMP_ZP
BCS RLVNOOV
DEC TMP_ZP+1
RLVNOOV		LDA TMP2_ZP
LDY #0
STA (TMP_ZP),Y
LDA TMP2_ZP+1
INY
STA (TMP_ZP),Y	; Store the reference to the variable that uses this chunk of memory at the end of the string
PLA
STA TMP_ZP+1
PLA
STA TMP_ZP		; ...restore TMP_ZP
PLA
TAY				; ...restore Y reg
RTS
;###################################
;###################################
REROUTE		LDA CMD_NUM		; if CMD mode, enable channel output
BEQ REROUTECMD
TAX
STA CHANNEL
JMP CHKOUT
REROUTECMD	RTS
;###################################
;###################################
RESETROUTE	LDA CMD_NUM		; if CMD mode, disable channel output
BEQ RESETROUTECMD
JMP CLRCHNEW
RESETROUTECMD
RTS
;###################################
;###################################
INTOUT		JMP REALOUT
;###################################
;###################################
REALOUT		JSR REROUTE
LDA X_REG
BNE RNOTNULL
JMP PRINTNULL
RNOTNULL	JSR XREGFAC
REALOUTINT	LDY #0
JSR FACSTR
LDY #0
LDA LOFBUF,Y
STRLOOPRO	JSR CHROUT
INY
LDA LOFBUF,Y
BNE STRLOOPRO
JSR RESETROUTE
RTS
;###################################
;###################################
LINEBREAK	JSR REROUTE
LDA #$0D
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
PRINTNULL	JSR REROUTE
LDA #$20
JSR CHROUT
LDA #$30
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
STROUTWL	STA A_REG
STY A_REG+1
STROUT		JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR
INC INDEX1+1
PRINTSTR	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JSR RESETROUTE
RTS
;###################################
;###################################
SINGLECHROUTBRKMAX
JSR SINGLECHROUTBRK
JMP COMPACTMAX
;###################################
;###################################
SINGLECHROUTBRK
STA TMP_ZP
JSR REROUTE
LDA TMP_ZP
JSR CHROUT
LDA #$0D
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
SINGLECHROUTMAX
JSR SINGLECHROUT
JMP COMPACTMAX
;###################################
;###################################
SINGLECHROUT
STA TMP_ZP
JSR REROUTE
LDA TMP_ZP
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
STROUTBRKWL	STA A_REG
STY A_REG+1
STROUTBRK	JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR2
INC INDEX1+1
PRINTSTR2	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
LDA #$0D
JSR CHROUT
JMP RESETROUTE 	;RTS is implicit
;###################################
;###################################
FRE
JSR GCEXE
LDA ENDSTRBUF
SEC
SBC STRBUFP
TAY
LDA ENDSTRBUF+1
SBC STRBUFP+1
JSR INTFAC
JMP FACXREG
;###################################
;###################################
ARRAYACCESS_STRING
JSR XREGFAC
JSR FACINT
ARRAYACCESS_STRING_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
JSR COMPACT188
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA A_REG
INY
LDA (TMP_ZP),Y
STA A_REG+1
RTS
;###################################
;###################################
ARRAYACCESS_INTEGER_SI
STA G_REG
STY G_REG+1
JSR XREGFAC
JSR FACINT
ARRAYACCESS_INTEGER_INT_SI
JSR COMPACT189
JSR COMPACT188
JSR COMPACT190
RTS
;###################################
;###################################
ARRAYACCESS_INTEGER_SNX
STA G_REG
STY G_REG+1
JMP ARRAYACCESS_INTEGER_NX
;###################################
;###################################
ARRAYACCESS_INTEGER_S
STA G_REG
STY G_REG+1
ARRAYACCESS_INTEGER
JSR XREGFAC
ARRAYACCESS_INTEGER_NX
JSR FACINT
ARRAYACCESS_INTEGER_INT
JSR COMPACT189
JSR COMPACT188
JSR COMPACT190
STY TMP2_ZP		; Store for integer optimization later on
STA TMP2_ZP+1
JSR INTFAC
JMP FACXREG	;RTS is implicit
;###################################
;###################################
ARRAYSTORE_STRING
JSR XREGFAC
JSR FACINT
ARRAYSTORE_STRING_INT
JSR COMPACT189
LDA TMP_ZP
CLC
ADC TMP2_ZP
TAX
LDA TMP_ZP+1
ADC TMP2_ZP+1
TAY
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
TXA
JMP COPYSTRING	; RTS is implicit
;###################################
;###################################
ARRAYSTORE_INT_INTEGER
JSR XREGFAC
JSR FACINT
ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT189
JSR COMPACT188
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #1
LDA AS_TMP+1
STA (TMP_ZP),Y
DEY
LDA AS_TMP
STA (TMP_ZP),Y
RTS
;###################################
;###################################
ARRAYSTORE_INTEGER
JSR XREGFAC
ARRAYSTORE_INTEGER_NX
JSR FACINT
ARRAYSTORE_INTEGER_INT
JSR COMPACT189
JSR COMPACT188
ADC TMP2_ZP+1
STA TMP_ZP+1
JSR YREGFAC
JSR FACINT
STY TMP3_ZP
LDY #1
STA (TMP_ZP),Y
DEY
LDA TMP3_ZP
STA (TMP_ZP),Y
RTS
;###################################
;###################################
ADJUSTSTACK LDA FORSTACKP	; Adjust the FORSTACK in case a new loop uses an unclosed old one (i.e. the code jumped out of that loop with goto)
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
ADSEARCHFOR	LDA TMP_ZP
CMP #<FORSTACK
BNE ADJUST2
LDA TMP_ZP+1
CMP #>FORSTACK
BNE ADJUST2
RTS				; Start of Stack reached? Return
ADJUST2		LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS ADNOPV1N1
DEC TMP_ZP+1
ADNOPV1N1	LDY #0
LDA (TMP_ZP),Y
BNE ADNOGOSUB
RTS				; Encountered a GOSUB on the way? Then return (is this correct?)
ADNOGOSUB
INY
JSR COMPACT191
BCS ADNOPV1N2
DEC TMP_ZP+1
ADNOPV1N2	DEY
LDA A_REG
ADCMPFOR	CMP (TMP_ZP),Y
BNE ADSEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ ADFOUNDFOR
JMP ADSEARCHFOR
ADLOW0		LDX A_REG+1
BEQ ADFOUNDFOR
BNE ADCMPFOR
ADFOUNDFOR	LDA TMP_ZP		; Adjust the stack so that it points onto the last entry for the "new" loop variable
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
INITFOR		JSR ADJUSTSTACK
LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
LDA A_REG
STA (TMP_ZP),Y
INY
LDA A_REG+1
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET+1
STA (TMP_ZP),Y
INY
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
JSR FACMEM
JSR SGNFAC
STA TMP_FLAG
LDY #5
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
JSR FACMEM
LDY #5
STY TMP3_ZP
JSR INCTMPZP
LDY #0
LDA TMP_FLAG
STA (TMP_ZP),Y
INY
LDA #1
STA (TMP_ZP),Y
INY
LDA #15
STA (TMP_ZP),Y
LDY #3
STY TMP3_ZP
JSR INCTMPZP
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
NEXT		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHFOR	LDA TMP_ZP+1
STA TMP3_REG+1
LDA TMP_ZP
STA TMP3_REG
SEC
SBC #2
STA TMP_ZP
BCS NOPV1N1
DEC TMP_ZP+1
NOPV1N1		LDY #0
LDA (TMP_ZP),Y
BNE NOGOSUB
JMP NEXTWOFOR
NOGOSUB
INY
JSR COMPACT191
BCS NOPV1N2
DEC TMP_ZP+1
NOPV1N2		DEY
LDA A_REG
BEQ LOW0
CMPFOR		CMP (TMP_ZP),Y
BNE SEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ FOUNDFOR
JMP SEARCHFOR
LOW0		LDX A_REG+1
BEQ FOUNDFOR
BNE CMPFOR
FOUNDFOR	LDA TMP_ZP
STA TMP2_REG
LDA TMP_ZP+1
STA TMP2_REG+1
VARREAL
LDY #0
STY A_REG+1 ; Has to be done anyway...so we can do it here as well
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
TXA
JSR REALFAC
CALCNEXT	LDA TMP_ZP
CLC
ADC #4
STA TMP_ZP
BCC NOPV2IN
INC TMP_ZP+1
NOPV2IN		STA TMP_REG
LDY TMP_ZP+1
STY TMP_REG+1
JSR FASTFADDMEM
LDA TMP2_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
STOREREAL
LDY #0
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
JSR FACMEM	;FAC TO (X/Y)
CMPFOR		LDA #5
STA TMP3_ZP
LDA TMP_REG
CLC
ADC #5
STA TMP_REG
BCC NOPV3
INC TMP_REG+1
NOPV3		LDY TMP_REG+1
JSR CMPFAC 	;CMPFAC
BEQ LOOPING
PHA
LDY #14
LDA (TMP_ZP),Y
BEQ STEPZERO
ROL
BCC STEPPOS
STEPNEG		PLA
ROL
BCC LOOPING
BCS EXITLOOP
STEPPOS		PLA
ROL
BCC EXITLOOP
LOOPING		LDA TMP3_REG
STA FORSTACKP
LDA TMP3_REG+1
STA FORSTACKP+1
LDA TMP2_REG
CLC
ADC #2
STA TMP2_REG
BCC NOPV4IN
INC TMP2_REG+1
NOPV4IN		LDY #0
STY A_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
LDA (TMP_ZP),Y
STA JUMP_TARGET
INY
LDA (TMP_ZP),Y
STA JUMP_TARGET+1
RTS
STEPZERO	PLA
JMP LOOPING
EXITLOOP	LDA TMP2_REG
STA FORSTACKP
LDA TMP2_REG+1
STA FORSTACKP+1
LDA #1
STA A_REG
RTS
;###################################
;###################################
RETURN		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHGOSUB	LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS NOPV1SG
DEC TMP_ZP+1
NOPV1SG		LDY #0
LDA (TMP_ZP),Y
BEQ FOUNDGOSUB
INY
LDA (TMP_ZP),Y
STA TMP3_ZP
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS NOPV1GS
DEC TMP_ZP+1
NOPV1GS		JMP SEARCHGOSUB
FOUNDGOSUB
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
GOSUB		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
TYA
STA (TMP_ZP),Y
INY
STA (TMP_ZP),Y
INY
TYA
CLC
ADC TMP_ZP
STA FORSTACKP
BCC GOSUBNOOV
INC FORSTACKP+1
GOSUBNOOV	RTS
;###################################
;###################################
QUEUESIZE	LDY INPUTQUEUEP
LDA #0
JSR INTFAC
JMP FACXREG
;###################################
;###################################
CLEARQUEUE	LDA #$0
STA INPUTQUEUEP
RTS
;###################################
;###################################
READINIT	LDA DATASP
STA TMP3_ZP
LDA DATASP+1
STA TMP3_ZP+1
LDY #$0
LDA (TMP3_ZP),Y
INC TMP3_ZP
BNE READNOOV
INC TMP3_ZP+1
READNOOV	CMP #$FF
BNE MOREDATA
JMP OUTOFDATA
MOREDATA	RTS
;###################################
;###################################
READADDPTR	STX TMP_REG+1
LDA TMP3_ZP
CLC
ADC TMP_REG+1
STA TMP3_ZP
BCC READADDPTRX
INC TMP3_ZP+1
READADDPTRX	RTS
;###################################
;###################################
READSTR		JSR READINIT
CMP #$2
BNE DATA2STR		; It's a number and has to be converted
LDA TMP3_ZP
STA A_REG
LDA TMP3_ZP+1
STA A_REG+1
LDA (TMP3_ZP),Y
CLC
ADC TMP3_ZP
STA TMP3_ZP
BCC READNOOV2
INC TMP3_ZP+1
READNOOV2	JSR NEXTDATA
INC DATASP
BNE READNOOV3
INC DATASP+1
READNOOV3	RTS
;###################################
;###################################
NEXTDATA	LDA TMP3_ZP			; Adjust pointer to the next element
STA DATASP
LDA TMP3_ZP+1
STA DATASP+1
RTS
;###################################
;###################################
DATA2STR	CMP #$1
BEQ DREAL2STR		; It's a floating point number...
CMP #$0
BEQ DATA2STRINT
CMP #$4
BCS DSHORTBYTE
LDA (TMP3_ZP),Y		; It's a byte
TAY
JSR BYTEFAC
LDX #1
JSR READADDPTR
JMP DFAC2STR
DATA2STRINT	LDA (TMP3_ZP),Y		; It's an integer
STA TMP_REG
INY
LDA (TMP3_ZP),Y
LDY TMP_REG
JSR INTFAC
LDX #2
JSR READADDPTR
JMP DFAC2STR
DSHORTBYTE	TAY
JSR BYTEFAC
JMP DFAC2STR
DREAL2STR	LDA TMP3_ZP
LDY TMP3_ZP+1
JSR REALFAC
LDX #5
JSR READADDPTR
DFAC2STR	JSR NEXTDATA
JMP STRINTREAD
;###################################
;###################################
STRINTREAD	LDY #1			; Special INT to STR routine that handles the fact that in case of conversions from data entries, there's no leading blank for positive numbers
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOPREAD	INY
LDA LOFBUFH,Y
BNE STRLOOPREAD
STY LOFBUF
TYA
TAX			; Length in X
LDA LOFBUFH
CMP #$20
BNE STRREADNP
INC TMP_ZP	; Starts with blank? Remove it...
INC TMP_ZP+1
DEC LOFBUF
LDA LOFBUF
STA LOFBUFH  ; Copy the new length over
DEX			 ; length -1
STRREADNP	LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
CLEANINPUT	LDY #0				; Processes an input string similar to BASIC's with the only difference that a " at the "wrong" location will be ignored instead of triggering an error
LDX #0
STY STORE1			; Marks "quote-mode", 0 if off, 1 is on
STY STORE2			; Char found, 0 means none, something else means at least one
DEY
CILOOP		INY
LDA $0200,Y
BNE CINOEND
JMP CIEND			; String terminator found, exit
CINOEND		STA STORE3			; store current char
LDA STORE1
BEQ CINOQUOTE		; Not in quote mode...
LDA STORE3
CMP	#$22			; found a quote (in quote mode)?
BNE	CISTILLQUOTE	; no? Then we are still in quote mode
LDA #0				; yes? quote mode off
STA STORE1
JMP CILOOP
CISTILLQUOTE
STA $0200,X
INX
JMP CILOOP
CINOQUOTE	LDA STORE3
CMP	#$22
BNE	CISOMECHAR		; no quote?
CIFIRSTCHAR	LDA #1				; quote?
STA STORE1			; enable quote mode
STA STORE2			; set char flag
JMP CILOOP
CISOMECHAR 	CMP #$3A			; a : then stop evaluating here
BNE	CINOCOLON
JMP CIEND
CINOCOLON	CMP #$2C			; a ,?
BNE CINOCOMMA
LDA #$22			; replace a comma by a ". This will be handled later in the actual input routine
STA $0200,X
INX
LDA #0
STA STORE2			; Reset char flag to 0
JMP CILOOP
CINOCOMMA	CMP #$20			; a blank? Only add this, if char flag is !=0
BNE	CINOSPACE
LDA STORE2			; check char flag
BEQ CINEXT			; Set? Then continue normally
LDA STORE3
CINOSPACE	STA $0200,X
STA STORE2			; update char flag with some value!=0
INX
CINEXT		JMP CILOOP
CIEND		LDA #0
STA $0200,X			; Write terminator...
RTS					; ...and exit
;###################################
;###################################
QMARKOUT1	LDA #1
STA TMP_ZP
JMP QMARKOUT
;###################################
;###################################
QMARKOUT	LDA IOCHANNEL				; only print the ? if it's keyboard/direct input. IOCHANNEL holds the active io device
BNE NOQMARK
JSR REROUTE
LDA #63
LDY TMP_ZP
CPY #2				; print either one or two question marks
BNE ONEQMARK
JSR CHROUT
ONEQMARK	JSR CHROUT
LDA #32
JSR CHROUT
JMP RESETROUTE
NOQMARK		RTS
;###################################
;###################################
INPUTSTR	LDA #$0
INPUTSTR2	STA TMP_REG+1
LDA #$0
STA TMP_REG
STA TMP_FLAG
LDX INPUTQUEUEP
BEQ INPUTNORM
LDA #LOFBUF
LDX #$1
CLC
ADC INPUTQUEUE
STA TMP_ZP
BCC INNONO
LDX #$2
INNONO		STX TMP_ZP+1
DEC	INPUTQUEUEP		; Decrement the queue size
LDY INPUTQUEUE		; Store current offset in Y
STY TMP_REG			; Store the value to subtract it later on
DEY
LDX #$0
SHRINKQ		LDA INPUTQUEUEP
BEQ QUEUEEMPTY
INX
LDA INPUTQUEUE,X	; Copy the queue's content down one entry
DEX
STA INPUTQUEUE,X
INX
CPX INPUTQUEUEP
BNE SHRINKQ
QUEUEEMPTY	JMP ISTRLOOP
INPUTNORM	AND #$FF
JSR INPUT
JSR CLEANINPUT
LDA #LOFBUF
STA TMP_ZP
LDA #$1
STA TMP_ZP+1
LDY #0
DEY
ISTRLOOP	INY
LDA INPUTBUF,Y
TAX
CMP #$22			; found "?  (" is a replacement for , at this stage because " can't occur in an input string while , can)
BNE	ICHECK
STA TMP_FLAG
LDA #$0
STA INPUTBUF,Y			; replace , by the string terminator
LDX INPUTQUEUEP		; load the queue size
BNE	INQUEUENE		; If empty, set at least to one
STA INPUTQUEUE		; ...and set the first index to 0
INX
INQUEUENE	INY
TYA
STA INPUTQUEUE,X	; store the offset in the queue
INX
STX INPUTQUEUEP		; update the queue size
JMP ISTRLOOP		; Back to loop...
ICHECK		TXA					; String terminator?
BNE ISTRLOOP		; No, loop...
LDA TMP_FLAG
BEQ	ISIMPLECOPY
JMP	INPUTSTR
ISIMPLECOPY	TYA
SEC
SBC TMP_REG
LDY #0
STA (TMP_ZP),Y
TAX				; Length in X
LDA TMP_REG+1	; Check for numeric mode
BEQ	INISSTR
RTS
INISSTR		LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JSR COPYONLY
RTS
;###################################
;###################################
INPUTNUMBER	LDA #$1
JSR INPUTSTR2
LDA TMP_ZP
STA INDEX1
LDA TMP_ZP+1
STA INDEX1+1
LDY #0
STY VALTYPE
LDA (INDEX1),Y
STA TMP_REG		; Store the string's length
TAY
INC INDEX1
BNE VALSTR2
INC INDEX1+1
VALSTR2		LDY #$0			; check, if it's a valid number input. This check might not be 100% like the one done by BASIC V2...well, who cares...?!?
DEY
LDX #$0			; bit 0: Number found, bit 1: plus found, bit 2: minus found, bit 3: e found, bit 4: . found
NUMCHKLOOP	INY
CPY TMP_REG
BEQ NUMOK
LDA (INDEX1),Y
CMP #$20
BEQ NUMCHKLOOP	; ignore spaces
CMP #43			; check +
BNE	NOPLUS
TXA
BIT VAL6		; nothing found yet, ok
BNE	CHECKERR
ORA #2
TAX
JMP NUMCHKLOOP
NOPLUS		CMP #45			; check -
BNE	NOMINUS
TXA
BIT VAL6		; nothing found yet, ok
BNE	CHECKERR
ORA #4
TAX
JMP NUMCHKLOOP
NOMINUS		CMP #69			; check -
BNE	NOEEE
TXA
BIT VAL8		; no e found yet, ok
BNE	CHECKERR
ORA #8
AND #249		; +- are allowed after an e again
TAX
JMP NUMCHKLOOP
NOEEE		CMP #46			; check .
BNE	NOPOINT
TXA
BIT VAL24		; no . found yet, ok
BNE	CHECKERR
ORA #16
TAX
JMP NUMCHKLOOP
NOPOINT		CMP #48
BCC	CHECKERR	; <0
CMP #58
BCS CHECKERR	; >9
TXA
ORA #1
TAX
JMP NUMCHKLOOP
VAL1		.BYTE 1
VAL6		.BYTE 6
VAL8		.BYTE 8
VAL24		.BYTE 24
CHECKERR	LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
RTS				; Flag error and return
NUMOK		LDA TMP_REG
JSR VALS
LDA #$0			; flag as number
STA X_REG
JMP FACYREG		; ...and return
;###################################
;###################################
GETADOLLAR	JSR GETSTR		; Saves memory in the common GET A$ case...
JSR COMPACT120
LDA #<VAR_A$
LDY #>VAR_A$
JMP COPYSTRING
;###################################
;###################################
GETSTR		LDA #8
LDY #0
JSR COMPACTF
LDY #0
STY CMD_NUM		; Reset CMD target
JSR GETIN
CMP #0			; Without this compare, it works for disk and keyboard GETs...but not for those from the RS232 port...DOH!
BNE SOMEKEY
NOKEY		LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
RTS
SOMEKEY		TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
LDY #1
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC GETSTR1
INC STRBUFP+1
GETSTR1		RTS
;###################################
;###################################
ZEROSET		LDA #0
STA X_REG
STA X_REG+1
STA X_REG+2
STA X_REG+3
STA X_REG+4
RTS
;###################################
;###################################
SEQ			JSR CMPSTR
LDA TMP3_ZP
BNE NOTSEQ
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
NOTSEQ		JMP ZEROSET
;###################################
;###################################
SNEQ		JSR CMPSTR
LDA TMP3_ZP
BEQ NOTSEQ
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
;###################################
;###################################
CMPSTR		LDY #0			;Returns 0 if strings are equal, something else otherwise
LDX #1
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
CMP TMP_ZP+1
BNE CMPSTRSK1
LDA TMP2_ZP
CMP TMP_ZP
BNE CMPSTRSK1
LDX #0
JMP STRCMPRES
CMPSTRSK1	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
TAX
BNE NOTZCTR
LDX #0
JMP STRCMPRES
NOTZCTR		INC TMP_ZP
BNE SCSKP1
INC TMP_ZP+1
SCSKP1		INC TMP2_ZP
BNE CMPSTRLOOP
INC TMP2_ZP+1
CMPSTRLOOP	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
INY
DEX
BNE CMPSTRLOOP
STRCMPRES	STX TMP3_ZP
RTS
;###################################
;###################################
PUSHINT		LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDA TMP_ZP
LDY #0
STA (TMP2_ZP),Y
LDA TMP_ZP+1
INY
STA (TMP2_ZP),Y
LDA TMP2_ZP
CLC
ADC #2
STA FPSTACKP
LDA TMP2_ZP+1
ADC #0
STA FPSTACKP+1
RTS
;###################################
;###################################
POPINT2B	LDA FPSTACKP
SEC
SBC #2
STA FPSTACKP
LDA FPSTACKP+1
SBC #0
STA FPSTACKP+1
LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDY #0
LDA (TMP2_ZP),Y
STA B_REG
INY
LDA (TMP2_ZP),Y
STA B_REG+1
RTS
;##################################
;##################################
REALFACPUSH	STA TMP_ZP
STY	TMP_ZP+1
LDX FPSTACKP
LDY FPSTACKP+1
STX TMP2_ZP
STY TMP2_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVRFPXX
INC FPSTACKP+1
NOPVRFPXX	RTS
;###################################
;###################################
PUSHREAL	LDX FPSTACKP
LDY FPSTACKP+1
JSR FACMEM
LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVPUR
INC FPSTACKP+1
NOPVPUR		RTS
;###################################
;###################################
POPREAL2X	LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR2X
DEC FPSTACKP+1
NOPVPR2X	LDA FPSTACKP
LDY FPSTACKP+1
JSR REALFAC
JSR XREGARG
RTS
;###################################
;###################################
POPREAL		LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR
DEC FPSTACKP+1
NOPVPR		LDA FPSTACKP
LDY FPSTACKP+1
JMP REALFAC
;###################################
;###################################
POPREALXREG LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPRXR
DEC FPSTACKP+1
NOPVPRXR	LDA FPSTACKP
LDY FPSTACKP+1
STA TMP_ZP
STY TMP_ZP+1
LDY #$4
LDA (TMP_ZP),Y
STA X_REG+4
STA FACLO
DEY
LDA (TMP_ZP),Y
STA X_REG+3
STA FACMO
DEY
LDA (TMP_ZP),Y
STA X_REG+2
STA FACMOH
DEY
LDA (TMP_ZP),Y
STA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
DEY
LDA (TMP_ZP),Y
STA X_REG
STA FACEXP
STY FACOV
RTS
;###################################
;###################################
SHL			LDA FACEXP
BEQ SHLOK
CLC
ADC A_REG
BCC SHLOK
LDA #0
STA FACSGN
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
LDA #$FF
SHLOK		STA FACEXP
RTS
;###################################
;###################################
INCTMPZP	LDA TMP_ZP
CLC
ADC TMP3_ZP
STA TMP_ZP
BCC NOPV2
INC TMP_ZP+1
NOPV2		RTS
;###################################
;###################################
ICMP		STY TMP3_ZP
STA TMP3_ZP+1
LDA TMP_ZP+1
CMP TMP3_ZP+1
BNE ICMPNE2
LDA TMP_ZP
CMP TMP3_ZP
ICMPNE		BEQ ICMPEQ
BCS ICMPHIGHER
JMP ICMPLOWER
ICMPNE2		BPL ICMPHIGHER
JMP ICMPLOWER
ICMPEQ		LDA #0
RTS
ICMPLOWER	LDA #$FF
SEC
RTS
ICMPHIGHER	LDA #$01
CLC
RTS
;###################################
;###################################
COPY2_XYA	STA TMP3_ZP
COPY2_XY	STX TMP_ZP
STY TMP_ZP+1
COPY3_XY	LDY #0
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
RTS
;###################################
;###################################
COPY2_XYA_XREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_XREG
LDX #<X_REG		; the pointer to X_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA X_REG
INY
LDA (TMP3_ZP),Y
STA X_REG+1
INY
LDA (TMP3_ZP),Y
STA X_REG+2
INY
LDA (TMP3_ZP),Y
STA X_REG+3
INY
LDA (TMP3_ZP),Y
STA X_REG+4
RTS
;###################################
;###################################
COPY2_XYA_CREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_CREG
LDX #<C_REG		; the pointer to C_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA C_REG
INY
LDA (TMP3_ZP),Y
STA C_REG+1
INY
LDA (TMP3_ZP),Y
STA C_REG+2
INY
LDA (TMP3_ZP),Y
STA C_REG+3
INY
LDA (TMP3_ZP),Y
STA C_REG+4
RTS
;###################################
;###################################
COPY2_XYA_YREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_YREG
LDX #<Y_REG		; the pointer to Y_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA Y_REG
INY
LDA (TMP3_ZP),Y
STA Y_REG+1
INY
LDA (TMP3_ZP),Y
STA Y_REG+2
INY
LDA (TMP3_ZP),Y
STA Y_REG+3
INY
LDA (TMP3_ZP),Y
STA Y_REG+4
RTS
;###################################
;###################################
COPY_XREG2YREG
LDA X_REG
STA Y_REG
LDA X_REG+1
STA Y_REG+1
LDA X_REG+2
STA Y_REG+2
LDA X_REG+3
STA Y_REG+3
LDA X_REG+4
STA Y_REG+4
RTS
;###################################
;###################################
<IF !BIGRAM>
FACWORD
LDA FACEXP			; Check if there's a -0 in FAC1
BNE DOFACWORD
STA FACSGN			; make sure that it's not -0
DOFACWORD:
JMP XFACWORD
</IF>
;###################################
;###################################
ONETOFAC    LDX #129
STX FAC
DEX
STX FAC+1
LDX #0
STX FAC+2
STX FAC+3
STX FAC+4
STX FAC+5
STX FAC+6
RTS
;###################################
;###################################
FASTAND		LDA ARGEXP			; Check ARG for 0
BNE CHECKFAC
STA FACSGN			; if so, set FAC to 0 and exit
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
STA FACEXP
RTS
CHECKFAC	LDA FACEXP			; Check if there's a -1 in FAC1
BNE FACNOTNULL
STA FACSGN			; make sure that it's not -0
RTS				; FAC is 0, then exit
FACNOTNULL	CMP #$81
BNE NORMALAND
LDA FACHO
CMP #$80
BNE NORMALAND
LDA FACMOH
BNE NORMALAND
LDA FACMO
BNE NORMALAND
LDA FACLO
BNE NORMALAND
LDA FACSGN
ROL
BCC NORMALAND
LDA ARGEXP			; Check if there's a -1 in ARG
CMP #$81
BNE NORMALAND
LDA ARGHO
CMP #$80
BNE NORMALAND
LDA ARGMOH
BNE NORMALAND
LDA ARGMO
BNE NORMALAND
LDA ARGLO
BNE NORMALAND
LDA ARGSGN
ROL
BCC NORMALAND
RTS				; both, FAC1 and ARG contain -1...then we leave FAC1 untouched and return
NORMALAND	JMP ARGAND
;###################################
;###################################
FASTOR		LDA FACEXP			; Check FAC for 0
BNE CHECKFACOR
LDA ARGEXP			; if so, is ARG = 0 as well?
BNE CHECKARGOR	; no, continue with ARG (FAC is still 0 here)
LDA #0
STA FACSGN			; make sure that the negative flag is deleted in this case...
RTS				; yes? Then we leave FAC untouched
CHECKFACOR	LDA FACEXP			; Check if there's a -1 in FAC1
CMP #$81
BNE NORMALOR
LDA FACHO
CMP #$80
BNE NORMALOR
LDA FACMOH
BNE NORMALOR
LDA FACMO
BNE NORMALOR
LDA FACLO
BNE NORMALOR
LDA FACSGN
ROL
BCC NORMALOR
CHECKARGOR	LDA ARGEXP			; Check if there's a -1 in ARG
BNE CHECKARGOR2
RTS 			; ARG is actually 0? Then the value of FAC doesn't change. We can exit here
CHECKARGOR2	CMP #$81
BNE NORMALOR
LDA ARGHO
CMP #$80
BNE NORMALOR
LDA ARGMOH
BNE NORMALOR
LDA ARGMO
BNE NORMALOR
LDA ARGLO
BNE NORMALOR
LDA ARGSGN
AND #$80
CMP #$80
BNE NORMALOR
JMP ARGFAC		; ARG is 1, so just copy it to FAC and exit (implicit)
NORMALOR	JMP FACOR
;###################################
;###################################
LOCKCHANNEL
PHA
LDA #$FF
STA CHLOCKFLAG
PLA
RTS
;##################################
;##################################
UNLOCKCHANNEL
PHA
LDA #0
STA CHLOCKFLAG
PLA
JMP CLRCH
;###################################
;###################################
INITOUTCHANNEL
LDA CHLOCKFLAG
BEQ INITOUT2
CMP #$FF
BNE SKIPINITCH
INITOUT2
JSR COMPACT187
TYA
TAX
CPX CMD_NUM
BNE CMDNEQUAL
LDY #0
STY CMD_NUM			; Reset CMD channel
CMDNEQUAL	STA CHANNEL
STA CHLOCKFLAG
JMP CHKOUT
SKIPINITCH
RTS
;###################################
;###################################
INITINCHANNEL
LDA IOCHANNEL
STA STORE1+1
LDA #1
STA IOCHANNEL		; Something that's not the screen...that's enough for the check the CRSRRIGHT does...
JSR COMPACT187
TYA
TAX
STA CHANNEL
STA CHLOCKFLAG
JMP CHKIN
RTS
;###################################
;###################################
CLRCHNEW
LDA CHLOCKFLAG
BNE SKIPCLRCH
JMP CLRCH
SKIPCLRCH
RTS
;###################################
;###################################
INTOUTCHANNEL
JSR INITOUTCHANNEL
JSR INTOUT
JMP CLRCHNEW
;###################################
;###################################
INPUTSTRCHANNEL
JSR INITINCHANNEL
JSR INPUTSTR
JMP CLRINCH
;###################################
;###################################
INPUTNUMBERCHANNEL
JSR INITINCHANNEL
JSR INPUTNUMBER
JMP CLRINCH
;###################################
;###################################
STROUTCHANNEL
JSR INITOUTCHANNEL
JSR STROUT
JMP CLRCHNEW
;###################################
;###################################
LINEBREAKCHANNEL
JSR INITOUTCHANNEL
JSR LINEBREAK
JMP CLRCHNEW
;###################################
;###################################
TABCHANNEL
JSR INITOUTCHANNEL
TABCHANNELINT
LDA CHANNEL
CMP #3		; To the screen?
BEQ TABSCREEN
TABCHANNEL2	LDA IOCHANNEL
STA STORE1
LDA #1
STA IOCHANNEL		; Something that's not the screen...that's enough for the check the CRSRRIGHT does...
JSR YREGFAC
JSR FACWORD
TYA
TAX
JMP EXITCHANNEL
TABSCREEN
JSR CLRCHNEW
JMP TAB
;###################################
;###################################
EXITCHANNEL	CLC
JSR TABSPC
JSR CLRCHNEW
LDA STORE1
STA IOCHANNEL
RTS
;###################################
;###################################
CLRINCH		JSR CLRCH
LDA STORE1+1
STA IOCHANNEL
RTS
;###################################
;###################################
CHECKCMD	LDA CMD_NUM		; if CMD mode, then print an additional space
BEQ NOCMD
JSR REROUTE
LDA #$20
JMP CHROUT
JSR RESETROUTE
NOCMD		RTS
;###################################
;###################################
OPEN		JSR SETEMPTYSTR	; Prepare with an empty string
JSR YREGFAC
JSR FACWORD
STY TMP_REG		; store parameter count in TMP_REG
JSR XREGFAC
JSR FACWORD
STY LOGICADDR	; store logical address
DEC TMP_REG
BEQ ALLPARAMS
JSR COMPACT187
STY DEVICENUM	; store device number
DEC TMP_REG
BEQ ALLPARAMS
LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR FACWORD
STY SECADDR		; store secondary address
DEC TMP_REG
BEQ ALLPARAMS
JSR SETNAMEPRT
ALLPARAMS
<IF BOOST>
JSR BOOSTOFF
</IF>
JSR OPENCH
BCS OPENERR
RTS
OPENERR		STA TMP2_ZP
LDA LOGICADDR
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
LDX TMP2_ZP
JMP ERRALL
;###################################
;###################################
SETEMPTYSTR
LDA #<EMPTYSTR
STA FILEADDR
LDA #>EMPTYSTR
STA FILEADDR+1
LDA #0
STA FILELEN
STA LOGICADDR
STA DEVICENUM
STA SECADDR
RTS
;###################################
;###################################
SETNAMEPRT	LDA G_REG
LDY G_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y	; get string parameter length
STA FILELEN
INC G_REG
BNE SNPNOOV
INC G_REG+1
SNPNOOV		LDA G_REG
LDY G_REG+1
STA FILEADDR		; low byte of string parameter
STY FILEADDR+1	; high byte of string parameter
RTS
;###################################
;###################################
CLOSE		JSR XREGFAC
JSR FACWORD
TYA				; file number into A
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
RTS
;###################################
;###################################
FIDEX		CPY #0
BNE FIDEXNOV
SEC
SBC #$1
FIDEXNOV	DEY
JSR INTFAC
JMP FACXREG
;###################################
;###################################
FIINX		INY
BNE FIINXNOV
CLC
ADC #$1
FIINXNOV	JSR INTFAC
JMP FACXREG
;###################################
;###################################
SUPERFIINX	INY
BNE SFIINXNOV
CLC
ADC #$1
CMP #$80
BNE SFIINXNOV
JMP ILLEGALQUANTITY
SFIINXNOV	RTS
;###################################
;###################################
SUPERFIDEX	CPY #0
BNE SUPERFIDEXNOV
SEC
SBC #$1
CMP #$7F
BNE SUPERFIDEXNOV
JMP ILLEGALQUANTITY
SUPERFIDEXNOV
DEY
RTS
;###################################
;###################################
NEXTWOFOR
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0A
JMP ERRALL
;###################################
;###################################
OUTOFDATA
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0D
JMP ERRALL
;###################################
;###################################
OUTOFMEMORY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$10
JMP ERRALL
;###################################
;###################################
STRINGTOOLONG
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$17
JMP ERRALL
;###################################
;###################################
ILLEGALQUANTITY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERRIQ
;###################################
;###################################
EXTRAIGNORED
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERREI
;###################################
;###################################
FACXREG		LDA FACLO
STA X_REG+4
LDA FACMO
STA X_REG+3
LDA FACMOH
STA X_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA X_REG+1
LDA FACEXP
STA X_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
FACYREG		LDA FACLO
STA Y_REG+4
LDA FACMO
STA Y_REG+3
LDA FACMOH
STA Y_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA Y_REG+1
LDA FACEXP
STA Y_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
XREGFAC		LDA X_REG+4
STA FACLO
LDA X_REG+3
STA FACMO
LDA X_REG+2
STA FACMOH
LDA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA X_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
XREGARG		LDA X_REG+4
STA ARGLO
LDA X_REG+3
STA ARGMO
LDA X_REG+2
STA ARGMOH
LDA X_REG+1
STA ARGSGN
EOR FACSGN
STA ARISGN
LDA ARGSGN
ORA #$80
STA ARGHO
LDA X_REG
STA ARGEXP
LDA FACEXP
RTS
;###################################
;###################################
YREGFAC		LDA Y_REG+4
STA FACLO
LDA Y_REG+3
STA FACMO
LDA Y_REG+2
STA FACMOH
LDA Y_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA Y_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
<IF BOOST>
BOOSTENABLE
LDA $D030
CMP #$FF
BNE C128
RTS
C128
LDA #1
STA BOOSTFLAG
LDA #0
STA BOOSTCNT
LDA $0314
STA IRQROUT
LDA $0315
STA IRQROUT+1
SEI
LDA #<MYRASTER
STA $0314
LDA #>MYRASTER
STA $0315
LDA #46
STA $D012
LDA $D011
AND #127
STA $D011
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
MYRASTER
LDA $D019
BMI RASTER
LDA $DC0D
CLI
JMP $EA31
RASTER
STA $D019
LDA $D012
CMP #254
BCS SETSTART
LDA #0
STA $D030
LDA #254
STA $D012
JMP EXIT
SETSTART
LDA #1
STA $D030
LDA #46
STA $D012
EXIT
PLA
TAY
PLA
TAX
PLA
RTI
BOOSTFLAG
.BYTE 0
BOOSTCNT
.BYTE 0
IRQROUT
.WORD 0
NOBOOST
RTS
BOOSTOFF
LDA BOOSTFLAG
BEQ NOBOOST
SEI
LDA $D01A
AND #14
STA $D01A
LDA #0
STA $D030
INC BOOSTCNT
CLI
RTS
BOOSTON
LDA BOOSTFLAG
BEQ NOBOOST
LDA BOOSTCNT
BEQ BOOSTZERO	; Zero? Then just enable boost
BPL BOOSTNOV
LDA #0			; Counter >128, then reset it anyway (should not occur)
STA BOOSTCNT
JMP BOOSTZERO
BOOSTNOV
DEC BOOSTCNT
BNE NOBOOST
BOOSTZERO
SEI
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
BOOSTDIASBLE
LDA BOOSTFLAG
BEQ NOBOOST
JSR BOOSTOFF
SEI
LDA IRQROUT
STA $0314
LDA IRQROUT+1
STA $0315
CLI
RTS
</IF>
;###################################
;###################################
FASTFSUBMEM
JSR MEMARG
FASTFSUBARG
LDA FACSGN
EOR #$FF
STA FACSGN
EOR ARGSGN
STA ARISGN
LDA FACEXP
JMP FASTFADDARG
;###################################
;###################################
FASTFADDMEM
JSR MEMARG
FASTFADDARG
BNE FADDRET2   		; JUMP IF FAC IS NOT ZERO.
JMP ARGFAC
FADDRET2	LDA ARGEXP
BNE FADDRET1   		; JUMP IF ARG IS NOT ZERO.
RTS
FADDRET1	SEC
SBC FACEXP
BEQ FFADD_EXPEQ     ; JUMP IF NO SHIFTING NEEDED. THE A REGISTER IS ALREADY ZERO.
BCC FFADD_SHFARG1   ; JUMP IF ARG NEEDS SHIFTING (HAS SMALLER EXPONENT).
LDY ARGEXP
STY FACEXP
LDY ARGSGN
STY FACSGN
LDX #0
STX OLDOV      		; ARG HAS NO ROUNDING BITS.
LDX #FAC       		; INDICATE FAC IS THE SMALLEST OPERAND.
SEC
SBC #$08
BMI FFADD_SHFFAC2
FFADD_SHFFAC1
LDY FACLO      		; LO -> OV
STY FACOV
LDY FACMO      		; MO -> LO
STY FACMO+1
LDY FACMOH     		; MOH -> MO
STY FACMOH+1
LDY FACHO      		; HO -> MOH
STY FACHO+1
LDY #0
STY FACHO      		; 0 -> HO
SBC #$08       		; CARRY IS ALWAYS SET HERE.
BPL FFADD_SHFFAC1   ; JUMP IF MORE BYTES TO SHIFT.
FFADD_SHFFAC2
ADC #$08       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFADD_SHFFAC4   ; JUMP IF NO MORE SHIFTING.
TAY
LDA FACOV
FFADD_SHFFAC3
LSR FACHO      		; HO
ROR FACMOH     		; MOH
ROR FACMO      		; MO
ROR FACLO      		; LO
ROR            		; OV
DEY
BNE FFADD_SHFFAC3
JMP FFADD_MANADD2   ; NO MORE SHIFTING.
FFADD_SHFFAC4
LDA FACOV       	; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF FAC.
JMP FFADD_MANADD2
FFADD_EXPEQ
LDX FACOV
STX OLDOV
JMP FFADD_MANADD1
FFADD_SHFARG2
LDA FACOV      		; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF ARG.
JMP FFADD_MANADD1
FFADD_SHFARG1
LDX FACOV
STX OLDOV      		; OLDOV NOW CONTAINS ROUNDING BITS OF FAC.
LDX #$00       		; USE X-REGISTER FOR ROUNDING BITS OF ARG.
ADC #$08
BPL FFADD_SHFARG6   ; JUMP IF LESS THAN 8 SHIFTS.
FFADD_SHFARG3
LDX ARGLO      		; SHIFT RIGHT ONE BYTE
LDY ARGMO      		; MO -> LO
STY ARGMO+1
LDY ARGMOH     		; MOH -> MO
STY ARGMOH+1
LDY ARGHO      		; HO -> MOH
STY ARGHO+1
LDY #0
STY ARGHO      		; 0 -> HO
FFADD_SHFARG4
ADC #$08
BMI FFADD_SHFARG3
BEQ FFADD_SHFARG3
FFADD_SHFARG6
SBC #$08
BEQ FFADD_SHFARG2   ; JUMP IF NO MORE SHIFTING.
TAY
TXA            		; ROUNDING BITS.
FFADD_SHFARG5
LSR ARGHO
ROR ARGMOH
ROR ARGMO
ROR ARGLO
ROR         		; OV
INY
BNE FFADD_SHFARG5
FFADD_MANADD1
LDX #ARGEXP    		; INDICATE ARG IS THE SMALLEST OPERAND.
FFADD_MANADD2
BIT ARISGN
BMI FFADD_MANSUB1   ; JUMP IF OPERANDS HAVE DIFFERENT SIGN.
CLC
ADC OLDOV
STA FACOV
LDA FACLO
ADC ARGLO
STA FACLO
LDA FACMO
ADC ARGMO
STA FACMO
LDA FACMOH
ADC ARGMOH
STA FACMOH
LDA FACHO
ADC ARGHO
STA FACHO
BCC FFADD_RNDRTS
INC FACEXP
BEQ FFADD_OVERR
ROR FACHO
ROR FACMOH
ROR FACMO
ROR FACLO
ROR FACOV
FFADD_RNDRTS
RTS
FFADD_OVERR
JMP ILLEGALQUANTITY
FFADD_MANSUB1
LDY #FACEXP
CPX #ARGEXP
BEQ FFADD_MANSUB2
LDY #ARGEXP
FFADD_MANSUB2
SEC            		; NEGATE THE ROUNDING BITS BEFORE ADDING.
EOR #$FF
ADC OLDOV
STA FACOV
LDA 4,Y
SBC 4,X
STA FACLO
LDA 3,Y
SBC 3,X
STA FACMO
LDA 2,Y
SBC 2,X
STA FACMOH
LDA 1,Y
SBC 1,X
STA FACHO
BCS FCNORMAL
LDA FACSGN
EOR #$FF
STA FACSGN
LDA FACHO
EOR #$FF
STA FACHO
LDA FACMOH
EOR #$FF
STA FACMOH
LDA FACMO
EOR #$FF
STA FACMO
LDA FACLO
EOR #$FF
STA FACLO
LDA FACOV
EOR #$FF
CLC
ADC #1
STA FACOV
BNE FCNORMAL
INC FACLO
BNE FCNORMAL
INC FACMO
BNE FCNORMAL
INC FACMOH
BNE FCNORMAL
INC FACHO
FCNORMAL  	BIT FACHO
BMI FFADD_RET       ; JUMP IF NUMBER IS ALREADY NORMALIZED.
LDA #0         		; NUMBER OF BITS ROTATED.
CLC
FFADD_NORM3
LDX FACHO
BNE FFADD_NORM1
LDX FACHO+1
STX FACHO
LDX FACMOH+1
STX FACMOH
LDX FACMO+1
STX FACMO
LDX FACOV
STX FACLO
LDX #0
STX FACOV
ADC #$08
CMP #$20
BNE FFADD_NORM3
JMP FFADD_ZEROFAC
FFADD_NORM2
CLC
ADC #1
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
FFADD_NORM1
BPL FFADD_NORM2     ; WE MUST SHIFT LEFT ONE BIT
SEC
SBC FACEXP
BCS FFADD_ZEROFAC
EOR #$FF
CLC
ADC #1
STA FACEXP
FFADD_RET   RTS
FFADD_ZEROFAC
LDX #0
STX FACEXP
STX FACSGN
RTS
;###################################
;###################################
FASTFMULMEM
JSR MEMARG
FASTFMULARG
BEQ FFMUL_MULTRT    ; JUMP IF FAC IS ZERO.
LDA ARGEXP
BEQ FFMUL_ZEREMV    ; JUMP IF ARG IS ZERO.
CLC
ADC FACEXP
BCC FFMUL_TRYOFF
CLC
BPL FFMUL_ADJUST
JMP ILLEGALQUANTITY
FFMUL_ZEREMV
LDY #0
STY FACEXP     		; RESULT IS ZERO.
STY FACSGN
FFMUL_MULTRT
RTS
FFMUL_TRYOFF
BPL FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
FFMUL_ADJUST
ADC #$80       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
STA FACEXP
LDA ARISGN
STA FACSGN
LDY #0
STY RESHOP
STY RESHO
STY RESMOH
STY RESMO
STY RESLO
STY RESOV
STY FACHOP
FFMUL_B0
LSR ARGLO      		; B0
BCC FFMUL_B1
LDA RESOV
CLC
ADC FACMOH     		; A2
STA RESOV
LDA RESLO
ADC FACHO      		; A3
STA RESLO
LDA RESMO
ADC FACHOP     		; A4
STA RESMO
BCC FFMUL_B1
INC RESMOH
BNE FFMUL_B1
INC RESHO
BNE FFMUL_B1
INC RESHOP
FFMUL_B1
LSR ARGMO      		; B1
BCC FFMUL_B2
LDA RESOV
CLC
ADC FACMO      		; A1
STA RESOV
LDA RESLO
ADC FACMOH     		; A2
STA RESLO
LDA RESMO
ADC FACHO      		; A3
STA RESMO
LDA RESMOH
ADC FACHOP     		; A4
STA RESMOH
BCC FFMUL_B2
INC RESHO
BNE FFMUL_B2
INC RESHOP
FFMUL_B2
LSR ARGMOH     		; B2
BCC FFMUL_B3
LDA RESOV
CLC
ADC FACLO      		; A0
STA RESOV
LDA RESLO
ADC FACMO      		; A1
STA RESLO
LDA RESMO
ADC FACMOH     		; A2
STA RESMO
LDA RESMOH
ADC FACHO      		; A3
STA RESMOH
LDA RESHO
ADC FACHOP     		; A4
STA RESHO
BCC FFMUL_B3
INC RESHOP
FFMUL_B3
LSR ARGHO      		; B3
BCC FFMUL_ROTA
LDA RESOV
CLC
ADC FACOV      		; AV
STA RESOV
LDA RESLO
ADC FACLO      		; A0
STA RESLO
LDA RESMO
ADC FACMO      		; A1
STA RESMO
LDA RESMOH
ADC FACMOH     		; A2
STA RESMOH
LDA RESHO
ADC FACHO      		; A3
STA RESHO
LDA RESHOP
ADC FACHOP     		; A4
STA RESHOP
FFMUL_ROTA
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
ROL FACHOP
BMI FFMUL_FIN
JMP FFMUL_B0
FFMUL_FIN
LDA RESHOP
STA FACHO
LDA RESHO
STA FACMOH
LDA RESMOH
STA FACMO
LDA RESMO
STA FACLO
LDA RESLO
STA FACOV
JMP FCNORMAL    		; IN BASIC/XADD.S
MUL10
JSR ARGFAC      	; ARG = FAC; LEAVES EXPONENT IN A REGISTER.
TAX            		; EXPONENT
BEQ FFMUL_MUL101    ; RETURN IF ZERO.
CLC
ADC #2
BCS FFMUL_MUL102    ; JUMP IF OVERFLOW
STA FACEXP     		; STORE NEW EXPONENT.
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL102     ; JUMP IF OVERFLOW
FFMUL_MUL101
RTS
FFMUL_MUL102
JMP ILLEGALQUANTITY
MUL6
JSR ARGFAC      	; ARG = FAC
TAX            		; EXPONENT
BEQ FFMUL_MUL61     ; RETURN IF ZERO.
INC FACEXP
BEQ FFMUL_MUL62     ; JUMP IF OVERFLOW
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL62     ; OVERFLOW
FFMUL_MUL61
RTS
FFMUL_MUL62
JMP ILLEGALQUANTITY
;###################################
;###############################
INITVARS
JSR INITSTRVARS
LDA #0
LDY #4
REALINITLOOP0:
STA VAR_ER,Y
STA VAR_BA,Y
STA VAR_AD,Y
STA VAR_PP,Y
STA VAR_I,Y
STA VAR_II,Y
STA VAR_P,Y
STA VAR_ST,Y
STA VAR_J,Y
STA VAR_LI,Y
STA VAR_SD,Y
DEY
BMI REALLOOPEXIT0
JMP REALINITLOOP0
REALLOOPEXIT0:
STA VAR_DN%
STA VAR_DN%+1
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_T%
STA VAR_T%+1
LDA #<VAR_ID%[]
LDY #>VAR_ID%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_IC%
STA VAR_IC%+1
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_TC%
STA VAR_TC%+1
STA VAR_RR%
STA VAR_RR%+1
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_RT%
STA VAR_RT%+1
LDA #<VAR_MV%[]
LDY #>VAR_MV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_RS%[]
LDY #>VAR_RS%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_RD%
STA VAR_RD%+1
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_P%
STA VAR_P%+1
STA VAR_FF%
STA VAR_FF%+1
STA VAR_C%
STA VAR_C%+1
STA VAR_XO%
STA VAR_XO%+1
STA VAR_OC%
STA VAR_OC%+1
LDA #<VAR_OP%[]
LDY #>VAR_OP%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_OX%
STA VAR_OX%+1
STA VAR_T2%
STA VAR_T2%+1
STA VAR_UQ%
STA VAR_UQ%+1
LDA #<VAR_AC%[]
LDY #>VAR_AC%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_OG%[]
LDY #>VAR_OG%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_C2%
STA VAR_C2%+1
STA VAR_OD%
STA VAR_OD%+1
STA VAR_MX%
STA VAR_MX%+1
STA VAR_PO%
STA VAR_PO%+1
STA VAR_TB%
STA VAR_TB%+1
STA VAR_GC%
STA VAR_GC%+1
STA VAR_MO%
STA VAR_MO%+1
STA VAR_LR%
STA VAR_LR%+1
STA VAR_SF%
STA VAR_SF%+1
STA VAR_CC%
STA VAR_CC%+1
STA VAR_PP%
STA VAR_PP%+1
STA VAR_CO%
STA VAR_CO%+1
STA VAR_MS%
STA VAR_MS%+1
STA VAR_TI%
STA VAR_TI%+1
STA VAR_SK%
STA VAR_SK%+1
STA VAR_XC%
STA VAR_XC%+1
STA VAR_PL%
STA VAR_PL%+1
STA VAR_MI%
STA VAR_MI%+1
STA VAR_MR%
STA VAR_MR%+1
STA VAR_J%
STA VAR_J%+1
STA VAR_MD%
STA VAR_MD%+1
STA VAR_EL%
STA VAR_EL%+1
STA VAR_IL%
STA VAR_IL%+1
LDA #<VAR_LK%[]
LDY #>VAR_LK%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
RTS
;###############################
COMPACT0
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_RN$
LDY #>VAR_RN$
JMP COPYSTRING
;##################################################
COMPACT1
LDA #0
STA VAR_ER
STA VAR_ER+1
STA VAR_ER+2
STA VAR_ER+3
STA VAR_ER+4
RTS
;##################################################
COMPACT2
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT3
JSR COMPACT147
TYA
RTS
;##################################################
COMPACT4
STA G_REG
STY G_REG+1
LDY #0
TYA
RTS
;##################################################
COMPACT5
JSR ARRAYACCESS_INTEGER_INT
JSR COMPACT194
JMP CMPFAC
;##################################################
COMPACT6
LDA #<CONST_7
LDY #>CONST_7
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP CMPFAC
;##################################################
COMPACT7
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP CMPFAC
;##################################################
COMPACT8
STA G_REG
STY G_REG+1
LDY VAR_T%
LDA VAR_T%+1
RTS
;##################################################
COMPACT9
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFADDMEM
;##################################################
COMPACT10
JSR FASTFADDMEM
LDX #<VAR_AD
LDY #>VAR_AD
JMP FACMEM
;##################################################
COMPACT11
LDA #<CONST_11
LDY #>CONST_11
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT12
JSR COMPACT196
LDA #<VAR_A$
LDY #>VAR_A$
JMP COPYSTRING
;##################################################
COMPACT13
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JMP COPYSTRING
;##################################################
COMPACT14
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JMP REALFACPUSH
;##################################################
COMPACT15
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JMP REALFACPUSH
;##################################################
COMPACT16
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
JSR COMPACT61
RTS
;##################################################
COMPACT17
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT18
JSR COMPACT197
JSR CONCAT
LDA A_REG
LDY A_REG+1
RTS
;##################################################
COMPACT19
STA A_REG
STY A_REG+1
JSR CONCAT
LDA A_REG
LDY A_REG+1
RTS
;##################################################
COMPACT20
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_T%
LDA VAR_T%+1
JMP ICMP
;##################################################
COMPACT21
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT22
JSR COMPACT199
LDY VAR_IC%
LDA VAR_IC%+1
JMP ICMP
;##################################################
COMPACT23
LDA #0
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
RTS
;##################################################
COMPACT24
LDY VAR_IC%
LDA VAR_IC%+1
JSR FIDEX
JSR COMPACT204
JMP REALFACPUSH
;##################################################
COMPACT25
JSR COMPACT202
JMP REALFACPUSH
;##################################################
COMPACT26
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JMP REALFACPUSH
;##################################################
COMPACT27
JSR COMPACT200
JSR COMPACT201
JSR COMPACT203
RTS
;##################################################
COMPACT28
JSR COMPACT202
JSR COMPACT203
RTS
;##################################################
COMPACT29
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT203
RTS
;##################################################
COMPACT30
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT203
RTS
;##################################################
COMPACT31
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT32
JSR COMPACT171
JSR ARRAYACCESS_INTEGER_S
LDA X_REG
RTS
;##################################################
COMPACT33
JSR COPY2_XYA_XREG
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
JSR ARRAYACCESS_INTEGER_S
LDA X_REG
RTS
;##################################################
COMPACT34
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
RTS
;##################################################
COMPACT35
JSR COPY2_XYA_XREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
JMP ARRAYACCESS_INTEGER_S
;##################################################
COMPACT36
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT37
JSR COMPACT206
JMP ARRAYACCESS_STRING
;##################################################
COMPACT38
LDY #0
TYA
STY VAR_RR%
STA VAR_RR%+1
RTS
;##################################################
COMPACT39
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
RTS
;##################################################
COMPACT40
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT41
JSR COMPACT208
LDY VAR_RT%
LDA VAR_RT%+1
JMP ICMP
;##################################################
COMPACT42
STY VAR_RR%
STA VAR_RR%+1
JSR COMPACT209
RTS
;##################################################
COMPACT43
LDY #0
TYA
STY VAR_RT%
STA VAR_RT%+1
RTS
;##################################################
COMPACT44
LDA #<VAR_MV%[]
LDY #>VAR_MV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT45
LDY VAR_T%
LDA VAR_T%+1
STY AS_TMP
STA AS_TMP+1
RTS
;##################################################
COMPACT46
STY AS_TMP
STA AS_TMP+1
JSR COMPACT93
JMP ARRAYSTORE_INT_INTEGER
;##################################################
COMPACT47
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_RS%[]
LDY #>VAR_RS%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INT_INTEGER
;##################################################
COMPACT48
JSR REALFAC
JSR BASINT
JSR FACXREG
LDA #<CONST_24R
LDY #>CONST_24R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JMP PUSHREAL
;##################################################
COMPACT49
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JMP PUSHREAL
;##################################################
COMPACT50
JSR INTFAC
JSR BASINT
JSR FACXREG
JSR POPREAL2X
JMP FASTFADDARG
;##################################################
COMPACT51
JSR BASINT
JSR FACXREG
JSR POPREAL2X
JMP FASTFADDARG
;##################################################
COMPACT52
JSR COMPACT58
JMP FACXREG
;##################################################
COMPACT53
JSR COMPACT212
JSR FASTFADDARG
JMP FACXREG
;##################################################
COMPACT54
JSR BASINT
JSR FACXREG
JSR POPREAL2X
JSR FASTFADDARG
JMP FACXREG
;##################################################
COMPACT55
JSR COMPACT59
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
JMP ARRAYACCESS_INTEGER_SNX
;##################################################
COMPACT56
LDY VAR_T%
LDA VAR_T%+1
STY TMP_ZP
STA TMP_ZP+1
RTS
;##################################################
COMPACT57
STY TMP_ZP
STA TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
JMP ICMP
;##################################################
COMPACT58
JSR COMPACT211
JSR PUSHREAL
LDY VAR_RD%
LDA VAR_RD%+1
JSR COMPACT212
JMP FASTFADDARG
;##################################################
COMPACT59
JSR COMPACT211
JSR PUSHREAL
LDY VAR_RD%
LDA VAR_RD%+1
JSR COMPACT212
JSR FASTFADDARG
JMP FACXREG
;##################################################
COMPACT60
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT61
LDA #<VAR_PP
LDY #>VAR_PP
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT62
LDY #1
LDA #0
STY VAR_RT%
STA VAR_RT%+1
RTS
;##################################################
COMPACT63
LDA VAR_CC$
LDY VAR_CC$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT64
JSR COMPACT213
JMP LEN
;##################################################
COMPACT65
JSR COMPACT159
RTS
;##################################################
COMPACT66
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JMP ICMP
;##################################################
COMPACT67
JSR POPREAL2X
JSR FASTFSUBARG
LDX #<C_REG
LDY #>C_REG
JMP FACMEM
;##################################################
COMPACT68
JSR COMPACT145
RTS
;##################################################
COMPACT69
JSR COMPACT145
JMP LEN
;##################################################
COMPACT70
JSR SEQ
LDY #>X_REG
LDA #<X_REG
JMP REALFACPUSH
;##################################################
COMPACT71
JSR SEQ
JSR POPREAL2X
JSR FASTOR
JMP FACXREG
;##################################################
COMPACT72
JSR SEQ
JSR COMPACT214
RTS
;##################################################
COMPACT73
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
RTS
;##################################################
COMPACT74
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_CC$
LDY #>VAR_CC$
JMP COPYSTRING
;##################################################
COMPACT75
JSR SEQ
LDA #<X_REG
LDY #>X_REG
JMP REALFACPUSH
;##################################################
COMPACT76
LDA #<CONST_37
LDY #>CONST_37
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT77
LDA #<CONST_43
LDY #>CONST_43
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT78
LDY #0
TYA
STY VAR_FF%
STA VAR_FF%+1
RTS
;##################################################
COMPACT79
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT80
LDA #0
STA VAR_II
STA VAR_II+1
STA VAR_II+2
STA VAR_II+3
STA VAR_II+4
RTS
;##################################################
COMPACT81
LDA #<VAR_II
LDY #>VAR_II
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT82
LDY #1
LDA #0
STY VAR_FF%
STA VAR_FF%+1
RTS
;##################################################
COMPACT83
LDA #0
STA VAR_P
STA VAR_P+1
STA VAR_P+2
STA VAR_P+3
STA VAR_P+4
RTS
;##################################################
COMPACT84
JSR COMPACT216
LDA #<CONST_23R
LDY #>CONST_23R
RTS
;##################################################
COMPACT85
LDA #<VAR_P
LDY #>VAR_P
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT86
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT87
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_C%
LDA VAR_C%+1
JMP ICMP
;##################################################
COMPACT88
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT89
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT217
JMP CMPFAC
;##################################################
COMPACT90
JSR COMPACT217
JMP CMPFAC
;##################################################
COMPACT91
JSR INTFAC
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT92
JSR COMPACT218
JMP FASTFSUBMEM
;##################################################
COMPACT93
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT94
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT95
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR BASINT
JMP FACXREG
;##################################################
COMPACT96
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR BASINT
JSR FACXREG
LDY #3
LDA #0
STY A_REG
STA A_REG+1
JSR COPY_XREG2YREG
JSR XREGFAC
JSR SHL
JSR FACXREG
LDY #1
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JSR SHL
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JMP PUSHREAL
;##################################################
COMPACT97
JSR SHL
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JMP PUSHREAL
;##################################################
COMPACT98
LDA #<CONST_11
LDY #>CONST_11
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT99
JSR PUSHREAL
JSR COMPACT220
JSR POPREALXREG
JSR COMPACT108
JSR COMPACT221
RTS
;##################################################
COMPACT100
STA G_REG
STY G_REG+1
JSR COMPACT221
RTS
;##################################################
COMPACT101
LDA VAR_A$
LDY VAR_A$+1
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT102
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_TX$
LDY #>VAR_TX$
JMP COPYSTRING
;##################################################
COMPACT103
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_TX$
LDY #>VAR_TX$
JSR COPYSTRING
JMP GOSUB
;##################################################
COMPACT104
JSR COMPACT134
JSR GOSUB
JMP LINE_61000
;##################################################
COMPACT105
LDA #<VAR_II
LDY #>VAR_II
JSR REALFAC
JSR BASINT
JMP FACXREG
;##################################################
COMPACT106
JSR COMPACT219
JSR PUSHREAL
LDY VAR_OC%
LDA VAR_OC%+1
RTS
;##################################################
COMPACT107
LDA #<CONST_55
LDY #>CONST_55
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT108
LDA #<VAR_OP$[]
LDY #>VAR_OP$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT109
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
LDA A_REG
LDY A_REG+1
RTS
;##################################################
COMPACT110
JSR INTFAC
LDX #<VAR_I
LDY #>VAR_I
JMP FACMEM
;##################################################
COMPACT111
LDA #<VAR_AC%[]
LDY #>VAR_AC%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT112
LDY VAR_C%
LDA VAR_C%+1
STY AS_TMP
STA AS_TMP+1
RTS
;##################################################
COMPACT113
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_C%
STA VAR_C%+1
RTS
;##################################################
COMPACT114
LDY VAR_C%
LDA VAR_C%+1
JSR INTFAC
JMP FACYREG
;##################################################
COMPACT115
JSR REALFAC
JSR FACXREG
JSR POPREAL2X
JMP FASTAND
;##################################################
COMPACT116
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<VAR_I
LDY #>VAR_I
RTS
;##################################################
COMPACT117
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_OD$[]
LDY #>VAR_OD$[]
RTS
;##################################################
COMPACT118
LDA #<VAR_OD$[]
LDY #>VAR_OD$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT119
LDA #<VAR_I
LDY #>VAR_I
JSR CMPFAC
ROL
RTS
;##################################################
COMPACT120
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT121
LDA #<VAR_LX$[]
LDY #>VAR_LX$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT122
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
RTS
;##################################################
COMPACT123
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
RTS
;##################################################
COMPACT124
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_B$
LDY #>VAR_B$
JMP COPYSTRING
;##################################################
COMPACT125
LDA VAR_B$
LDY VAR_B$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT126
JSR COMPACT225
JMP LEN
;##################################################
COMPACT127
LDA #<CONST_72
LDY #>CONST_72
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT128
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JMP FACMEM
;##################################################
COMPACT129
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JMP FACMEM
;##################################################
COMPACT130
JSR COMPACT158
STY G_REG
STA G_REG+1
JSR COMPACT226
JSR COMPACT227
JMP OPEN
;##################################################
COMPACT131
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_SX$
LDY #>VAR_SX$
JMP COPYSTRING
;##################################################
COMPACT132
JSR COMPACT228
JSR COPYSTRING
JSR GOSUB
JMP LINE_45100
;##################################################
COMPACT133
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #0
STA A_REG
STA A_REG+1
RTS
;##################################################
COMPACT134
JSR COMPACT222
LDA #<VAR_TX$
LDY #>VAR_TX$
JMP COPYSTRING
;##################################################
COMPACT135
LDA VAR_TX$
LDY VAR_TX$+1
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT136
STA A_REG
STY A_REG+1
JSR SEQ
LDA X_REG
RTS
;##################################################
COMPACT137
JSR ONETOFAC
LDA #<VAR_II
LDY #>VAR_II
JMP FASTFADDMEM
;##################################################
COMPACT138
LDA #<CONST_78R
LDY #>CONST_78R
JSR COPY2_XYA_YREG
JSR COMPACT172
RTS
;##################################################
COMPACT139
LDA #<CONST_6R
LDY #>CONST_6R
JSR COPY2_XYA_XREG
JMP CLOSE
;##################################################
COMPACT140
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_CP$[]
LDY #>VAR_CP$[]
RTS
;##################################################
COMPACT141
LDY TMP2_ZP
LDA #0
JSR ICMP
ROL
RTS
;##################################################
COMPACT142
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_CT$
LDY #>VAR_CT$
JMP COPYSTRING
;##################################################
COMPACT143
LDA #<CONST_7
LDY #>CONST_7
JSR COMPACT229
RTS
;##################################################
COMPACT144
JSR REALFAC
JSR FACINT
STY VAR_T%
STA VAR_T%+1
RTS
;##################################################
COMPACT145
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT146
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_YREG
JMP YREGFAC
;##################################################
COMPACT147
JSR COMPACT192
LDY #0
RTS
;##################################################
COMPACT148
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
RTS
;##################################################
COMPACT149
JSR LINE_63100
LDA VAR_TX$
LDY VAR_TX$+1
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT150
JSR FACXREG
LDA #<X_REG
LDY #>X_REG
JMP REALFACPUSH
;##################################################
COMPACT151
LDA #<VAR_CP$[]
LDY #>VAR_CP$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT152
STA B_REG
STY B_REG+1
JSR LEN
LDA #$03
RTS
;##################################################
COMPACT153
LDA VAR_CT$
LDY VAR_CT$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT154
LDY #1
LDA #0
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_T%
STA VAR_T%+1
RTS
;##################################################
COMPACT155
LDY #1
LDA #0
STY VAR_SK%
STA VAR_SK%+1
RTS
;##################################################
COMPACT156
LDA #<VAR_J
LDY #>VAR_J
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT157
LDY VAR_CO%
LDA VAR_CO%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_T%
LDA VAR_T%+1
JMP ICMP
;##################################################
COMPACT158
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
RTS
;##################################################
COMPACT159
LDA #$02
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT160
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
JMP POPINT2B
;##################################################
COMPACT161
STY VAR_CO%
STA VAR_CO%+1
JSR GOSUB
JMP LINE_58500
;##################################################
COMPACT162
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
ROL
RTS
;##################################################
COMPACT163
STA B_REG
STY B_REG+1
LDA VAR_FI$
LDY VAR_FI$+1
RTS
;##################################################
COMPACT164
JSR REALFACPUSH
LDY VAR_DN%
LDA VAR_DN%+1
JSR INTFAC
JMP PUSHREAL
;##################################################
COMPACT165
LDA #0
STA VAR_J
STA VAR_J+1
STA VAR_J+2
STA VAR_J+3
STA VAR_J+4
LDY VAR_OC%
LDA VAR_OC%+1
RTS
;##################################################
COMPACT166
LDA #<VAR_J
LDY #>VAR_J
JSR REALFAC
JSR BASINT
JMP FACXREG
;##################################################
COMPACT167
LDA #<VAR_J
LDY #>VAR_J
JSR REALFAC
JSR FACINT
STY VAR_T2%
STA VAR_T2%+1
JMP GOSUB
;##################################################
COMPACT168
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JMP LINE_59900
;##################################################
COMPACT169
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_59900
LDY VAR_C%
LDA VAR_C%+1
RTS
;##################################################
COMPACT170
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_C%
LDA VAR_C%+1
RTS
;##################################################
COMPACT171
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_UV%[]
LDY #>VAR_UV%[]
RTS
;##################################################
COMPACT172
LDY STATUS
JSR BYTEFAC
LDX #<VAR_ST
LDY #>VAR_ST
JSR FACMEM
LDA #<VAR_ST
LDY #>VAR_ST
RTS
;##################################################
COMPACT173
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
LDX #<VAR_P
LDY #>VAR_P
JMP FACMEM
;##################################################
COMPACT174
LDA #<CONST_7
LDY #>CONST_7
JSR COPY2_XYA_YREG
LDA #<VAR_RV%[]
LDY #>VAR_RV%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INTEGER
;##################################################
COMPACT175
LDA VAR_TX$
LDY VAR_TX$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT176
JSR COMPACT232
JMP LEN
;##################################################
COMPACT177
JSR ONETOFAC
LDA #<VAR_I
LDY #>VAR_I
JMP FASTFADDMEM
;##################################################
COMPACT178
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
RTS
;##################################################
COMPACT179
JSR POPREAL2X
JSR FASTFSUBARG
JSR FACXREG
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
LDX #<C_REG
LDY #>C_REG
JMP FACMEM
;##################################################
COMPACT180
JSR XREGFAC
LDX #<VAR_PP
LDY #>VAR_PP
JMP FACMEM
;##################################################
COMPACT181
LDA #<CONST_6R
LDY #>CONST_6R
JSR REALFAC
JSR FACYREG
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
JMP CLEARQUEUE
;##################################################
COMPACT182
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RD$[]
LDY #>VAR_RD$[]
RTS
;##################################################
COMPACT183
LDY VAR_EL%
LDA VAR_EL%+1
JSR INTFAC
JMP PUSHREAL
;##################################################
COMPACT184
JSR XREGFAC
LDX #<VAR_P
LDY #>VAR_P
JMP FACMEM
;##################################################
COMPACT185
JSR INTFAC
LDX #<VAR_II
LDY #>VAR_II
JMP FACMEM
;##################################################
COMPACT186
LDA #0
LDY TMP2_ZP
STY VAR_C%
STA VAR_C%+1
RTS
;##################################################
COMPACT187
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JMP FACWORD
;##################################################
COMPACT188
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
RTS
;##################################################
COMPACT189
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
RTS
;##################################################
COMPACT190
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #1
LDA (TMP_ZP),Y
TAX
DEY
LDA (TMP_ZP),Y
TAY
TXA
RTS
;##################################################
COMPACT191
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
RTS
;##################################################
COMPACT192
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT193
JSR ARRAYACCESS_INTEGER_INT
JSR COMPACT194
RTS
;##################################################
COMPACT194
LDA #<CONST_7
LDY #>CONST_7
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT195
STA G_REG
STY G_REG+1
LDY VAR_T%
LDA VAR_T%+1
RTS
;##################################################
COMPACT196
LDA #<CONST_11
LDY #>CONST_11
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT197
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT198
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_T%
LDA VAR_T%+1
RTS
;##################################################
COMPACT199
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT200
LDA #0
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
RTS
;##################################################
COMPACT201
LDY VAR_IC%
LDA VAR_IC%+1
JSR FIDEX
JSR COMPACT204
RTS
;##################################################
COMPACT202
JSR FIDEX
JSR COMPACT204
RTS
;##################################################
COMPACT203
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT204
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
RTS
;##################################################
COMPACT205
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_IV%[]
LDY #>VAR_IV%[]
RTS
;##################################################
COMPACT206
LDA #<VAR_IT$[]
LDY #>VAR_IT$[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT207
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_IP%[]
LDY #>VAR_IP%[]
RTS
;##################################################
COMPACT208
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT209
LDY #0
TYA
STY VAR_RT%
STA VAR_RT%+1
RTS
;##################################################
COMPACT210
LDA #<VAR_RS%[]
LDY #>VAR_RS%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT211
JSR REALFAC
JSR BASINT
JSR FACXREG
LDA #<CONST_24R
LDY #>CONST_24R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFMULMEM
;##################################################
COMPACT212
JSR INTFAC
JSR BASINT
JSR FACXREG
JMP POPREAL2X
;##################################################
COMPACT213
LDA VAR_CC$
LDY VAR_CC$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT214
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
RTS
;##################################################
COMPACT215
LDY #1
LDA #0
STY VAR_FF%
STA VAR_FF%+1
RTS
;##################################################
COMPACT216
LDA #0
STA VAR_P
STA VAR_P+1
STA VAR_P+2
STA VAR_P+3
STA VAR_P+4
RTS
;##################################################
COMPACT217
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT218
JSR INTFAC
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT219
JSR REALFAC
JSR BASINT
JSR FACXREG
LDY #3
LDA #0
STY A_REG
STA A_REG+1
JSR COPY_XREG2YREG
JSR XREGFAC
JSR SHL
JSR FACXREG
LDY #1
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JSR SHL
LDA #<X_REG
LDY #>X_REG
JMP FASTFADDMEM
;##################################################
COMPACT220
LDA #<CONST_11
LDY #>CONST_11
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT221
JSR ARRAYSTORE_STRING
LDA #0
STA A_REG
STA A_REG+1
RTS
;##################################################
COMPACT222
LDA VAR_A$
LDY VAR_A$+1
STA TMP_ZP
STY TMP_ZP+1
RTS
;##################################################
COMPACT223
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<VAR_I
LDY #>VAR_I
RTS
;##################################################
COMPACT224
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
RTS
;##################################################
COMPACT225
LDA VAR_B$
LDY VAR_B$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
COMPACT226
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
RTS
;##################################################
COMPACT227
JSR FACMEM
JSR POPREALXREG
LDA #<CONST_66R
LDY #>CONST_66R
JMP COPY2_XYA_YREG
;##################################################
COMPACT228
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_SX$
LDY #>VAR_SX$
RTS
;##################################################
COMPACT229
JSR REALFAC
JSR FACINT
STY VAR_T%
STA VAR_T%+1
RTS
;##################################################
COMPACT230
LDY #1
LDA #0
STY VAR_SK%
STA VAR_SK%+1
RTS
;##################################################
COMPACT231
LDY STATUS
JSR BYTEFAC
LDX #<VAR_ST
LDY #>VAR_ST
JSR FACMEM
LDA #<VAR_ST
LDY #>VAR_ST
RTS
;##################################################
COMPACT232
LDA VAR_TX$
LDY VAR_TX$+1
STA B_REG
STY B_REG+1
RTS
;##################################################
; *** SUBROUTINES END ***
;##END_COMPACT
; *** CONSTANTS ***
CONSTANTS
; CONST: $start.rom
CONST_0	.BYTE 9
.STRG "start.rom"
; CONST: #0


; CONST: #1

CONST_2R	.REAL 1.0
; CONST: $Das klappt so nicht!
CONST_3	.BYTE 20
.STRG "Das klappt so nicht!"
; CONST: #3

CONST_4R	.REAL 3.0
; CONST: $Das bewirkt nichts mehr!
CONST_5	.BYTE 24
.STRG "Das bewirkt nichts mehr!"
; CONST: #2

CONST_6R	.REAL 2.0
; CONST: #-1.0

CONST_7	.REAL -1.0
; CONST: $Das verstehe ich nicht!
CONST_8	.BYTE 23
.STRG "Das verstehe ich nicht!"
; CONST: #39

CONST_9R	.REAL 39.0
; CONST: $' kenne ich nicht!
CONST_10	.BYTE 18
.STRG "' kenne ich nicht!"
; CONST: $
CONST_11	.BYTE 0
.STRG ""
; CONST: #15

CONST_12R	.REAL 15.0
; CONST: $Das will niemand haben!
CONST_13	.BYTE 23
.STRG "Das will niemand haben!"
; CONST: $Das kannst du nicht
CONST_14	.BYTE 20
.STRG "Das kannst du nicht "
; CONST: #33


; CONST: #10

CONST_16R	.REAL 10.0
; CONST: $Du hast bei dir:
CONST_17	.BYTE 16
.STRG "Du hast bei dir:"
; CONST: $nichts
CONST_18	.BYTE 6
.STRG "nichts"
; CONST: $Hier ist nichts!
CONST_19	.BYTE 16
.STRG "Hier ist nichts!"
; CONST: $Du kannst
CONST_20	.BYTE 10
.STRG "Du kannst "
; CONST: $ nicht nehmen!
CONST_21	.BYTE 14
.STRG " nicht nehmen!"
; CONST: $ genommen!
CONST_22	.BYTE 10
.STRG " genommen!"
; CONST: #8

CONST_23R	.REAL 8.0
; CONST: #36

CONST_24R	.REAL 36.0
; CONST: $hoc
CONST_25	.BYTE 3
.STRG "hoc"
; CONST: $up
CONST_26	.BYTE 2
.STRG "up"
; CONST: $geh
CONST_27	.BYTE 4
.STRG "geh "
; CONST: $run
CONST_28	.BYTE 3
.STRG "run"
; CONST: $dow
CONST_29	.BYTE 3
.STRG "dow"
; CONST: $wes
CONST_30	.BYTE 3
.STRG "wes"
; CONST: $nor
CONST_31	.BYTE 3
.STRG "nor"
; CONST: $ost
CONST_32	.BYTE 3
.STRG "ost"
; CONST: $sue
CONST_33	.BYTE 3
.STRG "sue"
; CONST: $o
CONST_34	.BYTE 1
.STRG "o"
; CONST: $w
CONST_35	.BYTE 1
.STRG "w"
; CONST: $s
CONST_36	.BYTE 1
.STRG "s"
; CONST: $n
CONST_37	.BYTE 1
.STRG "n"
; CONST: $sw
CONST_38	.BYTE 2
.STRG "sw"
; CONST: $nw
CONST_39	.BYTE 2
.STRG "nw"
; CONST: $so
CONST_40	.BYTE 2
.STRG "so"
; CONST: $no
CONST_41	.BYTE 2
.STRG "no"
; CONST: $u
CONST_42	.BYTE 1
.STRG "u"
; CONST: $d
CONST_43	.BYTE 1
.STRG "d"
; CONST: $r
CONST_44	.BYTE 1
.STRG "r"
; CONST: $h
CONST_45	.BYTE 1
.STRG "h"
; CONST: $unten
CONST_46	.BYTE 5
.STRG "unten"
; CONST: $runter
CONST_47	.BYTE 6
.STRG "runter"
; CONST: $rauf
CONST_48	.BYTE 4
.STRG "rauf"
; CONST: $oben
CONST_49	.BYTE 4
.STRG "oben"
; CONST: $hoch
CONST_50	.BYTE 4
.STRG "hoch"
; CONST: $Hier ist kein Platz mehr!
CONST_51	.BYTE 25
.STRG "Hier ist kein Platz mehr!"
; CONST: #9

CONST_52R	.REAL 9.0
; CONST: #256

CONST_53R	.REAL 256.0
; CONST: $ abgelegt!
CONST_54	.BYTE 10
.STRG " abgelegt!"
; CONST: $***
CONST_55	.BYTE 3
.STRG "***"
; CONST: #80

CONST_56R	.REAL 80.0
; CONST: #20

CONST_57R	.REAL 20.0
; CONST: #255

CONST_58R	.REAL 255.0
; CONST: $Fehler: Array voll!
CONST_59	.BYTE 19
.STRG "Fehler: Array voll!"
; CONST: $ erhalten!
CONST_60	.BYTE 10
.STRG " erhalten!"
; CONST: #5

CONST_61R	.REAL 5.0
; CONST: #22

CONST_62R	.REAL 22.0
; CONST: #176

CONST_63R	.REAL 176.0
; CONST: #44

CONST_64R	.REAL 44.0
; CONST: $.
CONST_65	.BYTE 1
.STRG "."
; CONST: #4

CONST_66R	.REAL 4.0
; CONST: #6

CONST_67R	.REAL 6.0
; CONST: #7


; CONST: $portal
CONST_69	.BYTE 6
.STRG "portal"
; CONST: $.rom
CONST_70	.BYTE 4
.STRG ".rom"
; CONST: $Moegliche Befehle:
CONST_71	.BYTE 18
.STRG "Moegliche Befehle:"
; CONST: $,
CONST_72	.BYTE 2
.STRG ", "
; CONST: $?
CONST_73	.BYTE 1
.STRG "?"
; CONST: $-1
CONST_74	.BYTE 2
.STRG "-1"
; CONST: $Lade Daten...
CONST_75	.BYTE 13
.STRG "Lade Daten..."
; CONST: $operations.def
CONST_76	.BYTE 14
.STRG "operations.def"
; CONST: #46


; CONST: #64

CONST_78R	.REAL 64.0
; CONST: $ok
CONST_79	.BYTE 2
.STRG "ok"
; CONST: $$
CONST_80	.BYTE 1
.STRG "$"
; CONST: $x
CONST_81	.BYTE 1
.STRG "x"
; CONST: $q
CONST_82	.BYTE 1
.STRG "q"
; CONST: $help
CONST_83	.BYTE 4
.STRG "help"
; CONST: $
CONST_84	.BYTE 1
.STRG " "
; CONST: #128

CONST_85R	.REAL 128.0
; CONST: #32

CONST_86R	.REAL 32.0
; CONST: #57


; CONST: #48


; CONST: #90


; CONST: #65


; CONST: $und
CONST_91	.BYTE 3
.STRG "und"
; CONST: $si
CONST_92	.BYTE 2
.STRG "si"
; CONST: $ih
CONST_93	.BYTE 2
.STRG "ih"
; CONST: $es
CONST_94	.BYTE 2
.STRG "es"
; CONST: $ ist hier nicht!
CONST_95	.BYTE 16
.STRG " ist hier nicht!"
; CONST: $Wirklich beenden (j/n)?
CONST_96	.BYTE 23
.STRG "Wirklich beenden (j/n)?"
; CONST: $j
CONST_97	.BYTE 1
.STRG "j"
; CONST: $Bis bald!
CONST_98	.BYTE 9
.STRG "Bis bald!"
; CONST: $nordo
CONST_99	.BYTE 5
.STRG "nordo"
; CONST: $nordw
CONST_100	.BYTE 5
.STRG "nordw"
; CONST: $suedo
CONST_101	.BYTE 5
.STRG "suedo"
; CONST: $suedw
CONST_102	.BYTE 5
.STRG "suedw"
; CONST: $Da geht es nicht lang!
CONST_103	.BYTE 22
.STRG "Da geht es nicht lang!"
; CONST: $ XAM / EgonOlsen71
CONST_104	.BYTE 18
.STRG " XAM / EgonOlsen71"
; CONST: $Bytes frei
CONST_105	.BYTE 10
.STRG "Bytes frei"
; CONST: $Du hast nichts!
CONST_106	.BYTE 15
.STRG "Du hast nichts!"
; CONST: $ hast du nicht!
CONST_107	.BYTE 15
.STRG " hast du nicht!"
; CONST: $.bak
CONST_108	.BYTE 4
.STRG ".bak"
; CONST: $s:
CONST_109	.BYTE 2
.STRG "s:"
; CONST: $r:
CONST_110	.BYTE 2
.STRG "r:"
; CONST: $=
CONST_111	.BYTE 1
.STRG "="
; CONST: #12


; CONST: $Du siehst nichts besonderes!
CONST_113	.BYTE 28
.STRG "Du siehst nichts besonderes!"
; CONST: $Blah blah blah!?
CONST_114	.BYTE 16
.STRG "Blah blah blah!?"
; CONST: #13

CONST_115R	.REAL 13.0
; CONST: #40

CONST_116R	.REAL 40.0
; CONST: $,r
CONST_117	.BYTE 2
.STRG ",r"
; CONST: $Lade...
CONST_118	.BYTE 7
.STRG "Lade..."
; CONST: $,w
CONST_119	.BYTE 2
.STRG ",w"
; CONST: $Speichere...
CONST_120	.BYTE 12
.STRG "Speichere..."
; CONST: $IO-Error:
CONST_121	.BYTE 10
.STRG "IO-Error: "
; CONST: #191

CONST_122R	.REAL 191.0
; CONST: $Einen Moment...
CONST_123	.BYTE 15
.STRG "Einen Moment..."
; CONST: #30


; CONST: #35


; CONST: #51


; CONST: $>
CONST_127	.BYTE 2
.STRG "> "
; CONST: #21


; CONST: $alles
CONST_129	.BYTE 5
.STRG "alles"
; CONST: $save.dat
CONST_130	.BYTE 8
.STRG "save.dat"
; CONST: #49152

CONST_131	.REAL 49152
; CONST: $;
CONST_132	.BYTE 1
.STRG ";"
; CONST: $,
CONST_133	.BYTE 1
.STRG ","
; CONST: $Lade Gegenstaende...
CONST_134	.BYTE 20
.STRG "Lade Gegenstaende..."
; CONST: $items.def
CONST_135	.BYTE 9
.STRG "items.def"
; CONST: $0
CONST_136	.BYTE 1
.STRG "0"
; CONST: #53179

CONST_137	.REAL 53179
; CONST: $Lade Befehle...
CONST_138	.BYTE 15
.STRG "Lade Befehle..."
; CONST: $commands.def
CONST_139	.BYTE 12
.STRG "commands.def"
; CONST: $endid.def
CONST_140	.BYTE 9
.STRG "endid.def"
; CONST: $Ausgaenge sind:
CONST_141	.BYTE 16
.STRG "Ausgaenge sind: "
; CONST: #14


; CONST: $Du siehst:
CONST_143	.BYTE 11
.STRG "Du siehst: "
; CONST: #11

CONST_144R	.REAL 11.0
; CONST: #37

CONST_145R	.REAL 37.0
; CONST: #55296

CONST_146	.REAL 55296
; CONST: #55335

CONST_147	.REAL 55335
; CONST: #1024

CONST_148R	.REAL 1024.0
; CONST: #1063

CONST_149R	.REAL 1063.0
; CONST: #160

CONST_150R	.REAL 160.0
; CONST: #19


; CONST: #18


; CONST: #146


; CONST: #147


;###############################
; ******** DATA ********
DATAS
.BYTE 2
.BYTE 1
.STRG "n"
.BYTE 2
.BYTE 1
.STRG "s"
.BYTE 2
.BYTE 1
.STRG "w"
.BYTE 2
.BYTE 1
.STRG "o"
.BYTE 2
.BYTE 2
.STRG "nw"
.BYTE 2
.BYTE 2
.STRG "sw"
.BYTE 2
.BYTE 2
.STRG "no"
.BYTE 2
.BYTE 2
.STRG "so"
.BYTE 2
.BYTE 1
.STRG "h"
.BYTE 2
.BYTE 1
.STRG "r"
.BYTE $FF
; ******** DATA END ********
CONSTANTS_END
;###################################
; *** VARIABLES ***
VARIABLES
; VAR: DN%
VAR_DN%	.WORD 0
; VAR: ER
VAR_ER	.REAL 0.0
; VAR: CV%[]
.BYTE 0
.WORD 18
VAR_CV%[]	.ARRAY 18
; VAR: T%
VAR_T%	.WORD 0
; VAR: ID%[]
.BYTE 0
.WORD 104
VAR_ID%[]	.ARRAY 104
; VAR: BA
VAR_BA	.REAL 0.0
; VAR: AD
VAR_AD	.REAL 0.0
; VAR: PP
VAR_PP	.REAL 0.0
; VAR: IC%
VAR_IC%	.WORD 0
; VAR: I
VAR_I	.REAL 0.0
; VAR: UV%[]
.BYTE 0
.WORD 104
VAR_UV%[]	.ARRAY 104
; VAR: IV%[]
.BYTE 0
.WORD 104
VAR_IV%[]	.ARRAY 104
; VAR: TC%
VAR_TC%	.WORD 0
; VAR: RR%
VAR_RR%	.WORD 0
; VAR: IP%[]
.BYTE 0
.WORD 42
VAR_IP%[]	.ARRAY 42
; VAR: RT%
VAR_RT%	.WORD 0
; VAR: MV%[]
.BYTE 0
.WORD 104
VAR_MV%[]	.ARRAY 104
; VAR: RS%[]
.BYTE 0
.WORD 104
VAR_RS%[]	.ARRAY 104
; VAR: RD%
VAR_RD%	.WORD 0
; VAR: RV%[]
.BYTE 0
.WORD 648
VAR_RV%[]	.ARRAY 648
; VAR: P%
VAR_P%	.WORD 0
; VAR: FF%
VAR_FF%	.WORD 0
; VAR: II
VAR_II	.REAL 0.0
; VAR: C%
VAR_C%	.WORD 0
; VAR: P
VAR_P	.REAL 0.0
; VAR: XO%
VAR_XO%	.WORD 0
; VAR: OC%
VAR_OC%	.WORD 0
; VAR: OP%[]
.BYTE 0
.WORD 220
VAR_OP%[]	.ARRAY 220
; VAR: OX%
VAR_OX%	.WORD 0
; VAR: T2%
VAR_T2%	.WORD 0
; VAR: UQ%
VAR_UQ%	.WORD 0
; VAR: AC%[]
.BYTE 0
.WORD 22
VAR_AC%[]	.ARRAY 22
; VAR: OG%[]
.BYTE 0
.WORD 484
VAR_OG%[]	.ARRAY 484
; VAR: C2%
VAR_C2%	.WORD 0
; VAR: OD%
VAR_OD%	.WORD 0
; VAR: MX%
VAR_MX%	.WORD 0
; VAR: PO%
VAR_PO%	.WORD 0
; VAR: TB%
VAR_TB%	.WORD 0
; VAR: GC%
VAR_GC%	.WORD 0
; VAR: ST
VAR_ST	.REAL 0.0
; VAR: MO%
VAR_MO%	.WORD 0
; VAR: LR%
VAR_LR%	.WORD 0
; VAR: SF%
VAR_SF%	.WORD 0
; VAR: CC%
VAR_CC%	.WORD 0
; VAR: PP%
VAR_PP%	.WORD 0
; VAR: CO%
VAR_CO%	.WORD 0
; VAR: MS%
VAR_MS%	.WORD 0
; VAR: TI%
VAR_TI%	.WORD 0
; VAR: SK%
VAR_SK%	.WORD 0
; VAR: J
VAR_J	.REAL 0.0
; VAR: XC%
VAR_XC%	.WORD 0
; VAR: PL%
VAR_PL%	.WORD 0
; VAR: MI%
VAR_MI%	.WORD 0
; VAR: MR%
VAR_MR%	.WORD 0
; VAR: LI
VAR_LI	.REAL 0.0
; VAR: J%
VAR_J%	.WORD 0
; VAR: SD
VAR_SD	.REAL 0.0
; VAR: MD%
VAR_MD%	.WORD 0
; VAR: EL%
VAR_EL%	.WORD 0
; VAR: IL%
VAR_IL%	.WORD 0
; VAR: LK%[]
.BYTE 0
.WORD 18
VAR_LK%[]	.ARRAY 18
STRINGVARS_START
; VAR: RN$
VAR_RN$	.WORD EMPTYSTR
; VAR: A$
VAR_A$	.WORD EMPTYSTR
; VAR: CC$
VAR_CC$	.WORD EMPTYSTR
; VAR: TX$
VAR_TX$	.WORD EMPTYSTR
; VAR: TF$
VAR_TF$	.WORD EMPTYSTR
; VAR: B$
VAR_B$	.WORD EMPTYSTR
; VAR: SX$
VAR_SX$	.WORD EMPTYSTR
; VAR: CB$
VAR_CB$	.WORD EMPTYSTR
; VAR: LC$
VAR_LC$	.WORD EMPTYSTR
; VAR: CT$
VAR_CT$	.WORD EMPTYSTR
; VAR: C$
VAR_C$	.WORD EMPTYSTR
; VAR: LO$
VAR_LO$	.WORD EMPTYSTR
; VAR: AL$
VAR_AL$	.WORD EMPTYSTR
; VAR: FI$
VAR_FI$	.WORD EMPTYSTR
; VAR: RL$
VAR_RL$	.WORD EMPTYSTR
; VAR: ID$
VAR_ID$	.WORD EMPTYSTR
; VAR: A1$
VAR_A1$	.WORD EMPTYSTR
; VAR: A2$
VAR_A2$	.WORD EMPTYSTR
; VAR: TI$
VAR_TI$ .WORD EMPTYSTR
STRINGVARS_END
STRINGARRAYS_START
; VAR: CP$[]
.BYTE 2
.WORD 18
VAR_CP$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: CV$[]
.BYTE 2
.WORD 34
VAR_CV$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: IT$[]
.BYTE 2
.WORD 104
VAR_IT$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR
; VAR: OP$[]
.BYTE 2
.WORD 140
VAR_OP$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: OG$[]
.BYTE 2
.WORD 264
VAR_OG$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR
; VAR: OD$[]
.BYTE 2
.WORD 62
VAR_OD$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR
; VAR: LX$[]
.BYTE 2
.WORD 288
VAR_LX$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: DR$[]
.BYTE 2
.WORD 20
VAR_DR$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: CM$[]
.BYTE 2
.WORD 204
VAR_CM$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR
; VAR: IL$[]
.BYTE 2
.WORD 104
VAR_IL$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR
; VAR: XP$[]
.BYTE 2
.WORD 18
VAR_XP$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: XX$[]
.BYTE 2
.WORD 18
VAR_XX$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: RD$[]
.BYTE 2
.WORD 50
VAR_RD$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: EX$[]
.BYTE 2
.WORD 18
VAR_EX$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: XN$[]
.BYTE 2
.WORD 18
VAR_XN$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
; VAR: RI$[]
.BYTE 2
.WORD 18
VAR_RI$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
STRINGARRAYS_END
VARIABLES_END
; *** INTERNAL ***
Y_REG	.REAL 0.0
C_REG	.REAL 0.0
D_REG	.REAL 0.0
E_REG	.REAL 0.0
F_REG	.REAL 0.0
A_REG	.WORD 0
B_REG	.WORD 0
CMD_NUM	.BYTE 0
CHANNEL	.BYTE 0
SP_SAVE	.BYTE 0
TMP2_REG	.WORD 0
TMP3_REG	.WORD 0
TMP4_REG	.WORD 0
AS_TMP	.WORD 0
BPOINTER_TMP	.WORD 0
BASICTEXTP	.BYTE 0
STORE1	.WORD 0
STORE2	.WORD 0
STORE3	.WORD 0
STORE4	.WORD 0
GCSTART	.WORD 0
GCLEN	.WORD 0
GCWORK	.WORD 0
TMP_FREG	.REAL 0
TMP2_FREG	.REAL 0
TMP_FLAG	.BYTE 0
REAL_CONST_ONE	.REAL 1.0
REAL_CONST_ZERO	.REAL 0.0
REAL_CONST_MINUS_ONE	.REAL -1.0
CHLOCKFLAG	.BYTE 0
EMPTYSTR	.BYTE 0
FPSTACKP	.WORD FPSTACK
FORSTACKP	.WORD FORSTACK
DATASP	.WORD DATAS
LASTVAR	.WORD 0
LASTVARP	.WORD 0
HIGHP	.WORD STRBUF
STRBUFP	.WORD STRBUF
ENDSTRBUF	.WORD 0
INPUTQUEUEP	.BYTE 0
PROGRAMEND
INPUTQUEUE	.ARRAY $0F
FPSTACK .ARRAY 100
FORSTACK .ARRAY 340
STRBUF	.BYTE 0
