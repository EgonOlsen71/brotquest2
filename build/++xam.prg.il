PROGRAMSTART:
JSR START
0:
10:
NOP
MOVB X,186
MOV DN%{INTEGER},X
NOP
JSR GOSUB
JSR 63300
NOP
JSR GOSUB
JSR 60000
NOP
JSR GOSUB
JSR 61200
NOP
JSR GOSUB
JSR 48000
NOP
JSR GOSUB
JSR 61500
20:
NOP
MOV B,#start.rom{STRING}
MOV RN${STRING},B
NOP
JSR GOSUB
JSR 63300
30:
NOP
JSR GOSUB
JSR 40100
40:
NOP
JSR GOSUB
JSR 50000
NOP
JSR GOSUB
JSR 40000
50:
NOP
JSR GOSUB
JSR 52000
NOP
JSR GOSUB
JSR 40000
60:
NOP
JMP 40
40000:
NOP
40010:
NOP
MOV Y,#0{INTEGER}
MOV X,ER{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP0
JMP SKIP0
NSKIP0:
JMP RETURN
NOP
SKIP0:
40020:
NOP
MOV Y,#1{INTEGER}
MOV X,ER{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP1
JMP SKIP1
NSKIP1:
NOP
NOP
MOV A,#Das klappt so nicht!{STRING}
JSR STROUT
JSR LINEBREAK
SKIP1:
40030:
NOP
MOV Y,#3{INTEGER}
MOV X,ER{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP2
JMP SKIP2
NSKIP2:
NOP
NOP
MOV A,#Das bewirkt nichts mehr!{STRING}
JSR STROUT
JSR LINEBREAK
SKIP2:
40040:
NOP
MOV Y,#2{INTEGER}
MOV X,ER{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP3
JMP SKIP3
NSKIP3:
NOP
NOP
MOV Y,#0{INTEGER}
MOV ER{REAL},Y
JMP RETURN
NOP
SKIP3:
40050:
NOP
MOV Y,#0{INTEGER}
MOV ER{REAL},Y
40060:
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP4
JMP SKIP4
NSKIP4:
NOP
NOP
MOV A,#Das verstehe ich nicht!{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP4:
40070:
NOP
JSR COMPACTMAX
MOV Y,#39{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV X,#0{INTEGER}
CHGCTX #1
MOV G,CP$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,#' kenne ich nicht!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
40100:
NOP
40110:
NOP
JSR GOSUB
JSR 62000
40120:
NOP
JSR GOSUB
JSR 48200
NOP
JSR GOSUB
JSR 59500
NOP
MOV X,#1{INTEGER}
JSR CLOSE
NOP
JMP RETURN
40500:
NOP
40510:
NOP
MOV X,T%{INTEGER}
MOV G,ID%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,BA{REAL}
ADD X,Y
MOV AD{REAL},X
NOP
MOV B,#{STRING}
MOV A${STRING},B
40520:
NOP
MOV Y,#1{INTEGER}
MOV PP{REAL},Y
NOP
MOV Y,AD{REAL}
MOVB X,(Y)
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(PP{REAL})
JSR INITFOR
NOP
JSR COMPACTMAX
MOV Y,PP{REAL}
MOV X,AD{REAL}
ADD X,Y
MOV Y,X
MOVB X,(Y)
MOV Y,X
CHGCTX #1
JSR CHR
MOV B,A
MOV A,A${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
40530:
NOP
JSR GOSUB
JSR 59100
NOP
JMP RETURN
40600:
NOP
40605:
NOP
MOV Y,#0{INTEGER}
MOV ER{REAL},Y
NOP
MOV Y,#15{INTEGER}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP5
JMP SKIP5
NSKIP5:
NOP
NOP
MOV A,#Das will niemand haben!{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP5:
40610:
NOP
MOV A,#Das kannst du nicht {STRING}
JSR STROUT
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,CV$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#33{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
JSR LINEBREAK
40620:
NOP
JMP RETURN
40650:
NOP
40660:
NOP
JSR LINEBREAK
NOP
JSR GOSUB
JSR 62600
NOP
JMP RETURN
40700:
NOP
40710:
NOP
MOVB 646,#10{INTEGER}
NOP
JSR LINEBREAK
NOP
MOV A,#Du hast bei dir:{STRING}
JSR STROUT
JSR LINEBREAK
40715:
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP6
JMP SKIP6
NSKIP6:
NOP
NOP
MOV Y,#2{INTEGER}
CHGCTX #1
JSR TAB
NOP
MOV A,#nichts{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP6:
40720:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
40730:
NOP
MOV X,I{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP7
JMP SKIP7
NSKIP7:
NOP
NOP
MOV Y,#2{INTEGER}
CHGCTX #1
JSR TAB
NOP
MOV X,I{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
JSR LINEBREAK
SKIP7:
40740:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
40800:
NOP
40805:
NOP
MOV Y,#0{INTEGER}
MOV X,TC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP8
JMP SKIP8
NSKIP8:
NOP
NOP
MOV A,#Hier ist nichts!{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP8:
40810:
NOP
MOV Y,#0{INTEGER}
MOV RR%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,TC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,IP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
NOP
JSR GOSUB
JSR 40900
40820:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP9
JMP SKIP9
NSKIP9:
NOP
NOP
MOV Y,#1{INTEGER}
MOV RR%{INTEGER},Y
NOP
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
SKIP9:
40830:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
40840:
NOP
MOV Y,#1{INTEGER}
MOV X,RR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP10
JMP SKIP10
NSKIP10:
JSR GOSUB
NOP
JSR 40650
SKIP10:
40850:
NOP
JMP RETURN
40900:
NOP
40910:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV X,T%{INTEGER}
MOV G,MV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#1{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP11
JMP SKIP11
NSKIP11:
JMP 40930
NOP
SKIP11:
40920:
NOP
MOV A,#Du kannst {STRING}
JSR STROUT
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# nicht nehmen!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV Y,#2{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
40930:
NOP
MOV Y,IC%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,T%{INTEGER}
MOV G,IV%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# genommen!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV X,IC%{INTEGER}
JSR FINX
MOV IC%{INTEGER},X
NOP
MOV Y,T%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,#0{INTEGER}
MOV G,RS%[]{INTEGER}
JSR ARRAYSTORE
40940:
NOP
MOV Y,#0{INTEGER}
MOV PP{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(PP{REAL})
JSR INITFOR
NOP
MOV Y,PP{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP12
JMP SKIP12
NSKIP12:
NOP
NOP
MOV Y,PP{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
NOP
MOV Y,#-1.0{REAL}
MOV G,RV%[]{INTEGER}
JSR ARRAYSTORE
SKIP12:
40950:
NOP
MOV A,(PP{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
41000:
NOP
41005:
NOP
MOV Y,#2{INTEGER}
PUSH Y
CHGCTX #1
MOV B,CC${STRING}
CHGCTX #0
JSR LEN
POP Y
LT X,Y
CMP X,#0{REAL}
JNE NSKIP13
JMP SKIP13
NSKIP13:
JMP RETURN
NOP
SKIP13:
41010:
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,CC${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,CC${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
41020:
NOP
MOV Y,#3{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
LT X,Y
CMP X,#0{REAL}
JNE NSKIP14
JMP SKIP14
NSKIP14:
JMP 41100
NOP
SKIP14:
41025:
NOP
JSR COMPACTMAX
MOV C,#3{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
41030:
NOP
JSR GOSUB
JSR 41200
NOP
MOV B,#hoc{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#up{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP15
JMP SKIP15
NSKIP15:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP15:
41040:
NOP
MOV B,#run{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#dow{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP16
JMP SKIP16
NSKIP16:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP16:
41060:
NOP
MOV B,#wes{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#nor{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP17
JMP SKIP17
NSKIP17:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP17:
41070:
NOP
MOV B,#ost{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#sue{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP18
JMP SKIP18
NSKIP18:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP18:
41090:
NOP
JMP RETURN
41100:
NOP
MOV B,#o{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#w{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#s{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#n{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
POP Y
OR X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP19
JMP SKIP19
NSKIP19:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP19:
41110:
NOP
MOV B,#sw{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#nw{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#so{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#no{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
POP Y
OR X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP20
JMP SKIP20
NSKIP20:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP20:
41120:
NOP
MOV B,#u{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#d{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#r{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#h{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
POP Y
OR X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP21
JMP SKIP21
NSKIP21:
NOP
NOP
JSR COMPACTMAX
MOV B,CC${STRING}
MOV A,#geh {STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
JMP RETURN
NOP
SKIP21:
41130:
NOP
JMP RETURN
41200:
NOP
41210:
NOP
MOV B,#unten{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP22
JMP SKIP22
NSKIP22:
NOP
NOP
MOV B,#runter{STRING}
MOV A${STRING},B
SKIP22:
41220:
NOP
MOV B,#rauf{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#oben{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP23
JMP SKIP23
NSKIP23:
NOP
NOP
MOV B,#hoch{STRING}
MOV A${STRING},B
SKIP23:
41230:
NOP
JMP RETURN
41300:
NOP
41310:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV P%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
41320:
NOP
MOV Y,#-1.0{REAL}
MOV X,P%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP24
JMP SKIP24
NSKIP24:
JMP 41360
NOP
SKIP24:
41325:
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP25
JMP SKIP25
NSKIP25:
JMP 41350
NOP
SKIP25:
41330:
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV X,II{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,P%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP26
JMP SKIP26
NSKIP26:
NOP
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
NOP
NOP
MOV Y,IC%{INTEGER}
MOV II{REAL},Y
SKIP26:
41340:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP27
JMP SKIP27
NSKIP27:
JMP 41360
NOP
SKIP27:
41350:
NOP
MOV Y,TC%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,P%{INTEGER}
MOV G,IP%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV X,TC%{INTEGER}
JSR FINX
MOV TC%{INTEGER},X
41360:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
41400:
NOP
41410:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV C%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV Y,P{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP28
JMP SKIP28
NSKIP28:
NOP
NOP
MOV X,C%{INTEGER}
JSR FINX
MOV C%{INTEGER},X
SKIP28:
41415:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
41420:
NOP
MOV Y,#3{INTEGER}
MOV X,C%{INTEGER}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP29
JMP SKIP29
NSKIP29:
NOP
NOP
MOV A,#Hier ist kein Platz mehr!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
NOP
MOV Y,#2{INTEGER}
MOV RT%{INTEGER},Y
JMP RETURN
NOP
SKIP29:
41430:
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV Y,P{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP30
JMP SKIP30
NSKIP30:
NOP
NOP
MOV Y,P{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
NOP
MOV Y,T%{INTEGER}
MOV G,RV%[]{INTEGER}
JSR ARRAYSTORE
NOP
NOP
MOV Y,#9{INTEGER}
MOV P{REAL},Y
SKIP30:
41440:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV X,P{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
41450:
NOP
MOV Y,T%{INTEGER}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP31
JMP SKIP31
NSKIP31:
JMP 41500
NOP
SKIP31:
41460:
NOP
MOV X,IC%{INTEGER}
JSR FDEX
MOV Y,X
MOV X,P{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP32
JMP SKIP32
NSKIP32:
NOP
NOP
MOV X,IC%{INTEGER}
JSR FDEX
MOV IC%{INTEGER},X
NOP
NOP
MOV Y,#256{INTEGER}
MOV P{REAL},Y
JMP 41500
NOP
SKIP32:
41470:
NOP
MOV Y,P{REAL}
MOV PP{REAL},Y
NOP
MOV Y,#2{INTEGER}
MOV X,IC%{INTEGER}
SUB X,Y
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(PP{REAL})
JSR INITFOR
NOP
MOV Y,PP{REAL}
PUSH Y
NOP
MOV Y,#1{INTEGER}
MOV X,PP{REAL}
ADD X,Y
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,X
POP X
MOV G,IV%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV Y,PP{REAL}
PUSH Y
NOP
MOV Y,#1{INTEGER}
MOV X,PP{REAL}
ADD X,Y
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,X
POP X
MOV G,UV%[]{INTEGER}
JSR ARRAYSTORE
41480:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV X,IC%{INTEGER}
JSR FDEX
MOV IC%{INTEGER},X
NOP
MOV Y,#256{INTEGER}
MOV PP{REAL},Y
41500:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
41510:
NOP
MOV Y,T%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,#1{INTEGER}
MOV G,RS%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# abgelegt!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
42000:
NOP
42005:
NOP
MOV Y,XO%{INTEGER}
MOV X,OC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP33
JMP SKIP33
NSKIP33:
JMP 42420
NOP
SKIP33:
42010:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#10{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
42015:
NOP
JSR GOSUB
JSR 45200
42020:
NOP
MOV Y,I{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,OC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV B,A${STRING}
CHGCTX #0
JSR VAL
MOV Y,X
POP X
MOV G,OP%[]{INTEGER}
JSR ARRAYSTORE
NOP
JSR GOSUB
JSR 61700
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
42040:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,OX%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,OC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,#{STRING}
POP X
MOV G,OP$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
42050:
NOP
MOV B,A${STRING}
MOV TX${STRING},B
NOP
JSR GOSUB
JSR 61000
NOP
MOV Y,II{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,OC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,TX${STRING}
POP X
MOV G,OP$[]{STRING}
JSR ARRAYSTORE
NOP
JSR GOSUB
JSR 61700
NOP
MOV Y,#1{INTEGER}
MOV X,II{REAL}
ADD X,Y
MOV II{REAL},X
42055:
NOP
MOV X,OX%{INTEGER}
JSR FINX
MOV Y,X
MOV X,II{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP34
JMP SKIP34
NSKIP34:
JMP 42420
NOP
SKIP34:
42060:
NOP
MOV B,#***{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP35
JMP SKIP35
NSKIP35:
NOP
NOP
MOV X,OC%{INTEGER}
JSR FINX
MOV OC%{INTEGER},X
JMP RETURN
NOP
SKIP35:
42070:
NOP
JMP 42050
42200:
NOP
42210:
NOP
MOV Y,#10{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV P{REAL},X
NOP
MOV Y,#80{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP{REAL},X
NOP
JSR GOSUB
JSR 42900
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP36
JMP SKIP36
NSKIP36:
JMP RETURN
NOP
SKIP36:
42220:
NOP
MOV Y,#20{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV UQ%{INTEGER},X
NOP
MOV Y,#1{INTEGER}
MOV X,UQ%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP37
JMP SKIP37
NSKIP37:
JMP 42270
NOP
NOP
NOP
SKIP37:
42230:
NOP
JSR GOSUB
JSR 43000
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP38
JMP SKIP38
NSKIP38:
JMP RETURN
NOP
SKIP38:
42270:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,OX%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,OP$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP39
JMP SKIP39
NSKIP39:
NOP
NOP
MOV Y,OX%{INTEGER}
MOV I{REAL},Y
JMP 42290
NOP
SKIP39:
42280:
NOP
JSR GOSUB
JSR 59100
42290:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#10{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV Y,I{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,X
POP X
MOV G,AC%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
42300:
NOP
JSR GOSUB
JSR 43400
42330:
NOP
JMP RETURN
42400:
NOP
42410:
NOP
MOV Y,#255{INTEGER}
MOV X,I{REAL}
GTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP40
JMP SKIP40
NSKIP40:
JMP RETURN
NOP
SKIP40:
42420:
NOP
MOV A,#Fehler: Array voll!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP 49100
42500:
NOP
42510:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP41
JMP SKIP41
NSKIP41:
NOP
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
NOP
MOV Y,C%{INTEGER}
MOV G,RV%[]{INTEGER}
JSR ARRAYSTORE
NOP
NOP
MOV Y,#256{INTEGER}
MOV I{REAL},Y
SKIP41:
42520:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR GOSUB
JSR 42400
42530:
NOP
JSR GOSUB
JSR 62600
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
42600:
NOP
42605:
NOP
MOVB 646,#10{INTEGER}
NOP
MOV X,C%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# erhalten!{STRING}
JSR STROUT
JSR LINEBREAK
42610:
NOP
JSR GOSUB
JSR 42650
42615:
NOP
MOV X,#5{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP42
JMP SKIP42
NSKIP42:
NOP
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
JMP RETURN
NOP
NOP
NOP
SKIP42:
42620:
NOP
JSR GOSUB
JSR 62600
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
42650:
NOP
42660:
NOP
MOV Y,IC%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,C%{INTEGER}
MOV G,IV%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV X,IC%{INTEGER}
JSR FINX
MOV IC%{INTEGER},X
NOP
MOV Y,C%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,#0{INTEGER}
MOV G,RS%[]{INTEGER}
JSR ARRAYSTORE
NOP
JMP RETURN
42700:
NOP
42710:
NOP
MOV Y,#22{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OG%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV P{REAL},X
NOP
MOV Y,#176{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OG%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP{REAL},X
NOP
JSR GOSUB
JSR 42900
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP43
JMP SKIP43
NSKIP43:
JMP RETURN
NOP
SKIP43:
42730:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#44{INTEGER}
PUSH Y
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OG%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV UQ%{INTEGER},X
NOP
MOV Y,#1{INTEGER}
MOV X,UQ%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP44
JMP SKIP44
NSKIP44:
JMP 42780
NOP
NOP
NOP
SKIP44:
42740:
NOP
JSR GOSUB
JSR 43000
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP45
JMP SKIP45
NSKIP45:
JMP RETURN
NOP
SKIP45:
42780:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#5{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#22{INTEGER}
MUL X,Y
PUSH X
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,OG$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP46
JMP SKIP46
NSKIP46:
NOP
NOP
MOV Y,#5{INTEGER}
MOV I{REAL},Y
JMP 42800
NOP
SKIP46:
42790:
NOP
JSR GOSUB
JSR 59100
42800:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#10{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#22{INTEGER}
MUL X,Y
PUSH X
MOV Y,T2%{INTEGER}
INT X,Y
POP Y
ADD X,Y
MOV G,OG%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,X
POP X
MOV G,AC%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
42810:
NOP
JSR GOSUB
JSR 43400
42830:
NOP
JMP RETURN
42900:
NOP
42910:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV X,#2{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C2%{INTEGER},X
42920:
NOP
MOV Y,#-1.0{REAL}
MOV X,PP{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP47
JMP SKIP47
NSKIP47:
JMP 42950
NOP
SKIP47:
42930:
NOP
MOV Y,C%{INTEGER}
MOV X,P{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP48
JMP SKIP48
NSKIP48:
NOP
NOP
MOV Y,#-1.0{REAL}
MOV X,C2%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP49
JMP SKIP49
NSKIP49:
JSR GOSUB
JSR 43500
NOP
SKIP49:
SKIP48:
42940:
NOP
JMP RETURN
42950:
NOP
MOV Y,C%{INTEGER}
MOV X,PP{REAL}
EQ X,Y
PUSH X
MOV Y,C2%{INTEGER}
MOV X,P{REAL}
EQ X,Y
POP Y
AND X,Y
PUSH X
MOV Y,C2%{INTEGER}
MOV X,PP{REAL}
EQ X,Y
PUSH X
MOV Y,C%{INTEGER}
MOV X,P{REAL}
EQ X,Y
POP Y
AND X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP50
JMP SKIP50
NSKIP50:
JSR GOSUB
NOP
JSR 43500
SKIP50:
42960:
NOP
JMP RETURN
43000:
NOP
43010:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
JSR GOSUB
JSR 43100
NOP
MOV Y,#0{INTEGER}
MOV X,OD%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP51
JMP SKIP51
NSKIP51:
JMP 43050
NOP
SKIP51:
43030:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,OD%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV B,TF${STRING}
CHGCTX #0
PUSH B
MOV X,I{REAL}
CHGCTX #1
MOV G,OD$[]{STRING}
JSR ARRAYACCESS
POP B
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP52
JMP SKIP52
NSKIP52:
NOP
NOP
MOV Y,#3{INTEGER}
MOV ER{REAL},Y
NOP
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
JMP RETURN
NOP
SKIP52:
43040:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
43050:
NOP
JSR GOSUB
JSR 43150
NOP
JMP RETURN
43100:
NOP
43110:
NOP
MOV Y,C%{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,C2%{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,P{REAL}
MOV X,I{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP53
JMP SKIP53
NSKIP53:
NOP
NOP
MOV Y,I{REAL}
MOV P{REAL},Y
NOP
NOP
MOV Y,C2%{INTEGER}
MOV I{REAL},Y
NOP
NOP
SKIP53:
43120:
NOP
JSR COMPACTMAX
MOV Y,P{REAL}
CHGCTX #1
JSR STR
PUSH A
CHGCTX #0
MOV Y,I{REAL}
CHGCTX #1
JSR STR
PUSH A
MOV B,#.{STRING}
CHGCTX #0
PUSH B
MOV Y,T%{INTEGER}
CHGCTX #1
JSR STR
POP B
JSR CONCAT
POP B
JSR CONCAT
MOV B,#.{STRING}
JSR CONCAT
POP B
JSR CONCAT
JSR COPYSTR
MOV TF${STRING},A
43125:
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,TF${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,TF${STRING}
JSR RIGHT
JSR COPYSTR
MOV TF${STRING},A
NOP
JMP RETURN
43150:
NOP
43160:
NOP
MOV Y,OD%{INTEGER}
PUSH Y
NOP
MOV A,TF${STRING}
POP X
MOV G,OD$[]{STRING}
JSR ARRAYSTORE
NOP
MOV X,OD%{INTEGER}
JSR FINX
MOV OD%{INTEGER},X
NOP
MOV Y,MX%{INTEGER}
MOV X,OD%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP54
JMP SKIP54
NSKIP54:
JMP 42420
NOP
SKIP54:
43165:
NOP
MOV Y,#10{INTEGER}
MOV X,PO%{INTEGER}
ADD X,Y
MOV PO%{INTEGER},X
NOP
JSR GOSUB
JSR 63000
NOP
MOVB 646,#3{INTEGER}
43170:
NOP
JMP RETURN
43200:
NOP
43210:
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP55
JMP SKIP55
NSKIP55:
JMP RETURN
NOP
SKIP55:
43220:
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
43230:
NOP
MOV X,II{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,C%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP56
JMP SKIP56
NSKIP56:
NOP
NOP
MOV X,II{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP57
JMP SKIP57
NSKIP57:
NOP
MOV Y,II{REAL}
NOP
PUSH Y
NOP
POP X
MOV Y,#1{INTEGER}
MOV G,UV%[]{INTEGER}
JSR ARRAYSTORE
JMP RETURN
SKIP57:
NOP
SKIP56:
43240:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
43400:
NOP
43410:
NOP
MOV X,#9{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV RR%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV X,RR%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP58
JMP SKIP58
NSKIP58:
JSR GOSUB
NOP
JSR 43800
NOP
NOP
SKIP58:
43420:
NOP
43430:
NOP
MOV X,#3{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP59
JMP SKIP59
NSKIP59:
JSR GOSUB
NOP
JSR 43200
NOP
NOP
SKIP59:
43435:
NOP
MOV X,#4{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP60
JMP SKIP60
NSKIP60:
JSR GOSUB
NOP
JSR 43900
NOP
NOP
SKIP60:
43440:
NOP
MOV X,#5{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP61
JMP SKIP61
NSKIP61:
JSR GOSUB
NOP
JSR 42500
NOP
NOP
SKIP61:
43450:
NOP
MOV X,#6{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP62
JMP SKIP62
NSKIP62:
JSR GOSUB
NOP
JSR 42600
NOP
NOP
SKIP62:
43455:
NOP
MOV X,#7{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP63
JMP SKIP63
NSKIP63:
JSR GOSUB
NOP
JSR 44000
NOP
NOP
SKIP63:
43460:
NOP
MOV X,#10{INTEGER}
MOV G,AC%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
MOV Y,#-1.0{REAL}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP64
JMP SKIP64
NSKIP64:
JSR GOSUB
NOP
JSR 44200
NOP
NOP
SKIP64:
43490:
NOP
MOV Y,#1{INTEGER}
MOV RT%{INTEGER},Y
NOP
JMP RETURN
43500:
NOP
43510:
NOP
MOV Y,#-1.0{REAL}
MOV X,PP{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP65
JMP SKIP65
NSKIP65:
JMP 43530
NOP
SKIP65:
43520:
NOP
MOV Y,C2%{INTEGER}
MOV RR%{INTEGER},Y
NOP
JSR GOSUB
JSR 43600
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP66
JMP SKIP66
NSKIP66:
JMP RETURN
NOP
SKIP66:
43530:
NOP
MOV Y,C%{INTEGER}
MOV RR%{INTEGER},Y
NOP
JSR GOSUB
JSR 43600
NOP
JMP RETURN
43600:
NOP
43610:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP67
JMP SKIP67
NSKIP67:
JMP 43670
NOP
SKIP67:
43620:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
43630:
NOP
MOV X,I{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,RR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP68
JMP SKIP68
NSKIP68:
NOP
NOP
MOV X,I{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP69
JMP SKIP69
NSKIP69:
NOP
MOV Y,#1{INTEGER}
NOP
MOV RT%{INTEGER},Y
JMP RETURN
SKIP69:
NOP
SKIP68:
43640:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
43670:
NOP
MOV Y,#0{INTEGER}
MOV X,TC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP70
JMP SKIP70
NSKIP70:
JMP 43710
NOP
SKIP70:
43680:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,TC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
43690:
NOP
MOV X,I{REAL}
MOV G,IP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,RR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP71
JMP SKIP71
NSKIP71:
NOP
NOP
MOV X,RR%{INTEGER}
MOV G,MV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP72
JMP SKIP72
NSKIP72:
NOP
MOV Y,#1{INTEGER}
NOP
MOV RT%{INTEGER},Y
JMP RETURN
SKIP72:
NOP
SKIP71:
43700:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
43710:
NOP
JSR GOSUB
JSR 53450
NOP
JMP RETURN
43800:
NOP
43810:
NOP
MOV Y,C%{INTEGER}
MOV RR%{INTEGER},Y
NOP
JSR GOSUB
JSR 43200
NOP
MOV Y,C2%{INTEGER}
MOV C%{INTEGER},Y
NOP
JSR GOSUB
JSR 43200
NOP
MOV Y,RR%{INTEGER}
MOV C%{INTEGER},Y
NOP
JMP RETURN
43900:
NOP
43910:
NOP
JSR GOSUB
JSR 42650
NOP
43920:
NOP
JSR GOSUB
JSR 43200
NOP
43930:
NOP
JMP RETURN
44000:
NOP
44010:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#3{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,LX$[]{STRING}
JSR ARRAYACCESS
MOV B,A
CHGCTX #0
JSR LEN
MOV Y,#0{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP73
JMP SKIP73
NSKIP73:
JMP 44040
NOP
SKIP73:
44020:
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV X,C%{INTEGER}
CHGCTX #1
MOV G,DR$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
POP X
MOV G,LX$[]{STRING}
JSR ARRAYSTORE
44030:
NOP
JSR GOSUB
JSR 62500
NOP
MOV Y,#256{INTEGER}
MOV I{REAL},Y
44040:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR GOSUB
JSR 42400
44060:
NOP
JMP RETURN
44200:
NOP
44210:
NOP
JSR COMPACTMAX
MOV Y,C%{INTEGER}
CHGCTX #1
JSR STR
JSR COPYSTR
MOV A${STRING},A
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,A${STRING}
JSR RIGHT
MOV B,A
MOV A,#portal{STRING}
JSR CONCAT
MOV B,#.rom{STRING}
JSR CONCAT
JSR COPYSTR
MOV RN${STRING},A
44220:
NOP
JSR LINEBREAK
NOP
JSR GOSUB
JSR 40100
NOP
JMP RETURN
45000:
NOP
45010:
NOP
MOVB 646,#10{INTEGER}
NOP
MOV A,#Moegliche Befehle:{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
45020:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,TB%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV B,#{STRING}
MOV A${STRING},B
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#4{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV Y,II{REAL}
INT X,Y
MOV A,#4{INTEGER}
MOV Y,X
SHL Y,A
ADD X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,CM$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV B${STRING},A
45030:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,B${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP74
JMP SKIP74
NSKIP74:
NOP
NOP
MOV Y,#5{INTEGER}
MOV II{REAL},Y
JMP 45060
NOP
SKIP74:
45040:
NOP
MOV Y,#0{INTEGER}
MOV X,II{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP75
JMP SKIP75
NSKIP75:
NOP
NOP
JSR COMPACTMAX
MOV B,#, {STRING}
MOV A,A${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
SKIP75:
45050:
NOP
JSR COMPACTMAX
MOV B,B${STRING}
MOV A,A${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
45060:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR GOSUB
JSR 59100
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
45100:
NOP
45110:
NOP
MOV Y,#2{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#2{INTEGER}
PUSH Y
MOV B,SX${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
JMP RETURN
45200:
NOP
45210:
NOP
MOV B,#?{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP76
JMP SKIP76
NSKIP76:
NOP
NOP
MOV B,#-1{STRING}
MOV A${STRING},B
SKIP76:
45220:
NOP
JMP RETURN
48000:
NOP
48010:
NOP
MOV A,#Lade Daten...{STRING}
JSR STROUT
48015:
NOP
MOV B,#operations.def{STRING}
MOV SX${STRING},B
NOP
JSR GOSUB
JSR 45100
NOP
MOV Y,#0{INTEGER}
MOV GC%{INTEGER},Y
48020:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#10{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
48030:
NOP
JSR GOSUB
JSR 61700
NOP
JSR GOSUB
JSR 45200
48040:
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#22{INTEGER}
MUL X,Y
PUSH X
MOV Y,GC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV B,A${STRING}
CHGCTX #0
JSR VAL
MOV Y,X
POP X
MOV G,OG%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
48050:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#5{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
INT X,Y
MOV Y,#22{INTEGER}
MUL X,Y
PUSH X
MOV Y,GC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,#{STRING}
POP X
MOV G,OG$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
48060:
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,A${STRING}
MOV TX${STRING},B
NOP
JSR COMPACTMAX
MOV Y,#46{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
48070:
NOP
MOV B,#***{STRING}
MOV A,TX${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP77
JMP SKIP77
NSKIP77:
JMP 48090
NOP
SKIP77:
48080:
NOP
JSR GOSUB
JSR 61000
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#22{INTEGER}
MUL X,Y
PUSH X
MOV Y,GC%{INTEGER}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,TX${STRING}
POP X
MOV G,OG$[]{STRING}
JSR ARRAYSTORE
NOP
MOV Y,#1{INTEGER}
MOV X,II{REAL}
ADD X,Y
MOV II{REAL},X
NOP
JMP 48060
48090:
NOP
MOV X,GC%{INTEGER}
JSR FINX
MOV GC%{INTEGER},X
NOP
MOV Y,#64{INTEGER}
MOV X,ST{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP78
JMP SKIP78
NSKIP78:
JMP 48020
NOP
SKIP78:
48100:
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
48105:
NOP
MOV Y,MO%{INTEGER}
MOV X,GC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP79
JMP SKIP79
NSKIP79:
JMP 42420
NOP
SKIP79:
48110:
NOP
MOV X,#2{INTEGER}
JSR CLOSE
NOP
JMP RETURN
48200:
NOP
48210:
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV Y,#8{INTEGER}
PUSH Y
MOV Y,#1{INTEGER}
PUSH Y
MOV B,#${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
JMP RETURN
49000:
NOP
49005:
NOP
JSR GETSTR
MOV A${STRING},A
NOP
MOV B,#x{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#q{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP80
JMP SKIP80
NSKIP80:
JMP 49100
NOP
SKIP80:
49010:
NOP
JMP 49000
49100:
NOP
49110:
NOP
JSR END
RTS
50000:
NOP
50002:
NOP
MOV Y,LR%{INTEGER}
MOV X,RD%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP81
JMP SKIP81
NSKIP81:
JMP 49000
NOP
SKIP81:
50005:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
POP X
MOV Y,#-1.0{REAL}
MOV G,CV%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV A,#{STRING}
POP X
MOV G,CP$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV SF%{INTEGER},Y
50010:
NOP
MOVB 646,#5{INTEGER}
NOP
MOV A,CB${STRING}
JSR STROUT
NOP
MOV B,#{STRING}
MOV CC${STRING},B
NOP
MOVB 646,#1{INTEGER}
50012:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,LC${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP82
JMP SKIP82
NSKIP82:
NOP
NOP
MOV B,LC${STRING}
MOV CC${STRING},B
NOP
NOP
MOV A,LC${STRING}
JSR STROUT
JSR LINEBREAK
JMP 50020
NOP
SKIP82:
50015:
NOP
JSR GOSUB
JSR 63000
NOP
MOVB 19,#1{INTEGER}
NOP
INPUT0:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#{STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTSTR
MOV CC${STRING},A
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK0
JSR EXTRAIGNORED
INPUTCHECK0:
NOP
MOVB 19,#0{INTEGER}
NOP
JSR LINEBREAK
50020:
NOP
MOVB 646,#3{INTEGER}
NOP
MOV B,#{STRING}
MOV CT${STRING},B
NOP
MOV B,#{STRING}
MOV LC${STRING},B
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,CC${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP83
JMP SKIP83
NSKIP83:
NOP
NOP
MOV B,#help{STRING}
MOV CC${STRING},B
SKIP83:
50030:
NOP
MOV Y,#0{INTEGER}
MOV ER{REAL},Y
NOP
MOV B,CC${STRING}
MOV TX${STRING},B
NOP
JSR GOSUB
JSR 63100
NOP
JSR COMPACTMAX
MOV B,# {STRING}
MOV A,TX${STRING}
JSR CONCAT
JSR COPYSTR
MOV CC${STRING},A
NOP
50035:
NOP
JSR GOSUB
JSR 41000
50040:
NOP
MOV Y,#0{INTEGER}
MOV CC%{INTEGER},Y
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV B,CC${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
JSR COMPACTMAX
MOV C,I{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,CC${STRING}
JSR MID
JSR COPYSTR
MOV C${STRING},A
NOP
MOV B,C${STRING}
CHGCTX #0
JSR ASC
MOV C%{INTEGER},X
50045:
NOP
MOV Y,#128{INTEGER}
MOV X,C%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP84
JMP SKIP84
NSKIP84:
NOP
NOP
MOV Y,#32{INTEGER}
MOV C%{INTEGER},Y
NOP
NOP
SKIP84:
50050:
NOP
MOV Y,#57{INTEGER}
MOV X,C%{INTEGER}
GT X,Y
PUSH X
MOV Y,#48{INTEGER}
MOV X,C%{INTEGER}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP85
JMP SKIP85
NSKIP85:
NOP
NOP
MOV Y,#90{INTEGER}
MOV X,C%{INTEGER}
GT X,Y
PUSH X
MOV Y,#65{INTEGER}
MOV X,C%{INTEGER}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP86
JMP SKIP86
NSKIP86:
NOP
MOV Y,#32{INTEGER}
NOP
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP87
JMP SKIP87
NSKIP87:
JMP 50100
SKIP87:
SKIP86:
NOP
SKIP85:
50060:
NOP
MOV Y,#32{INTEGER}
MOV X,C%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP88
JMP SKIP88
NSKIP88:
NOP
NOP
JSR COMPACTMAX
MOV B,C${STRING}
MOV A,CT${STRING}
JSR CONCAT
JSR COPYSTR
MOV CT${STRING},A
JMP 50080
NOP
SKIP88:
50070:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,CT${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP89
JMP SKIP89
NSKIP89:
JSR GOSUB
NOP
JSR 50500
SKIP89:
50080:
NOP
MOV Y,#9{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP90
JMP SKIP90
NSKIP90:
NOP
NOP
MOV Y,#256{INTEGER}
MOV I{REAL},Y
SKIP90:
50100:
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
50110:
NOP
MOV Y,CC%{INTEGER}
MOV PP%{INTEGER},Y
NOP
MOV Y,CC%{INTEGER}
MOV CO%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV CC%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,PP%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
50120:
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,CP$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
NOP
MOV Y,#-1.0{REAL}
MOV T%{INTEGER},Y
NOP
MOV Y,#3{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
LT X,Y
CMP X,#0{REAL}
JNE NSKIP91
JMP SKIP91
NSKIP91:
JMP 50155
NOP
SKIP91:
50130:
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,TB%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,MS%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV Y,II{REAL}
INT X,Y
MOV A,#4{INTEGER}
MOV Y,X
SHL Y,A
ADD X,Y
PUSH X
MOV Y,P{REAL}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,CM$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV B${STRING},A
50135:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,B${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP92
JMP SKIP92
NSKIP92:
NOP
NOP
MOV Y,#256{INTEGER}
MOV II{REAL},Y
JMP 50150
NOP
SKIP92:
50140:
NOP
JSR COMPACTMAX
MOV B,A${STRING}
CHGCTX #0
JSR LEN
MOV C,X
CHGCTX #1
MOV B,B${STRING}
JSR LEFT
MOV B,A
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP93
JMP SKIP93
NSKIP93:
NOP
NOP
MOV Y,P{REAL}
MOV T%{INTEGER},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV II{REAL},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV P{REAL},Y
SKIP93:
50150:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV A,(P{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
50155:
NOP
MOV Y,#-1.0{REAL}
MOV X,T%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP94
JMP SKIP94
NSKIP94:
NOP
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP95
JMP SKIP95
NSKIP95:
NOP
MOV Y,#1{INTEGER}
NOP
MOV ER{REAL},Y
JMP RETURN
SKIP95:
NOP
SKIP94:
50160:
NOP
MOV Y,#-1.0{REAL}
MOV X,T%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP96
JMP SKIP96
NSKIP96:
NOP
NOP
MOV Y,#0{INTEGER}
PUSH Y
NOP
POP X
MOV Y,T%{INTEGER}
MOV G,CV%[]{INTEGER}
JSR ARRAYSTORE
NOP
NOP
MOV Y,#-1.0{REAL}
MOV T%{INTEGER},Y
JMP 50230
NOP
SKIP96:
50170:
NOP
JSR GOSUB
JSR 50400
50185:
NOP
MOV Y,#-1.0{REAL}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP97
JMP SKIP97
NSKIP97:
JSR GOSUB
NOP
JSR 50300
JSR GOSUB
NOP
JSR 50400
SKIP97:
50190:
NOP
MOV Y,#-1.0{REAL}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP98
JMP SKIP98
NSKIP98:
JMP 50230
NOP
SKIP98:
50200:
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP99
JMP SKIP99
NSKIP99:
NOP
NOP
MOV Y,#1{INTEGER}
PUSH Y
NOP
POP X
MOV Y,T%{INTEGER}
MOV G,CV%[]{INTEGER}
JSR ARRAYSTORE
NOP
NOP
MOV Y,#-1.0{REAL}
MOV T%{INTEGER},Y
SKIP99:
50210:
NOP
MOV X,#2{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP100
JMP SKIP100
NSKIP100:
NOP
NOP
MOV Y,#2{INTEGER}
PUSH Y
NOP
POP X
MOV Y,T%{INTEGER}
MOV G,CV%[]{INTEGER}
JSR ARRAYSTORE
NOP
NOP
MOV Y,#-1.0{REAL}
MOV T%{INTEGER},Y
SKIP100:
50220:
NOP
MOV Y,#-1.0{REAL}
MOV X,T%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP101
JMP SKIP101
NSKIP101:
NOP
NOP
MOV Y,#1{INTEGER}
MOV ER{REAL},Y
JMP RETURN
NOP
SKIP101:
50230:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
50240:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#-1.0{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP102
JMP SKIP102
NSKIP102:
NOP
NOP
MOV X,CC%{INTEGER}
JSR FINX
MOV CC%{INTEGER},X
JMP 50260
NOP
SKIP102:
50250:
NOP
MOV Y,#0{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP103
JMP SKIP103
NSKIP103:
NOP
NOP
MOV Y,#2{INTEGER}
MOV ER{REAL},Y
JMP RETURN
NOP
SKIP103:
50260:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
50270:
NOP
MOV B,#{STRING}
MOV LO${STRING},B
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV I{REAL},X
NOP
MOV Y,#-1.0{REAL}
MOV X,I{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP104
JMP SKIP104
NSKIP104:
NOP
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV TX${STRING},A
JSR GOSUB
NOP
JSR 63100
NOP
NOP
MOV B,TX${STRING}
MOV LO${STRING},B
SKIP104:
50280:
NOP
JMP RETURN
50300:
NOP
50310:
NOP
JSR COMPACTMAX
MOV B,#n{STRING}
CHGCTX #0
PUSH B
MOV C,#1{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR RIGHT
POP B
CHGCTX #0
JSR SNEQ
CMP X,#0{REAL}
JNE NSKIP105
JMP SKIP105
NSKIP105:
JMP RETURN
NOP
SKIP105:
50320:
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,A${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
NOP
JMP RETURN
50400:
NOP
50410:
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,TI%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV B,A${STRING}
CHGCTX #0
PUSH B
MOV X,P{REAL}
CHGCTX #1
MOV G,IL$[]{STRING}
JSR ARRAYACCESS
POP B
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP106
JMP SKIP106
NSKIP106:
NOP
NOP
MOV Y,P{REAL}
MOV T%{INTEGER},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV P{REAL},Y
SKIP106:
50420:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
50500:
NOP
50505:
NOP
JSR GOSUB
JSR 50600
50510:
NOP
MOV Y,#0{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
PUSH X
CHGCTX #1
MOV B,#und{STRING}
MOV A,CT${STRING}
CHGCTX #0
JSR SNEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP107
JMP SKIP107
NSKIP107:
NOP
NOP
MOV Y,CC%{INTEGER}
PUSH Y
NOP
MOV A,CT${STRING}
POP X
MOV G,CP$[]{STRING}
JSR ARRAYSTORE
NOP
NOP
MOV B,#{STRING}
MOV CT${STRING},B
NOP
NOP
MOV X,CC%{INTEGER}
JSR FINX
MOV CC%{INTEGER},X
JMP RETURN
NOP
SKIP107:
50520:
NOP
JSR COMPACTMAX
MOV Y,I{REAL}
PUSH Y
CHGCTX #1
MOV B,CC${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,CC${STRING}
JSR RIGHT
JSR COPYSTR
MOV LC${STRING},A
NOP
MOV Y,#256{INTEGER}
MOV I{REAL},Y
NOP
JMP RETURN
50600:
NOP
50610:
NOP
MOV Y,#3{INTEGER}
PUSH Y
CHGCTX #1
MOV B,CT${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
PUSH X
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,LO${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP108
JMP SKIP108
NSKIP108:
JMP RETURN
NOP
SKIP108:
50620:
NOP
JSR COMPACTMAX
MOV C,#2{INTEGER}
CHGCTX #1
MOV B,CT${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
NOP
MOV B,#si{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#ih{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#es{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP109
JMP SKIP109
NSKIP109:
NOP
NOP
MOV B,LO${STRING}
MOV CT${STRING},B
SKIP109:
50630:
NOP
JMP RETURN
52000:
NOP
52005:
NOP
MOV Y,#0{INTEGER}
MOV RR%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV SK%{INTEGER},Y
52010:
NOP
MOV Y,#0{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
PUSH X
MOV Y,#0{INTEGER}
MOV X,ER{REAL}
NEQ X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP110
JMP SKIP110
NSKIP110:
JMP RETURN
NOP
SKIP110:
52012:
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
NOP
MOV X,T%{INTEGER}
JSR FINX
INT X,X
ON0SUB0:
CMP X,#1{INTEGER}
JNE AFTER0SUB0
JMP 52700
AFTER0SUB0:
ON0SUB1:
CMP X,#2{INTEGER}
JNE AFTER0SUB1
JMP 52030
AFTER0SUB1:
ON0SUB2:
CMP X,#3{INTEGER}
JNE AFTER0SUB2
JMP 52500
AFTER0SUB2:
ON0SUB3:
CMP X,#4{INTEGER}
JNE AFTER0SUB3
JMP 52300
AFTER0SUB3:
ON0SUB4:
CMP X,#5{INTEGER}
JNE AFTER0SUB4
JMP 52200
AFTER0SUB4:
ON0SUB5:
CMP X,#6{INTEGER}
JNE AFTER0SUB5
JMP 52900
AFTER0SUB5:
ON0SUB6:
CMP X,#7{INTEGER}
JNE AFTER0SUB6
JMP 53200
AFTER0SUB6:
GSKIPON0:
52013:
NOP
MOV Y,#6{INTEGER}
MOV X,T%{INTEGER}
SUB X,Y
INT X,X
ON1SUB0:
CMP X,#1{INTEGER}
JNE AFTER1SUB0
JMP 53500
AFTER1SUB0:
ON1SUB1:
CMP X,#2{INTEGER}
JNE AFTER1SUB1
JMP 53600
AFTER1SUB1:
ON1SUB2:
CMP X,#3{INTEGER}
JNE AFTER1SUB2
JMP 53700
AFTER1SUB2:
ON1SUB3:
CMP X,#4{INTEGER}
JNE AFTER1SUB3
JMP 53800
AFTER1SUB3:
ON1SUB4:
CMP X,#5{INTEGER}
JNE AFTER1SUB4
JMP 53850
AFTER1SUB4:
ON1SUB5:
CMP X,#6{INTEGER}
JNE AFTER1SUB5
JMP 53900
AFTER1SUB5:
ON1SUB6:
CMP X,#7{INTEGER}
JNE AFTER1SUB6
JMP 54000
AFTER1SUB6:
ON1SUB7:
CMP X,#8{INTEGER}
JNE AFTER1SUB7
JMP 53500
AFTER1SUB7:
ON1SUB8:
CMP X,#9{INTEGER}
JNE AFTER1SUB8
JMP 53500
AFTER1SUB8:
ON1SUB9:
CMP X,#10{INTEGER}
JNE AFTER1SUB9
JMP 45000
AFTER1SUB9:
GSKIPON1:
52014:
NOP
MOV Y,#2{INTEGER}
MOV ER{REAL},Y
NOP
JMP RETURN
52022:
NOP
52025:
NOP
52030:
NOP
52040:
NOP
MOV Y,#1{INTEGER}
MOV X,CO%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP111
JMP SKIP111
NSKIP111:
JSR GOSUB
NOP
JSR 59000
JMP RETURN
NOP
SKIP111:
52050:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP112
JMP SKIP112
NSKIP112:
JMP 52065
NOP
SKIP112:
52060:
NOP
JMP 59150
52065:
NOP
MOV Y,#0{INTEGER}
MOV X,TC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP113
JMP SKIP113
NSKIP113:
JMP 52085
NOP
SKIP113:
52066:
NOP
JSR GOSUB
JSR 52150
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP114
JMP SKIP114
NSKIP114:
JMP RETURN
NOP
SKIP114:
52070:
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,TC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,IP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP%{INTEGER},X
NOP
MOV Y,T%{INTEGER}
MOV X,PP%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP115
JMP SKIP115
NSKIP115:
JSR GOSUB
NOP
JSR 40500
JMP RETURN
NOP
SKIP115:
52080:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
52085:
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP116
JMP SKIP116
NSKIP116:
JMP 52110
NOP
SKIP116:
52090:
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
52095:
NOP
MOV X,I{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP%{INTEGER},X
NOP
MOV Y,T%{INTEGER}
MOV X,PP%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP117
JMP SKIP117
NSKIP117:
NOP
NOP
MOV X,I{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP118
JMP SKIP118
NSKIP118:
JSR GOSUB
JSR 40500
JMP RETURN
NOP
SKIP118:
NOP
SKIP117:
52100:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
52110:
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# ist hier nicht!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV Y,#1{INTEGER}
MOV SK%{INTEGER},Y
NOP
JMP RETURN
52150:
NOP
52155:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,OC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP119
JMP SKIP119
NSKIP119:
JMP RETURN
NOP
SKIP119:
52160:
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV CO%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV J{REAL},Y
NOP
MOV X,OC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(J{REAL})
JSR INITFOR
NOP
MOV Y,J{REAL}
INT X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
52165:
NOP
MOV Y,CO%{INTEGER}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP120
JMP SKIP120
NSKIP120:
NOP
NOP
MOV Y,J{REAL}
MOV T2%{INTEGER},Y
JSR GOSUB
NOP
JSR 42200
SKIP120:
52170:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP121
JMP SKIP121
NSKIP121:
JMP RETURN
NOP
SKIP121:
52175:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
52200:
NOP
52202:
NOP
52204:
NOP
52220:
NOP
MOV Y,#1{INTEGER}
MOV X,CO%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP122
JMP SKIP122
NSKIP122:
JMP 52280
NOP
SKIP122:
52230:
NOP
JSR LINEBREAK
NOP
MOV A,#Wirklich beenden (j/n)?{STRING}
JSR STROUT
52240:
NOP
JSR GETSTR
MOV A${STRING},A
NOP
MOV B,#{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP123
JMP SKIP123
NSKIP123:
JMP 52240
NOP
SKIP123:
52250:
NOP
MOV B,#j{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP124
JMP SKIP124
NSKIP124:
JSR LINEBREAK
NOP
MOV B,#Bis bald!{STRING}
NOP
MOV A,B
JSR STROUT
JSR LINEBREAK
JMP 49100
NOP
NOP
SKIP124:
52260:
NOP
MOV B,#n{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP125
JMP SKIP125
NSKIP125:
JMP RETURN
NOP
SKIP125:
52270:
NOP
JMP 52230
52280:
NOP
JMP 59150
52300:
NOP
52302:
NOP
52304:
NOP
52320:
NOP
MOV Y,#1{INTEGER}
MOV X,CO%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP126
JMP SKIP126
NSKIP126:
JMP 59150
NOP
SKIP126:
52330:
NOP
JSR GOSUB
JSR 40700
NOP
JMP RETURN
52500:
NOP
52502:
NOP
52504:
NOP
52510:
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
52520:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP127
JMP SKIP127
NSKIP127:
NOP
NOP
MOV Y,#2{INTEGER}
MOV X,CO%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP128
JMP SKIP128
NSKIP128:
NOP
MOV B,AL${STRING}
NOP
CHGCTX #0
PUSH B
MOV X,#1{INTEGER}
CHGCTX #1
MOV G,CP$[]{STRING}
JSR ARRAYACCESS
POP B
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,AL${STRING}
CHGCTX #0
PUSH B
MOV X,#0{INTEGER}
CHGCTX #1
MOV G,CP$[]{STRING}
JSR ARRAYACCESS
POP B
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP129
JMP SKIP129
NSKIP129:
JSR GOSUB
JSR 40800
JMP RETURN
SKIP129:
NOP
SKIP128:
NOP
SKIP127:
52525:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP130
JMP SKIP130
NSKIP130:
JMP 59150
NOP
SKIP130:
52530:
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV X,CC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
52540:
NOP
MOV Y,#0{INTEGER}
MOV RR%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,TC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP131
JMP SKIP131
NSKIP131:
JMP 52580
NOP
SKIP131:
52545:
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV X,TC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV X,II{REAL}
MOV G,IP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP%{INTEGER},X
NOP
MOV Y,T%{INTEGER}
MOV X,PP%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP132
JMP SKIP132
NSKIP132:
JSR GOSUB
NOP
JSR 40900
SKIP132:
52550:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP133
JMP SKIP133
NSKIP133:
NOP
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
SKIP133:
52560:
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP134
JMP SKIP134
NSKIP134:
NOP
NOP
MOV Y,RT%{INTEGER}
MOV RR%{INTEGER},Y
NOP
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV II{REAL},Y
SKIP134:
52570:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
52580:
NOP
MOV Y,#0{INTEGER}
MOV X,RR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP135
JMP SKIP135
NSKIP135:
NOP
NOP
MOV X,T%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# ist hier nicht!{STRING}
JSR STROUT
JSR LINEBREAK
SKIP135:
52590:
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
52600:
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP136
JMP SKIP136
NSKIP136:
JSR GOSUB
NOP
JSR 40650
SKIP136:
52610:
NOP
JMP RETURN
52700:
NOP
52702:
NOP
52704:
NOP
52720:
NOP
MOV Y,#2{INTEGER}
MOV X,CO%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP137
JMP SKIP137
NSKIP137:
JMP 59150
NOP
SKIP137:
52740:
NOP
MOV X,#1{INTEGER}
CHGCTX #1
MOV G,CP$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
NOP
JSR GOSUB
JSR 41200
52745:
NOP
MOV Y,#2{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP138
JMP SKIP138
NSKIP138:
NOP
NOP
MOV Y,#7{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
LT X,Y
CMP X,#0{REAL}
JNE NSKIP139
JMP SKIP139
NSKIP139:
NOP
JSR COMPACTMAX
NOP
MOV C,#1{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
JMP 52800
SKIP139:
NOP
SKIP138:
52750:
NOP
MOV Y,#6{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP140
JMP SKIP140
NSKIP140:
NOP
NOP
JSR COMPACTMAX
MOV C,#5{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
SKIP140:
52760:
NOP
MOV B,#nordo{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP141
JMP SKIP141
NSKIP141:
NOP
NOP
MOV B,#no{STRING}
MOV A${STRING},B
JMP 52800
NOP
SKIP141:
52770:
NOP
MOV B,#nordw{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP142
JMP SKIP142
NSKIP142:
NOP
NOP
MOV B,#nw{STRING}
MOV A${STRING},B
JMP 52800
NOP
SKIP142:
52780:
NOP
MOV B,#suedo{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP143
JMP SKIP143
NSKIP143:
NOP
NOP
MOV B,#so{STRING}
MOV A${STRING},B
JMP 52800
NOP
SKIP143:
52790:
NOP
MOV B,#suedw{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP144
JMP SKIP144
NSKIP144:
NOP
NOP
MOV B,#sw{STRING}
MOV A${STRING},B
SKIP144:
52800:
NOP
MOV B,#u{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP145
JMP SKIP145
NSKIP145:
NOP
NOP
MOV B,#h{STRING}
MOV A${STRING},B
SKIP145:
52810:
NOP
MOV B,#d{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP146
JMP SKIP146
NSKIP146:
NOP
NOP
MOV B,#r{STRING}
MOV A${STRING},B
SKIP146:
52815:
NOP
MOV Y,#0{INTEGER}
MOV X,XC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP147
JMP SKIP147
NSKIP147:
JMP 52850
NOP
SKIP147:
52820:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,XC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,XP$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV TX${STRING},A
NOP
JSR GOSUB
JSR 63100
NOP
MOV B,TX${STRING}
MOV B${STRING},B
52830:
NOP
MOV B,B${STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP148
JMP SKIP148
NSKIP148:
NOP
NOP
JSR COMPACTMAX
MOV B,#.rom{STRING}
CHGCTX #0
PUSH B
MOV X,I{REAL}
CHGCTX #1
MOV G,XX$[]{STRING}
JSR ARRAYACCESS
POP B
JSR CONCAT
JSR COPYSTR
MOV RN${STRING},A
JSR LINEBREAK
JSR GOSUB
JSR 40100
JMP RETURN
NOP
NOP
SKIP148:
52840:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
52850:
NOP
MOV A,#Da geht es nicht lang!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
52900:
NOP
52902:
NOP
52904:
NOP
53100:
NOP
JSR LINEBREAK
NOP
MOV A,# XAM / EgonOlsen71{STRING}
JSR STROUT
JSR LINEBREAK
53120:
NOP
JSR FRE
JSR INTOUT
JSR CRSRRIGHT
NOP
MOV A,#Bytes frei{STRING}
JSR STROUT
JSR LINEBREAK
53140:
NOP
JMP RETURN
53200:
NOP
53202:
NOP
53204:
NOP
53210:
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP149
JMP SKIP149
NSKIP149:
NOP
NOP
MOV A,#Du hast nichts!{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP149:
53220:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP150
JMP SKIP150
NSKIP150:
JMP 59150
NOP
SKIP150:
53230:
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV X,CC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
53240:
NOP
MOV Y,#0{INTEGER}
MOV RR%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV X,II{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV PP%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
53245:
NOP
MOV Y,T%{INTEGER}
MOV X,PP%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP151
JMP SKIP151
NSKIP151:
NOP
NOP
MOV X,II{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP152
JMP SKIP152
NSKIP152:
JSR GOSUB
JSR 41400
NOP
SKIP152:
SKIP151:
53250:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP153
JMP SKIP153
NSKIP153:
NOP
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
SKIP153:
53260:
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP154
JMP SKIP154
NSKIP154:
NOP
NOP
MOV Y,RT%{INTEGER}
MOV RR%{INTEGER},Y
NOP
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV II{REAL},Y
SKIP154:
53270:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
53280:
NOP
MOV Y,#0{INTEGER}
MOV X,RR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP155
JMP SKIP155
NSKIP155:
NOP
NOP
MOV Y,T%{INTEGER}
MOV RR%{INTEGER},Y
JSR GOSUB
NOP
JSR 53450
SKIP155:
53290:
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
53300:
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP156
JMP SKIP156
NSKIP156:
JSR GOSUB
NOP
JSR 40650
SKIP156:
53310:
NOP
JMP RETURN
53450:
NOP
53455:
NOP
MOV Y,#1{INTEGER}
MOV X,SF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP157
JMP SKIP157
NSKIP157:
NOP
NOP
MOV Y,#1{INTEGER}
MOV SK%{INTEGER},Y
JMP RETURN
NOP
NOP
NOP
SKIP157:
53460:
NOP
MOV X,RR%{INTEGER}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,# hast du nicht!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV Y,#1{INTEGER}
MOV SK%{INTEGER},Y
NOP
MOV Y,#1{INTEGER}
MOV SF%{INTEGER},Y
NOP
JMP RETURN
53500:
NOP
53502:
NOP
53504:
NOP
53510:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
NEQ X,Y
PUSH X
MOV Y,#15{INTEGER}
MOV X,T%{INTEGER}
NEQ X,Y
POP Y
AND X,Y
PUSH X
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP158
JMP SKIP158
NSKIP158:
JMP 59150
NOP
SKIP158:
53520:
NOP
MOV Y,T%{INTEGER}
MOV CO%{INTEGER},Y
NOP
JSR GOSUB
JSR 58500
NOP
JMP RETURN
53600:
NOP
53602:
NOP
53604:
NOP
53610:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
LT X,Y
PUSH X
MOV Y,#3{INTEGER}
MOV X,CC%{INTEGER}
GT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP159
JMP SKIP159
NSKIP159:
JMP 59150
NOP
SKIP159:
53620:
NOP
MOV Y,#8{INTEGER}
MOV CO%{INTEGER},Y
NOP
JSR GOSUB
JSR 58500
NOP
JMP RETURN
53700:
NOP
53702:
NOP
53704:
NOP
53710:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
LT X,Y
PUSH X
MOV Y,#3{INTEGER}
MOV X,CC%{INTEGER}
GT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP160
JMP SKIP160
NSKIP160:
JMP 59150
NOP
SKIP160:
53720:
NOP
MOV Y,#9{INTEGER}
MOV CO%{INTEGER},Y
NOP
JSR GOSUB
JSR 58500
NOP
JMP RETURN
53800:
NOP
53802:
NOP
53804:
NOP
53810:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP161
JMP SKIP161
NSKIP161:
JMP 59150
NOP
SKIP161:
53820:
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
NOP
JSR GOSUB
JSR 59200
NOP
JMP RETURN
53850:
NOP
53852:
NOP
53854:
NOP
53860:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP162
JMP SKIP162
NSKIP162:
JMP 59150
NOP
SKIP162:
53862:
NOP
JSR COMPACTMAX
MOV B,#.bak{STRING}
MOV A,FI${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
NOP
JSR COMPACTMAX
MOV B,A${STRING}
MOV A,#s:{STRING}
JSR CONCAT
JSR COPYSTR
MOV B${STRING},A
NOP
JSR GOSUB
JSR 53880
53865:
NOP
JSR COMPACTMAX
MOV B,A${STRING}
MOV A,#r:{STRING}
JSR CONCAT
MOV B,#={STRING}
JSR CONCAT
MOV B,FI${STRING}
JSR CONCAT
JSR COPYSTR
MOV B${STRING},A
NOP
JSR GOSUB
JSR 53880
53870:
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
NOP
JSR GOSUB
JSR 59200
NOP
JMP RETURN
53880:
NOP
53882:
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#15{INTEGER}
PUSH Y
MOV B,B${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
MOV X,#1{INTEGER}
JSR CLOSE
NOP
JMP RETURN
53900:
NOP
53902:
NOP
53904:
NOP
53910:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP163
JMP SKIP163
NSKIP163:
JMP 59150
NOP
SKIP163:
53920:
NOP
MOV Y,#1{INTEGER}
MOV SK%{INTEGER},Y
NOP
MOV Y,#12{INTEGER}
MOV CO%{INTEGER},Y
NOP
JSR GOSUB
JSR 58500
53930:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP164
JMP SKIP164
NSKIP164:
JMP RETURN
NOP
SKIP164:
53940:
NOP
MOV Y,#0{INTEGER}
MOV SK%{INTEGER},Y
NOP
MOV X,#1{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV RR%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
JSR GOSUB
JSR 43600
NOP
MOV Y,#1{INTEGER}
MOV X,SK%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP165
JMP SKIP165
NSKIP165:
JMP RETURN
NOP
SKIP165:
53950:
NOP
MOV Y,#0{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP166
JMP SKIP166
NSKIP166:
NOP
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
JMP 59150
NOP
SKIP166:
53960:
NOP
MOV A,#Du siehst nichts besonderes!{STRING}
JSR STROUT
JSR LINEBREAK
53970:
NOP
JMP RETURN
54000:
NOP
54002:
NOP
54004:
NOP
54010:
NOP
MOV Y,#1{INTEGER}
MOV X,CC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP167
JMP SKIP167
NSKIP167:
NOP
NOP
MOV A,#Blah blah blah!?{STRING}
JSR STROUT
JSR LINEBREAK
JMP RETURN
NOP
SKIP167:
54020:
NOP
MOV Y,#2{INTEGER}
MOV X,CC%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP168
JMP SKIP168
NSKIP168:
JMP 59150
NOP
SKIP168:
54030:
NOP
MOV Y,#13{INTEGER}
MOV CO%{INTEGER},Y
NOP
JSR GOSUB
JSR 58500
NOP
JMP RETURN
58500:
NOP
58510:
NOP
MOV Y,#0{INTEGER}
MOV X,OC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP169
JMP SKIP169
NSKIP169:
JMP 58700
NOP
SKIP169:
58520:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV J{REAL},Y
NOP
MOV X,OC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(J{REAL})
JSR INITFOR
NOP
MOV Y,J{REAL}
INT X,Y
MOV G,OP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
58530:
NOP
MOV Y,CO%{INTEGER}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP170
JMP SKIP170
NSKIP170:
NOP
NOP
MOV Y,J{REAL}
MOV T2%{INTEGER},Y
JSR GOSUB
NOP
JSR 42200
SKIP170:
58540:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP171
JMP SKIP171
NSKIP171:
JMP RETURN
NOP
SKIP171:
58550:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
58700:
NOP
58710:
NOP
MOV Y,#0{INTEGER}
MOV RT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV J{REAL},Y
NOP
MOV X,GC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(J{REAL})
JSR INITFOR
NOP
MOV Y,J{REAL}
INT X,Y
MOV G,OG%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
58720:
NOP
MOV Y,CO%{INTEGER}
MOV X,T%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP172
JMP SKIP172
NSKIP172:
NOP
NOP
MOV Y,J{REAL}
MOV T2%{INTEGER},Y
JSR GOSUB
NOP
JSR 42700
SKIP172:
58730:
NOP
MOV Y,#1{INTEGER}
MOV X,RT%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP173
JMP SKIP173
NSKIP173:
JMP RETURN
NOP
SKIP173:
58740:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
58750:
NOP
MOV Y,#0{INTEGER}
MOV X,SK%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP174
JMP SKIP174
NSKIP174:
NOP
NOP
MOV X,#0{INTEGER}
MOV G,CV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV T%{INTEGER},X
JSR GOSUB
NOP
JSR 40600
SKIP174:
58760:
NOP
JMP RETURN
59000:
NOP
59010:
NOP
MOVB 646,#15{INTEGER}
NOP
JSR LINEBREAK
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,PL%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,RD$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
59020:
NOP
JSR GOSUB
JSR 59100
59040:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR GOSUB
JSR 59500
NOP
JMP RETURN
59100:
NOP
59110:
NOP
MOV Y,#40{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP175
JMP SKIP175
NSKIP175:
NOP
NOP
MOV A,A${STRING}
JSR STROUT
JMP RETURN
NOP
SKIP175:
59120:
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
59150:
NOP
59160:
NOP
JSR GOSUB
JSR 40600
NOP
JMP RETURN
59200:
NOP
59210:
NOP
JSR LINEBREAK
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP176
JMP SKIP176
NSKIP176:
NOP
NOP
JSR COMPACTMAX
MOV B,#,r{STRING}
MOV A,FI${STRING}
JSR CONCAT
JSR COPYSTR
MOV SX${STRING},A
JSR GOSUB
NOP
JSR 45100
NOP
NOP
MOV A,#Lade...{STRING}
JSR STROUT
SKIP176:
59220:
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP177
JMP SKIP177
NSKIP177:
NOP
NOP
JSR COMPACTMAX
MOV B,#,w{STRING}
MOV A,FI${STRING}
JSR CONCAT
JSR COPYSTR
MOV SX${STRING},A
JSR GOSUB
NOP
JSR 45100
NOP
NOP
MOV A,#Speichere...{STRING}
JSR STROUT
SKIP177:
59225:
NOP
MOV Y,PO%{INTEGER}
MOV C%{INTEGER},Y
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,C%{INTEGER}
MOV PO%{INTEGER},Y
59230:
NOP
MOV Y,IC%{INTEGER}
MOV C%{INTEGER},Y
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,C%{INTEGER}
MOV IC%{INTEGER},Y
59240:
NOP
MOV Y,OD%{INTEGER}
MOV C%{INTEGER},Y
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,C%{INTEGER}
MOV OD%{INTEGER},Y
59250:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,MI%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
59260:
NOP
MOV X,I{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,I{REAL}
PUSH Y
NOP
POP X
MOV Y,C%{INTEGER}
MOV G,IV%[]{INTEGER}
JSR ARRAYSTORE
59270:
NOP
MOV X,I{REAL}
MOV G,UV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,I{REAL}
PUSH Y
NOP
POP X
MOV Y,C%{INTEGER}
MOV G,UV%[]{INTEGER}
JSR ARRAYSTORE
59280:
NOP
MOV X,I{REAL}
MOV G,RS%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,I{REAL}
PUSH Y
NOP
POP X
MOV Y,C%{INTEGER}
MOV G,RS%[]{INTEGER}
JSR ARRAYSTORE
59290:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
59300:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,MR%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
59310:
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
MOV G,RV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV C%{INTEGER},X
NOP
JSR GOSUB
JSR 59900
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
NOP
MOV Y,C%{INTEGER}
MOV G,RV%[]{INTEGER}
JSR ARRAYSTORE
59315:
NOP
MOV Y,#4{INTEGER}
MOV X,II{REAL}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP178
JMP SKIP178
NSKIP178:
NOP
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,LX$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
JSR GOSUB
NOP
JSR 59950
NOP
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,A${STRING}
POP X
MOV G,LX$[]{STRING}
JSR ARRAYSTORE
SKIP178:
59320:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
59330:
NOP
MOV B,RN${STRING}
MOV A${STRING},B
NOP
JSR GOSUB
JSR 59950
NOP
MOV B,A${STRING}
MOV RN${STRING},B
59335:
NOP
MOV Y,OD%{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,MX%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV A,#{STRING}
POP X
MOV G,OD$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV X,OD%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP179
JMP SKIP179
NSKIP179:
JMP 59370
NOP
SKIP179:
59340:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,OD%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
59350:
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,OD$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV A${STRING},A
NOP
JSR GOSUB
JSR 59950
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV A,A${STRING}
POP X
MOV G,OD$[]{STRING}
JSR ARRAYSTORE
59360:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
59370:
NOP
MOV X,#2{INTEGER}
JSR CLOSE
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
59380:
NOP
MOV Y,#0{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP180
JMP SKIP180
NSKIP180:
JSR GOSUB
NOP
JSR 63300
JSR GOSUB
NOP
JSR 40100
SKIP180:
59390:
NOP
MOV B,#{STRING}
MOV LC${STRING},B
NOP
JMP RETURN
59500:
NOP
59510:
NOP
JSR LINEBREAK
NOP
JSR GOSUB
JSR 62600
NOP
JSR GOSUB
JSR 62500
NOP
JMP RETURN
59800:
NOP
59810:
NOP
JSR LINEBREAK
NOP
MOV A,#IO-Error: {STRING}
JSR STROUT
NOP
MOV X,ST{REAL}
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
NOP
JMP 49100
59850:
NOP
59855:
NOP
MOV Y,#1{INTEGER}
MOV X,P{REAL}
ADD X,Y
MOV P{REAL},X
NOP
MOV Y,#40{INTEGER}
MOV X,P{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP181
JMP SKIP181
NSKIP181:
NOP
NOP
JSR COMPACTMAX
MOV Y,#46{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
SKIP181:
59860:
NOP
MOV Y,#191{INTEGER}
MOV X,ST{REAL}
AND X,Y
MOV Y,#0{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP182
JMP SKIP182
NSKIP182:
JMP 59800
NOP
SKIP182:
59870:
NOP
JMP RETURN
59900:
NOP
59910:
NOP
MOV Y,#0{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP183
JMP SKIP183
NSKIP183:
MOV Y,#2{INTEGER}
NOP
PUSH Y
JSR CLEARQUEUE
JSR COMPACTMAX
POP C
JSR INPUTNUMBERCHANNEL
MOV C%{INTEGER},Y
JMP 59925
NOP
SKIP183:
59920:
NOP
JSR LOCKCHANNEL
MOV Y,#2{INTEGER}
PUSH Y
NOP
MOV X,C%{INTEGER}
POP C
JSR INTOUTCHANNEL
MOV A,# {STRING}
JSR STROUTCHANNEL
JSR LINEBREAKCHANNEL
JSR UNLOCKCHANNEL
59925:
NOP
JSR GOSUB
JSR 59850
59930:
NOP
JMP RETURN
59950:
NOP
59960:
NOP
MOV Y,#0{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP184
JMP SKIP184
NSKIP184:
JSR GOSUB
NOP
JSR 61700
JMP 59980
NOP
SKIP184:
59965:
NOP
MOV B,#{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP185
JMP SKIP185
NSKIP185:
NOP
NOP
MOV B,#?{STRING}
MOV A${STRING},B
SKIP185:
59970:
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP186
JMP SKIP186
NSKIP186:
JSR LOCKCHANNEL
NOP
MOV Y,#2{INTEGER}
PUSH Y
NOP
MOV A,A${STRING}
POP C
JSR STROUTCHANNEL
JSR LINEBREAKCHANNEL
JSR UNLOCKCHANNEL
SKIP186:
59980:
NOP
JSR GOSUB
JSR 59850
NOP
MOV B,#?{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP187
JMP SKIP187
NSKIP187:
NOP
NOP
MOV B,#{STRING}
MOV A${STRING},B
SKIP187:
59990:
NOP
JMP RETURN
60000:
NOP
60002:
NOP
MOV A,#Einen Moment...{STRING}
JSR STROUT
JSR LINEBREAK
60005:
NOP
MOV Y,#30{INTEGER}
MOV MX%{INTEGER},Y
NOP
MOV Y,#35{INTEGER}
MOV MR%{INTEGER},Y
NOP
MOV Y,#51{INTEGER}
MOV MI%{INTEGER},Y
NOP
NOP
MOV Y,#9{INTEGER}
MOV XO%{INTEGER},Y
NOP
JSR COMPACTMAX
MOV B,#> {STRING}
CHGCTX #0
PUSH B
MOV Y,#13{INTEGER}
CHGCTX #1
JSR CHR
POP B
JSR CONCAT
JSR COPYSTR
MOV CB${STRING},A
NOP
MOV Y,#0{INTEGER}
MOV LR%{INTEGER},Y
NOP
MOV Y,#21{INTEGER}
MOV MO%{INTEGER},Y
NOP
MOV Y,#6{INTEGER}
MOV OX%{INTEGER},Y
60006:
NOP
MOV B,#alles{STRING}
MOV AL${STRING},B
NOP
MOV Y,#5{INTEGER}
MOV MS%{INTEGER},Y
NOP
MOV B,#save.dat{STRING}
MOV FI${STRING},B
NOP
MOV Y,#49152{INTEGER}
MOV BA{REAL},Y
NOP
MOV Y,BA{REAL}
MOV AD{REAL},Y
60010:
NOP
60020:
NOP
60030:
NOP
60035:
NOP
60040:
NOP
60050:
NOP
60055:
NOP
60060:
NOP
60070:
NOP
60080:
NOP
60090:
NOP
60100:
NOP
60110:
NOP
60120:
NOP
60130:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,MR%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,#8{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
MOV Y,P{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
NOP
MOV Y,#-1.0{REAL}
MOV G,RV%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV A,(P{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
60140:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#9{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
JSR READSTR
POP X
MOV G,DR$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
60150:
NOP
60160:
NOP
60170:
NOP
60180:
NOP
60190:
NOP
MOV B,#{STRING}
MOV RL${STRING},B
NOP
60200:
NOP
MOV Y,#0{INTEGER}
MOV PO%{INTEGER},Y
NOP
60900:
NOP
JMP RETURN
61000:
NOP
61010:
NOP
MOV B,#{STRING}
MOV SX${STRING},B
NOP
MOV Y,#1{INTEGER}
MOV LI{REAL},Y
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV B,TX${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
61020:
NOP
JSR COMPACTMAX
MOV B,#;{STRING}
CHGCTX #0
PUSH B
MOV C,I{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,TX${STRING}
JSR MID
POP B
CHGCTX #0
JSR SNEQ
CMP X,#0{REAL}
JNE NSKIP188
JMP SKIP188
NSKIP188:
JMP 61040
NOP
SKIP188:
61030:
NOP
JSR GOSUB
JSR 61100
NOP
JSR COMPACTMAX
MOV B,#,{STRING}
MOV A,SX${STRING}
JSR CONCAT
JSR COPYSTR
MOV SX${STRING},A
NOP
MOV Y,#1{INTEGER}
MOV X,I{REAL}
ADD X,Y
MOV LI{REAL},X
61040:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#1{INTEGER}
MOV X,LI{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP189
JMP SKIP189
NSKIP189:
JMP RETURN
NOP
NOP
NOP
SKIP189:
61050:
NOP
JSR GOSUB
JSR 61100
61060:
NOP
MOV B,SX${STRING}
MOV TX${STRING},B
NOP
JMP RETURN
61100:
NOP
61110:
NOP
JSR COMPACTMAX
MOV C,LI{REAL}
PUSH C
MOV Y,LI{REAL}
MOV X,I{REAL}
SUB X,Y
PUSH X
CHGCTX #1
MOV B,TX${STRING}
POP D
POP C
JSR MID
MOV B,A
MOV A,SX${STRING}
JSR CONCAT
JSR COPYSTR
MOV SX${STRING},A
NOP
JMP RETURN
61200:
NOP
61205:
NOP
MOV A,#Lade Gegenstaende...{STRING}
JSR STROUT
61206:
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV J%{INTEGER},Y
61220:
NOP
MOV B,#items.def{STRING}
MOV SX${STRING},B
NOP
JSR GOSUB
JSR 45100
61230:
NOP
JSR GOSUB
JSR 61700
NOP
MOV Y,#1{INTEGER}
MOV X,II{REAL}
ADD X,Y
MOV II{REAL},X
61250:
NOP
MOV B,#{STRING}
MOV ID${STRING},B
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV B,A${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
61260:
NOP
JSR COMPACTMAX
MOV C,I{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR MID
JSR COPYSTR
MOV SX${STRING},A
NOP
MOV B,#;{STRING}
MOV A,SX${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP190
JMP SKIP190
NSKIP190:
JMP 61280
NOP
SKIP190:
61270:
NOP
JSR COMPACTMAX
MOV B,SX${STRING}
MOV A,ID${STRING}
JSR CONCAT
JSR COPYSTR
MOV ID${STRING},A
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
61280:
NOP
MOV B,ID${STRING}
CHGCTX #0
JSR VAL
MOV II{REAL},X
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
MOV X,I{REAL}
ADD X,Y
PUSH X
MOV C,#1{INTEGER}
PUSH C
CHGCTX #1
MOV B,A${STRING}
POP D
POP C
JSR MID
JSR COPYSTR
MOV TF${STRING},A
NOP
MOV Y,II{REAL}
PUSH Y
NOP
POP X
MOV Y,#1{INTEGER}
MOV G,MV%[]{INTEGER}
JSR ARRAYSTORE
61290:
NOP
MOV B,#0{STRING}
MOV A,TF${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP191
JMP SKIP191
NSKIP191:
NOP
NOP
MOV Y,II{REAL}
PUSH Y
NOP
POP X
MOV Y,#0{INTEGER}
MOV G,MV%[]{INTEGER}
JSR ARRAYSTORE
SKIP191:
61300:
NOP
MOV Y,II{REAL}
PUSH Y
NOP
JSR COMPACTMAX
MOV Y,I{REAL}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV Y,#2{INTEGER}
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,A${STRING}
JSR RIGHT
JSR COPYSTR
POP X
MOV G,IT$[]{STRING}
JSR ARRAYSTORE
61302:
NOP
MOV X,II{REAL}
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV TX${STRING},A
NOP
JSR GOSUB
JSR 63100
NOP
MOV Y,II{REAL}
PUSH Y
NOP
MOV A,TX${STRING}
POP X
MOV G,IL$[]{STRING}
JSR ARRAYSTORE
NOP
JSR COMPACTMAX
MOV Y,#46{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
61305:
NOP
JSR GOSUB
JSR 61400
61310:
NOP
MOV Y,#64{INTEGER}
MOV X,ST{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP192
JMP SKIP192
NSKIP192:
JMP 61330
NOP
SKIP192:
61320:
NOP
MOV X,J%{INTEGER}
JSR FINX
MOV J%{INTEGER},X
NOP
JMP 61230
61330:
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
61340:
NOP
MOV Y,J%{INTEGER}
MOV TI%{INTEGER},Y
NOP
MOV X,#2{INTEGER}
JSR CLOSE
NOP
JMP RETURN
61400:
NOP
61405:
NOP
MOV Y,#0{INTEGER}
MOV T%{INTEGER},Y
NOP
MOV Y,AD{REAL}
MOV SD{REAL},Y
NOP
MOV Y,#1{INTEGER}
MOV X,AD{REAL}
ADD X,Y
MOV AD{REAL},X
61410:
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,#***{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP193
JMP SKIP193
NSKIP193:
JMP 61460
NOP
SKIP193:
61415:
NOP
MOV B,A${STRING}
CHGCTX #0
JSR LEN
MOV PP%{INTEGER},X
NOP
MOV Y,PP%{INTEGER}
MOV X,T%{INTEGER}
ADD X,Y
MOV T%{INTEGER},X
NOP
MOV Y,#40{INTEGER}
MOV X,PP%{INTEGER}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP194
JMP SKIP194
NSKIP194:
NOP
NOP
MOV X,T%{INTEGER}
JSR FINX
MOV T%{INTEGER},X
SKIP194:
61420:
NOP
MOV B,A${STRING}
MOV TX${STRING},B
NOP
JSR GOSUB
JSR 61000
61430:
NOP
MOV Y,#1{INTEGER}
MOV P{REAL},Y
NOP
MOV Y,PP%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
JSR COMPACTMAX
MOV C,P{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,TX${STRING}
JSR MID
JSR COPYSTR
MOV A${STRING},A
61440:
NOP
MOV Y,P{REAL}
MOV X,AD{REAL}
ADD X,Y
MOV Y,#1{INTEGER}
SUB X,Y
PUSH X
MOV B,A${STRING}
CHGCTX #0
JSR ASC
POP Y
MOVB (Y),X
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#1{INTEGER}
MOV X,P{REAL}
SUB X,Y
MOV P{REAL},X
NOP
MOV Y,#40{INTEGER}
MOV X,PP%{INTEGER}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP195
JMP SKIP195
NSKIP195:
MOV Y,P{REAL}
NOP
MOV X,AD{REAL}
ADD X,Y
MOV Y,X
MOVB (Y),#13{INTEGER}
NOP
NOP
MOV Y,#1{INTEGER}
MOV X,P{REAL}
ADD X,Y
MOV P{REAL},X
SKIP195:
61450:
NOP
MOV Y,P{REAL}
MOV X,AD{REAL}
ADD X,Y
MOV AD{REAL},X
NOP
MOV Y,#53179{INTEGER}
MOV X,AD{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP196
JMP SKIP196
NSKIP196:
JMP 42420
NOP
SKIP196:
61455:
NOP
JMP 61410
61460:
NOP
MOV Y,II{REAL}
PUSH Y
NOP
MOV Y,BA{REAL}
MOV X,SD{REAL}
SUB X,Y
MOV Y,X
POP X
MOV G,ID%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV Y,#1{INTEGER}
MOV X,AD{REAL}
SUB X,Y
MOV AD{REAL},X
NOP
MOV Y,SD{REAL}
PUSH Y
MOV X,T%{INTEGER}
JSR FDEX
POP Y
MOVB (Y),X
NOP
JMP RETURN
61500:
NOP
61510:
NOP
MOV A,#Lade Befehle...{STRING}
JSR STROUT
61520:
NOP
MOV Y,#0{INTEGER}
MOV P{REAL},Y
NOP
MOV B,#commands.def{STRING}
MOV SX${STRING},B
NOP
JSR GOSUB
JSR 45100
61530:
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,A${STRING}
CHGCTX #0
JSR VAL
MOV II{REAL},X
61540:
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,A${STRING}
CHGCTX #0
JSR VAL
MOV PP{REAL},X
61545:
NOP
JSR GOSUB
JSR 61700
NOP
MOV Y,II{REAL}
PUSH Y
NOP
MOV A,A${STRING}
POP X
MOV G,CV$[]{STRING}
JSR ARRAYSTORE
61550:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#1{INTEGER}
MOV X,PP{REAL}
SUB X,Y
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
JSR GOSUB
JSR 61700
61560:
NOP
MOV Y,I{REAL}
INT X,Y
MOV A,#4{INTEGER}
MOV Y,X
SHL Y,A
ADD X,Y
PUSH X
MOV Y,II{REAL}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,A${STRING}
POP X
MOV G,CM$[]{STRING}
JSR ARRAYSTORE
NOP
JSR COMPACTMAX
MOV Y,#46{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
61570:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#64{INTEGER}
MOV X,ST{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP197
JMP SKIP197
NSKIP197:
NOP
NOP
MOV Y,#1{INTEGER}
MOV X,P{REAL}
ADD X,Y
MOV P{REAL},X
JMP 61530
NOP
SKIP197:
61580:
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
61590:
NOP
MOV Y,P{REAL}
MOV TB%{INTEGER},Y
NOP
MOV X,#2{INTEGER}
JSR CLOSE
61600:
NOP
MOV B,#endid.def{STRING}
MOV SX${STRING},B
NOP
JSR GOSUB
JSR 45100
NOP
MOV Y,#2{INTEGER}
PUSH Y
JSR CLEARQUEUE
JSR COMPACTMAX
POP C
JSR INPUTNUMBERCHANNEL
MOV LR%{INTEGER},Y
NOP
MOV X,#2{INTEGER}
JSR CLOSE
NOP
JMP RETURN
61700:
NOP
61710:
NOP
MOV Y,#2{INTEGER}
PUSH Y
JSR CLEARQUEUE
JSR COMPACTMAX
POP C
JSR INPUTSTRCHANNEL
MOV A${STRING},A
NOP
JMP RETURN
62000:
NOP
62005:
NOP
JSR GOSUB
JSR 62100
NOP
MOV Y,#2{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#2{INTEGER}
PUSH Y
MOV B,RN${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,A${STRING}
CHGCTX #0
JSR VAL
MOV RD%{INTEGER},X
NOP
MOVB 646,#15{INTEGER}
62008:
NOP
JSR GOSUB
JSR 61700
NOP
MOV B,A${STRING}
MOV RL${STRING},B
62010:
NOP
MOV Y,#2{INTEGER}
PUSH Y
JSR CLEARQUEUE
JSR COMPACTMAX
POP C
JSR INPUTSTRCHANNEL
MOV A${STRING},A
NOP
JSR GOSUB
JSR 59860
NOP
62020:
NOP
MOV B,#***{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP198
JMP SKIP198
NSKIP198:
NOP
NOP
MOV X,MD%{INTEGER}
JSR FINX
MOV MD%{INTEGER},X
JMP 62050
NOP
SKIP198:
62030:
NOP
MOV B,A${STRING}
MOV TX${STRING},B
NOP
JSR GOSUB
JSR 61000
NOP
MOV B,TX${STRING}
MOV A${STRING},B
62040:
NOP
MOV Y,MD%{INTEGER}
INT Y,Y
ON2SUB0:
CMP Y,#1{INTEGER}
JNE ON2SUB1
JSR GOSUB
JSR 62200
JMP GSKIPON2
ON2SUB1:
CMP Y,#2{INTEGER}
JNE ON2SUB2
JSR GOSUB
JSR 62300
JMP GSKIPON2
ON2SUB2:
CMP Y,#3{INTEGER}
JNE ON2SUB3
JSR GOSUB
JSR 62400
JMP GSKIPON2
ON2SUB3:
CMP Y,#4{INTEGER}
JNE GSKIPON2
JSR GOSUB
JSR 42000
JMP GSKIPON2
GSKIPON2:
62050:
NOP
MOV Y,#64{INTEGER}
MOV X,ST{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP199
JMP SKIP199
NSKIP199:
MOV Y,#2{INTEGER}
NOP
MOV X,Y
JSR CLOSE
JMP RETURN
NOP
SKIP199:
62060:
NOP
JMP 62010
62100:
NOP
62110:
NOP
MOV Y,#1{INTEGER}
MOV MD%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV PL%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV EL%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV IL%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV OC%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV XC%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV TC%{INTEGER},Y
62120:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,PL%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV A,#{STRING}
POP X
MOV G,RD$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62130:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,XO%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,OX%{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV Y,II{REAL}
INT X,Y
MOV A,#3{INTEGER}
MOV Y,X
SHL X,A
MOV A,#1{INTEGER}
SHL Y,A
ADD X,Y
PUSH X
MOV Y,I{REAL}
INT X,Y
POP Y
ADD X,Y
PUSH X
NOP
MOV A,#{STRING}
POP X
MOV G,OP$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62140:
NOP
JMP RETURN
62200:
NOP
62210:
NOP
MOV Y,PL%{INTEGER}
PUSH Y
NOP
MOV A,A${STRING}
POP X
MOV G,RD$[]{STRING}
JSR ARRAYSTORE
62220:
NOP
MOV Y,#40{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP200
JMP SKIP200
NSKIP200:
NOP
NOP
MOV A,A${STRING}
JSR STROUT
JMP 62240
NOP
SKIP200:
62230:
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
62240:
NOP
MOV X,PL%{INTEGER}
JSR FINX
MOV PL%{INTEGER},X
NOP
JMP RETURN
62300:
NOP
62305:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP201
JMP SKIP201
NSKIP201:
JMP RETURN
NOP
SKIP201:
62310:
NOP
MOV Y,#1{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#1{INTEGER}
MOV I{REAL},Y
NOP
MOV B,A${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
62320:
NOP
JSR COMPACTMAX
MOV B,#,{STRING}
CHGCTX #0
PUSH B
MOV C,I{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,A${STRING}
JSR MID
POP B
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP202
JMP SKIP202
NSKIP202:
NOP
NOP
MOV Y,I{REAL}
MOV II{REAL},Y
NOP
NOP
MOV Y,#256{INTEGER}
MOV I{REAL},Y
SKIP202:
62330:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62340:
NOP
MOV Y,EL%{INTEGER}
PUSH Y
NOP
JSR COMPACTMAX
MOV Y,II{REAL}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV Y,#2{INTEGER}
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,A${STRING}
JSR RIGHT
JSR COPYSTR
POP X
MOV G,EX$[]{STRING}
JSR ARRAYSTORE
62350:
NOP
MOV Y,EL%{INTEGER}
PUSH Y
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
MOV X,II{REAL}
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,A${STRING}
JSR LEFT
JSR COPYSTR
POP X
MOV G,XN$[]{STRING}
JSR ARRAYSTORE
62360:
NOP
MOV Y,EL%{INTEGER}
PUSH Y
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
MOV X,II{REAL}
ADD X,Y
PUSH X
MOV C,#1{INTEGER}
PUSH C
CHGCTX #1
MOV B,A${STRING}
POP D
POP C
JSR MID
MOV B,A
CHGCTX #0
JSR VAL
MOV Y,X
POP X
MOV G,LK%[]{INTEGER}
JSR ARRAYSTORE
62370:
NOP
MOV X,EL%{INTEGER}
JSR FINX
MOV EL%{INTEGER},X
NOP
JMP RETURN
62400:
NOP
62405:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,A${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP203
JMP SKIP203
NSKIP203:
JMP RETURN
NOP
SKIP203:
62410:
NOP
MOV Y,IL%{INTEGER}
PUSH Y
NOP
MOV A,A${STRING}
POP X
MOV G,RI$[]{STRING}
JSR ARRAYSTORE
62420:
NOP
MOV X,IL%{INTEGER}
JSR FINX
MOV IL%{INTEGER},X
NOP
JMP RETURN
62500:
NOP
62510:
NOP
JSR GOSUB
JSR 62900
62520:
NOP
MOV Y,#0{INTEGER}
MOV X,XC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP204
JMP SKIP204
NSKIP204:
JMP RETURN
NOP
SKIP204:
62530:
NOP
MOVB 646,#7{INTEGER}
NOP
MOV A,#Ausgaenge sind: {STRING}
JSR STROUT
62540:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,XC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
62550:
NOP
MOV Y,#0{INTEGER}
MOV X,I{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP205
JMP SKIP205
NSKIP205:
NOP
NOP
MOV A,#, {STRING}
JSR STROUT
SKIP205:
62560:
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,XP$[]{STRING}
JSR ARRAYACCESS
JSR STROUT
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR LINEBREAK
NOP
JMP RETURN
62600:
NOP
62610:
NOP
JSR GOSUB
JSR 62750
62660:
NOP
MOV Y,#0{INTEGER}
MOV X,TC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP206
JMP SKIP206
NSKIP206:
JMP RETURN
NOP
SKIP206:
62670:
NOP
MOVB 646,#14{INTEGER}
NOP
MOV A,#Du siehst: {STRING}
JSR STROUT
62680:
NOP
MOV B,#{STRING}
MOV A${STRING},B
NOP
MOV Y,#11{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,TC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
MOV G,IP%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
CHGCTX #1
MOV G,IT$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV B${STRING},A
62690:
NOP
MOV Y,#0{INTEGER}
MOV X,I{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP207
JMP SKIP207
NSKIP207:
NOP
NOP
JSR COMPACTMAX
MOV B,#, {STRING}
MOV A,A${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
NOP
NOP
MOV Y,#2{INTEGER}
MOV X,II{REAL}
ADD X,Y
MOV II{REAL},X
SKIP207:
62700:
NOP
MOV B,B${STRING}
CHGCTX #0
JSR LEN
MOV Y,II{REAL}
ADD X,Y
MOV Y,#37{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP208
JMP SKIP208
NSKIP208:
NOP
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
NOP
NOP
MOV B,#{STRING}
MOV A${STRING},B
NOP
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
SKIP208:
62710:
NOP
JSR COMPACTMAX
MOV B,B${STRING}
MOV A,A${STRING}
JSR CONCAT
JSR COPYSTR
MOV A${STRING},A
NOP
MOV B,B${STRING}
CHGCTX #0
JSR LEN
MOV Y,II{REAL}
ADD X,Y
MOV II{REAL},X
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62720:
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
62750:
NOP
62752:
NOP
MOV Y,#0{INTEGER}
MOV TC%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,IL%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP209
JMP SKIP209
NSKIP209:
JMP 62795
NOP
SKIP209:
62755:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,IL%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,RI$[]{STRING}
JSR ARRAYACCESS
MOV B,A
CHGCTX #0
JSR VAL
MOV P{REAL},X
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,IC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP210
JMP SKIP210
NSKIP210:
JMP 62775
NOP
SKIP210:
62760:
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV X,IC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV X,II{REAL}
MOV G,IV%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,P{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP211
JMP SKIP211
NSKIP211:
NOP
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
NOP
NOP
MOV Y,IC%{INTEGER}
MOV II{REAL},Y
SKIP211:
62770:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#1{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP212
JMP SKIP212
NSKIP212:
JMP 62790
NOP
SKIP212:
62775:
NOP
MOV X,P{REAL}
MOV G,RS%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#1{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP213
JMP SKIP213
NSKIP213:
JMP 62790
NOP
SKIP213:
62780:
NOP
MOV Y,TC%{INTEGER}
PUSH Y
NOP
POP X
MOV Y,P{REAL}
MOV G,IP%[]{INTEGER}
JSR ARRAYSTORE
NOP
MOV X,TC%{INTEGER}
JSR FINX
MOV TC%{INTEGER},X
62790:
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62795:
NOP
JSR GOSUB
JSR 41300
NOP
JMP RETURN
62900:
NOP
62905:
NOP
MOV Y,#0{INTEGER}
MOV XC%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,EL%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP214
JMP SKIP214
NSKIP214:
JMP RETURN
NOP
SKIP214:
62910:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,EL%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,#1{INTEGER}
MOV P%{INTEGER},Y
NOP
MOV X,I{REAL}
MOV G,LK%[]{INTEGER}
CHGCTX #0
JSR ARRAYACCESS
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP215
JMP SKIP215
NSKIP215:
JMP 62940
NOP
SKIP215:
62920:
NOP
MOV Y,#0{INTEGER}
MOV P%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV II{REAL},Y
NOP
MOV Y,#3{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(II{REAL})
JSR INITFOR
NOP
MOV Y,II{REAL}
INT X,Y
MOV Y,#36{INTEGER}
MUL X,Y
PUSH X
MOV Y,RD%{INTEGER}
INT X,Y
POP Y
ADD X,Y
CHGCTX #1
MOV G,LX$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV TX${STRING},A
NOP
JSR GOSUB
JSR 63100
NOP
MOV B,TX${STRING}
MOV A1${STRING},B
62925:
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,EX$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV TX${STRING},A
NOP
JSR GOSUB
JSR 63100
NOP
MOV B,TX${STRING}
MOV A2${STRING},B
NOP
MOV B,A2${STRING}
MOV A,A1${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP216
JMP SKIP216
NSKIP216:
NOP
NOP
MOV Y,#1{INTEGER}
MOV P%{INTEGER},Y
NOP
NOP
MOV Y,#4{INTEGER}
MOV II{REAL},Y
SKIP216:
62930:
NOP
MOV A,(II{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
MOV X,P%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP217
JMP SKIP217
NSKIP217:
JMP 62950
NOP
SKIP217:
62940:
NOP
MOV Y,XC%{INTEGER}
PUSH Y
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,EX$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
POP X
MOV G,XP$[]{STRING}
JSR ARRAYSTORE
NOP
MOV Y,XC%{INTEGER}
PUSH Y
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,XN$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
POP X
MOV G,XX$[]{STRING}
JSR ARRAYSTORE
NOP
MOV X,XC%{INTEGER}
JSR FINX
MOV XC%{INTEGER},X
62950:
NOP
MOV A,(I{})
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JMP RETURN
63000:
NOP
63005:
NOP
MOVB X,211
MOV I{REAL},X
NOP
MOVB X,214
MOV II{REAL},X
NOP
MOVB 646,#13{INTEGER}
63010:
NOP
MOV Y,#55296{INTEGER}
MOV P{REAL},Y
MOV Y,#55335{INTEGER}
PUSH Y
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
MOV X,#13{INTEGER}
JSR FASTFOR
CMP A,#0{INTEGER}
JE ($JUMP)
63015:
NOP
MOV Y,#1024{INTEGER}
MOV P{REAL},Y
MOV Y,#1063{INTEGER}
PUSH Y
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
MOV X,#160{INTEGER}
JSR FASTFOR
CMP A,#0{INTEGER}
JE ($JUMP)
63030:
NOP
JSR COMPACTMAX
MOV Y,#19{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#18{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,RL${STRING}
JSR STROUT
63035:
NOP
JSR COMPACTMAX
MOV Y,PO%{INTEGER}
CHGCTX #1
JSR STR
JSR COPYSTR
MOV A${STRING},A
NOP
MOV B,A${STRING}
CHGCTX #0
JSR LEN
PUSH X
CHGCTX #1
MOV B,RL${STRING}
CHGCTX #0
JSR LEN
MOV Y,X
MOV X,#39{INTEGER}
SUB X,Y
POP Y
SUB X,Y
MOV Y,X
CHGCTX #1
JSR SPC
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
63036:
NOP
JSR COMPACTMAX
MOV Y,#146{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
JSR LINEBREAK
NOP
MOVB 646,#15{INTEGER}
63040:
NOP
MOV X,II{REAL}
MOVB 781,X
NOP
MOV X,I{REAL}
MOVB 782,X
NOP
MOVB 783,#0{INTEGER}
NOP
JSR $fff0
NOP
JMP RETURN
63100:
NOP
63105:
NOP
MOV B,TX${STRING}
CHGCTX #0
JSR LEN
MOV C%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV X,C%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP218
JMP SKIP218
NSKIP218:
JMP RETURN
NOP
SKIP218:
63106:
NOP
MOV Y,#1{INTEGER}
MOV X,C%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP219
JMP SKIP219
NSKIP219:
JMP 63180
NOP
SKIP219:
63110:
NOP
MOV B,#{STRING}
MOV SX${STRING},B
NOP
MOV Y,#1{INTEGER}
MOV PP{REAL},Y
NOP
MOV B,TX${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(PP{REAL})
JSR INITFOR
63120:
NOP
JSR COMPACTMAX
MOV C,PP{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,TX${STRING}
JSR MID
MOV B,A
CHGCTX #0
JSR ASC
MOV C%{INTEGER},X
63130:
NOP
JSR GOSUB
JSR 63250
63150:
NOP
JSR COMPACTMAX
MOV Y,C%{INTEGER}
CHGCTX #1
JSR CHR
MOV B,A
MOV A,SX${STRING}
JSR CONCAT
JSR COPYSTR
MOV SX${STRING},A
63160:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV B,SX${STRING}
MOV TX${STRING},B
NOP
JMP RETURN
63180:
NOP
MOV B,TX${STRING}
CHGCTX #0
JSR ASC
MOV C%{INTEGER},X
NOP
63190:
NOP
JSR GOSUB
JSR 63250
63210:
NOP
JSR COMPACTMAX
MOV Y,C%{INTEGER}
CHGCTX #1
JSR CHR
JSR COPYSTR
MOV TX${STRING},A
NOP
JMP RETURN
63250:
NOP
63260:
NOP
MOV Y,#191{INTEGER}
MOV X,C%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP220
JMP SKIP220
NSKIP220:
NOP
NOP
MOV Y,#128{INTEGER}
MOV X,C%{INTEGER}
SUB X,Y
MOV C%{INTEGER},X
SKIP220:
63270:
NOP
MOV Y,#90{INTEGER}
MOV X,C%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP221
JMP SKIP221
NSKIP221:
NOP
NOP
MOV Y,#32{INTEGER}
MOV X,C%{INTEGER}
SUB X,Y
MOV C%{INTEGER},X
SKIP221:
63280:
NOP
JMP RETURN
63300:
NOP
63310:
NOP
JSR COMPACTMAX
MOV Y,#14{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
JSR LINEBREAK
NOP
MOVB 53280,#0{INTEGER}
NOP
MOVB 53281,#0{INTEGER}
NOP
MOVB 646,#15{INTEGER}
63320:
NOP
JMP RETURN
63400:
NOP
JSR END
RTS
